"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./data/unitInfo.ts":
/*!**************************!*\
  !*** ./data/unitInfo.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INITIAL_UNITS: function() { return /* binding */ INITIAL_UNITS; }\n/* harmony export */ });\nconst INITIAL_UNITS = [\n    {\n        name: \"Swordsman\",\n        description: \"Basic melee infantry. Sturdy and reliable.\",\n        cost: {\n            food: 60,\n            gold: 20\n        },\n        trainTime: 22,\n        hp: 45,\n        attack: 4,\n        attackRate: 1,\n        attackRange: 0,\n        movementSpeed: 1,\n        populationCost: 1,\n        unitType: \"infantry\",\n        armorValues: [\n            {\n                type: \"melee\",\n                value: 1\n            }\n        ],\n        iconId: \"swordsman\",\n        requiredBuilding: \"barracks\"\n    },\n    {\n        name: \"Archer\",\n        description: \"Ranged unit effective against infantry.\",\n        cost: {\n            food: 30,\n            wood: 40\n        },\n        trainTime: 25,\n        hp: 30,\n        attack: 5,\n        attackRate: 0.8,\n        attackRange: 4,\n        movementSpeed: 1.1,\n        populationCost: 1,\n        unitType: \"archer\",\n        attackBonuses: [\n            {\n                targetType: \"infantry\",\n                bonus: 2\n            }\n        ],\n        iconId: \"archer\",\n        requiredBuilding: \"archeryRange\"\n    },\n    {\n        name: \"Knight\",\n        description: \"Fast and powerful cavalry, excels at raiding.\",\n        cost: {\n            food: 60,\n            gold: 75\n        },\n        trainTime: 30,\n        hp: 100,\n        attack: 10,\n        attackRate: 1.2,\n        attackRange: 0,\n        movementSpeed: 1.5,\n        populationCost: 1,\n        unitType: \"cavalry\",\n        armorValues: [\n            {\n                type: \"melee\",\n                value: 2\n            },\n            {\n                type: \"pierce\",\n                value: 1\n            }\n        ],\n        iconId: \"knight\",\n        requiredBuilding: \"stable\"\n    },\n    {\n        name: \"Catapult\",\n        description: \"Siege engine devastating to buildings.\",\n        cost: {\n            wood: 150,\n            gold: 150\n        },\n        trainTime: 45,\n        hp: 50,\n        attack: 75,\n        attackRate: 0.2,\n        attackRange: 8,\n        movementSpeed: 0.6,\n        populationCost: 2,\n        unitType: \"siege\",\n        attackBonuses: [\n            {\n                targetType: \"siege\",\n                bonus: 25\n            }\n        ],\n        iconId: \"catapult\",\n        requiredBuilding: \"siegeWorkshop\"\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2RhdGEvdW5pdEluZm8udHMiLCJtYXBwaW5ncyI6Ijs7OztBQUVPLE1BQU1BLGdCQUE2RjtJQUN0RztRQUNJQyxNQUFNO1FBQ05DLGFBQWE7UUFDYkMsTUFBTTtZQUFFQyxNQUFNO1lBQUlDLE1BQU07UUFBRztRQUMzQkMsV0FBVztRQUNYQyxJQUFJO1FBQ0pDLFFBQVE7UUFDUkMsWUFBWTtRQUNaQyxhQUFhO1FBQ2JDLGVBQWU7UUFDZkMsZ0JBQWdCO1FBQ2hCQyxVQUFVO1FBQ1ZDLGFBQWE7WUFBQztnQkFBRUMsTUFBTTtnQkFBU0MsT0FBTztZQUFFO1NBQUU7UUFDMUNDLFFBQVE7UUFDUkMsa0JBQWtCO0lBQ3RCO0lBQ0E7UUFDSWpCLE1BQU07UUFDTkMsYUFBYTtRQUNiQyxNQUFNO1lBQUVDLE1BQU07WUFBSWUsTUFBTTtRQUFHO1FBQzNCYixXQUFXO1FBQ1hDLElBQUk7UUFDSkMsUUFBUTtRQUNSQyxZQUFZO1FBQ1pDLGFBQWE7UUFDYkMsZUFBZTtRQUNmQyxnQkFBZ0I7UUFDaEJDLFVBQVU7UUFDVk8sZUFBZTtZQUFDO2dCQUFFQyxZQUFZO2dCQUFZQyxPQUFPO1lBQUU7U0FBRTtRQUNyREwsUUFBUTtRQUNSQyxrQkFBa0I7SUFDdEI7SUFDQTtRQUNJakIsTUFBTTtRQUNOQyxhQUFhO1FBQ2JDLE1BQU07WUFBRUMsTUFBTTtZQUFJQyxNQUFNO1FBQUc7UUFDM0JDLFdBQVc7UUFDWEMsSUFBSTtRQUNKQyxRQUFRO1FBQ1JDLFlBQVk7UUFDWkMsYUFBYTtRQUNiQyxlQUFlO1FBQ2ZDLGdCQUFnQjtRQUNoQkMsVUFBVTtRQUNWQyxhQUFhO1lBQUM7Z0JBQUVDLE1BQU07Z0JBQVNDLE9BQU87WUFBRTtZQUFHO2dCQUFFRCxNQUFNO2dCQUFVQyxPQUFPO1lBQUU7U0FBRTtRQUN4RUMsUUFBUTtRQUNSQyxrQkFBa0I7SUFDdEI7SUFDQTtRQUNJakIsTUFBTTtRQUNOQyxhQUFhO1FBQ2JDLE1BQU07WUFBRWdCLE1BQU07WUFBS2QsTUFBTTtRQUFJO1FBQzdCQyxXQUFXO1FBQ1hDLElBQUk7UUFDSkMsUUFBUTtRQUNSQyxZQUFZO1FBQ1pDLGFBQWE7UUFDYkMsZUFBZTtRQUNmQyxnQkFBZ0I7UUFDaEJDLFVBQVU7UUFDVk8sZUFBZTtZQUFDO2dCQUFFQyxZQUFZO2dCQUFTQyxPQUFPO1lBQUc7U0FBRTtRQUNuREwsUUFBUTtRQUNSQyxrQkFBa0I7SUFDdEI7Q0FDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2RhdGEvdW5pdEluZm8udHM/YzJiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFVuaXRDb25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBJTklUSUFMX1VOSVRTOiBPbWl0PFVuaXRDb25maWcsICdpc0FjdGl2ZScgfCAnaXNQcmVkZWZpbmVkJyB8ICdvcmRlcicgfCAndHJlZUlkJyB8ICdpZCc+W10gPSBbXG4gICAgeyBcbiAgICAgICAgbmFtZTogJ1N3b3Jkc21hbicsIFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0Jhc2ljIG1lbGVlIGluZmFudHJ5LiBTdHVyZHkgYW5kIHJlbGlhYmxlLicsIFxuICAgICAgICBjb3N0OiB7IGZvb2Q6IDYwLCBnb2xkOiAyMCB9LCBcbiAgICAgICAgdHJhaW5UaW1lOiAyMixcbiAgICAgICAgaHA6IDQ1LFxuICAgICAgICBhdHRhY2s6IDQsXG4gICAgICAgIGF0dGFja1JhdGU6IDEsXG4gICAgICAgIGF0dGFja1JhbmdlOiAwLFxuICAgICAgICBtb3ZlbWVudFNwZWVkOiAxLFxuICAgICAgICBwb3B1bGF0aW9uQ29zdDogMSxcbiAgICAgICAgdW5pdFR5cGU6ICdpbmZhbnRyeScsXG4gICAgICAgIGFybW9yVmFsdWVzOiBbeyB0eXBlOiAnbWVsZWUnLCB2YWx1ZTogMSB9XSxcbiAgICAgICAgaWNvbklkOiAnc3dvcmRzbWFuJyxcbiAgICAgICAgcmVxdWlyZWRCdWlsZGluZzogJ2JhcnJhY2tzJ1xuICAgIH0sXG4gICAgeyBcbiAgICAgICAgbmFtZTogJ0FyY2hlcicsIFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1JhbmdlZCB1bml0IGVmZmVjdGl2ZSBhZ2FpbnN0IGluZmFudHJ5LicsIFxuICAgICAgICBjb3N0OiB7IGZvb2Q6IDMwLCB3b29kOiA0MCB9LCBcbiAgICAgICAgdHJhaW5UaW1lOiAyNSxcbiAgICAgICAgaHA6IDMwLFxuICAgICAgICBhdHRhY2s6IDUsXG4gICAgICAgIGF0dGFja1JhdGU6IDAuOCxcbiAgICAgICAgYXR0YWNrUmFuZ2U6IDQsXG4gICAgICAgIG1vdmVtZW50U3BlZWQ6IDEuMSxcbiAgICAgICAgcG9wdWxhdGlvbkNvc3Q6IDEsXG4gICAgICAgIHVuaXRUeXBlOiAnYXJjaGVyJyxcbiAgICAgICAgYXR0YWNrQm9udXNlczogW3sgdGFyZ2V0VHlwZTogJ2luZmFudHJ5JywgYm9udXM6IDIgfV0sXG4gICAgICAgIGljb25JZDogJ2FyY2hlcicsXG4gICAgICAgIHJlcXVpcmVkQnVpbGRpbmc6ICdhcmNoZXJ5UmFuZ2UnXG4gICAgfSxcbiAgICB7IFxuICAgICAgICBuYW1lOiAnS25pZ2h0JywgXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRmFzdCBhbmQgcG93ZXJmdWwgY2F2YWxyeSwgZXhjZWxzIGF0IHJhaWRpbmcuJywgXG4gICAgICAgIGNvc3Q6IHsgZm9vZDogNjAsIGdvbGQ6IDc1IH0sIFxuICAgICAgICB0cmFpblRpbWU6IDMwLFxuICAgICAgICBocDogMTAwLFxuICAgICAgICBhdHRhY2s6IDEwLFxuICAgICAgICBhdHRhY2tSYXRlOiAxLjIsXG4gICAgICAgIGF0dGFja1JhbmdlOiAwLFxuICAgICAgICBtb3ZlbWVudFNwZWVkOiAxLjUsXG4gICAgICAgIHBvcHVsYXRpb25Db3N0OiAxLFxuICAgICAgICB1bml0VHlwZTogJ2NhdmFscnknLFxuICAgICAgICBhcm1vclZhbHVlczogW3sgdHlwZTogJ21lbGVlJywgdmFsdWU6IDIgfSwgeyB0eXBlOiAncGllcmNlJywgdmFsdWU6IDEgfV0sXG4gICAgICAgIGljb25JZDogJ2tuaWdodCcsXG4gICAgICAgIHJlcXVpcmVkQnVpbGRpbmc6ICdzdGFibGUnXG4gICAgfSxcbiAgICB7IFxuICAgICAgICBuYW1lOiAnQ2F0YXB1bHQnLCBcbiAgICAgICAgZGVzY3JpcHRpb246ICdTaWVnZSBlbmdpbmUgZGV2YXN0YXRpbmcgdG8gYnVpbGRpbmdzLicsIFxuICAgICAgICBjb3N0OiB7IHdvb2Q6IDE1MCwgZ29sZDogMTUwIH0sIFxuICAgICAgICB0cmFpblRpbWU6IDQ1LFxuICAgICAgICBocDogNTAsXG4gICAgICAgIGF0dGFjazogNzUsXG4gICAgICAgIGF0dGFja1JhdGU6IDAuMiwgLy8gdmVyeSBzbG93XG4gICAgICAgIGF0dGFja1JhbmdlOiA4LFxuICAgICAgICBtb3ZlbWVudFNwZWVkOiAwLjYsXG4gICAgICAgIHBvcHVsYXRpb25Db3N0OiAyLFxuICAgICAgICB1bml0VHlwZTogJ3NpZWdlJyxcbiAgICAgICAgYXR0YWNrQm9udXNlczogW3sgdGFyZ2V0VHlwZTogJ3NpZWdlJywgYm9udXM6IDI1IH1dLCAvLyBmb3IgY291bnRlci1zaWVnaW5nIGJ1aWxkaW5nc1xuICAgICAgICBpY29uSWQ6ICdjYXRhcHVsdCcsXG4gICAgICAgIHJlcXVpcmVkQnVpbGRpbmc6ICdzaWVnZVdvcmtzaG9wJ1xuICAgIH0sXG5dO1xuIl0sIm5hbWVzIjpbIklOSVRJQUxfVU5JVFMiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJjb3N0IiwiZm9vZCIsImdvbGQiLCJ0cmFpblRpbWUiLCJocCIsImF0dGFjayIsImF0dGFja1JhdGUiLCJhdHRhY2tSYW5nZSIsIm1vdmVtZW50U3BlZWQiLCJwb3B1bGF0aW9uQ29zdCIsInVuaXRUeXBlIiwiYXJtb3JWYWx1ZXMiLCJ0eXBlIiwidmFsdWUiLCJpY29uSWQiLCJyZXF1aXJlZEJ1aWxkaW5nIiwid29vZCIsImF0dGFja0JvbnVzZXMiLCJ0YXJnZXRUeXBlIiwiYm9udXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/unitInfo.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./types.ts\");\n/* harmony import */ var _services_geminiService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/geminiService */ \"(app-pages-browser)/./services/geminiService.ts\");\n/* harmony import */ var _services_dbService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/dbService */ \"(app-pages-browser)/./services/dbService.ts\");\n/* harmony import */ var _services_nameService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/nameService */ \"(app-pages-browser)/./services/nameService.ts\");\n/* harmony import */ var _data_itemContent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/data/itemContent */ \"(app-pages-browser)/./data/itemContent.ts\");\n/* harmony import */ var _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/data/ageInfo */ \"(app-pages-browser)/./data/ageInfo.ts\");\n/* harmony import */ var _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/data/buildingInfo */ \"(app-pages-browser)/./data/buildingInfo.ts\");\n/* harmony import */ var _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/data/unitInfo */ \"(app-pages-browser)/./data/unitInfo.ts\");\n/* harmony import */ var _components_GameUI__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/GameUI */ \"(app-pages-browser)/./components/GameUI.tsx\");\n/* harmony import */ var _components_StartScreen__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/StartScreen */ \"(app-pages-browser)/./components/StartScreen.tsx\");\n/* harmony import */ var _components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/LoadingScreen */ \"(app-pages-browser)/./components/LoadingScreen.tsx\");\n/* harmony import */ var _components_BuildPanel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/components/BuildPanel */ \"(app-pages-browser)/./components/BuildPanel.tsx\");\n/* harmony import */ var _components_NotificationManager__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/components/NotificationManager */ \"(app-pages-browser)/./components/NotificationManager.tsx\");\n/* harmony import */ var _components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/components/UnitManagementPanel */ \"(app-pages-browser)/./components/UnitManagementPanel.tsx\");\n/* harmony import */ var _components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/components/BuildingManagementPanel */ \"(app-pages-browser)/./components/BuildingManagementPanel.tsx\");\n/* harmony import */ var _components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @/components/ResourceAssignmentPanel */ \"(app-pages-browser)/./components/ResourceAssignmentPanel.tsx\");\n/* harmony import */ var _components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @/components/CivilizationPanel */ \"(app-pages-browser)/./components/CivilizationPanel.tsx\");\n/* harmony import */ var _components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @/components/AllBuildingsPanel */ \"(app-pages-browser)/./components/AllBuildingsPanel.tsx\");\n/* harmony import */ var _components_InventoryPanel__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @/components/InventoryPanel */ \"(app-pages-browser)/./components/InventoryPanel.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst GATHER_INFO = {\n    food: {\n        rate: 10\n    },\n    wood: {\n        rate: 8\n    },\n    gold: {\n        rate: 5\n    },\n    stone: {\n        rate: 6\n    }\n};\nconst initialBuildingsState = {\n    houses: [],\n    barracks: [],\n    archeryRange: [],\n    stable: [],\n    siegeWorkshop: [],\n    blacksmith: [],\n    watchTower: [],\n    townCenter: []\n};\nconst MAP_DIMENSIONS = {\n    width: 25,\n    height: 18\n};\nconst GamePage = ()=>{\n    _s();\n    // Core Game State\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n    const [civilization, setCivilization] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resources, setResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        food: 200,\n        wood: 150,\n        gold: 50,\n        stone: 100\n    });\n    const [units, setUnits] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        villagers: [],\n        military: []\n    });\n    const [buildings, setBuildings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialBuildingsState);\n    const [currentAge, setCurrentAge] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Nomadic Age\");\n    const [gameLog, setGameLog] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentEvent, setCurrentEvent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resourceDeltas, setResourceDeltas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [activityStatus, setActivityStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Your story begins...\");\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [unlimitedResources, setUnlimitedResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [allSaves, setAllSaves] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentSaveName, setCurrentSaveName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [playerAction, setPlayerAction] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeTasks, setActiveTasks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [resourceNodes, setResourceNodes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [inventory, setInventory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [activeBuffs, setActiveBuffs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        resourceBoost: []\n    });\n    // Master lists of all configurations from DB\n    const [masterAgeList, setMasterAgeList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [masterBuildingList, setMasterBuildingList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [masterUnitList, setMasterUnitList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // App Loading State\n    const [isAppLoading, setIsAppLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Panel States\n    const [buildPanelState, setBuildPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        villagerId: null,\n        anchorRect: null\n    });\n    const [unitManagementPanel, setUnitManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        anchorRect: null\n    });\n    const [buildingManagementPanel, setBuildingManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        instanceId: null,\n        anchorRect: null\n    });\n    const [allBuildingsPanel, setAllBuildingsPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [assignmentPanelState, setAssignmentPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        targetId: null,\n        targetType: null,\n        anchorRect: null\n    });\n    const [civPanelState, setCivPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [inventoryPanelState, setInventoryPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const deltaTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const eventTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastTickRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(Date.now());\n    const animationFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    // Derived state for active game configurations\n    const ageProgressionList = masterAgeList.filter((age)=>age.isActive);\n    const buildingList = masterBuildingList; // Keep all for lookups, filter on use\n    const unitList = masterUnitList; // Keep all for lookups, filter on use\n    const populationCapacity = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        let capacity = 0;\n        for(const buildingType in buildings){\n            const buildingInfo = masterBuildingList.find((b)=>b.id === buildingType);\n            if (buildingInfo && buildingInfo.populationCapacity) {\n                capacity += buildings[buildingType].length * buildingInfo.populationCapacity;\n            }\n        }\n        return capacity;\n    }, [\n        buildings,\n        masterBuildingList\n    ]);\n    const population = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const militaryPop = units.military.reduce((acc, unit)=>{\n            const unitInfo = masterUnitList.find((u)=>u.id === unit.unitType);\n            return acc + ((unitInfo === null || unitInfo === void 0 ? void 0 : unitInfo.populationCost) || 1);\n        }, 0);\n        return {\n            current: units.villagers.length + militaryPop,\n            capacity: populationCapacity\n        };\n    }, [\n        units,\n        populationCapacity,\n        masterUnitList\n    ]);\n    const fetchSavesAndConfigs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        setIsAppLoading(true);\n        try {\n            var _allAgeConfigs_;\n            const names = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllSaveNames)();\n            setAllSaves(names);\n            // --- Smart Seeding/Updating for Ages ---\n            let allAgeConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllAgeConfigs)();\n            let ageMap = new Map(allAgeConfigs.map((item)=>[\n                    item.id,\n                    item\n                ]));\n            let agesNeedUpdate = false;\n            for (const [index, pItem] of _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES.entries()){\n                const existingItem = ageMap.get(pItem.name);\n                var _existingItem_isActive, _existingItem_order;\n                const newItem = {\n                    ...existingItem || {},\n                    ...pItem,\n                    id: pItem.name,\n                    isPredefined: true,\n                    isActive: (_existingItem_isActive = existingItem === null || existingItem === void 0 ? void 0 : existingItem.isActive) !== null && _existingItem_isActive !== void 0 ? _existingItem_isActive : true,\n                    order: (_existingItem_order = existingItem === null || existingItem === void 0 ? void 0 : existingItem.order) !== null && _existingItem_order !== void 0 ? _existingItem_order : index\n                };\n                if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveAgeConfig)(newItem);\n                    agesNeedUpdate = true;\n                }\n            }\n            if (agesNeedUpdate) allAgeConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllAgeConfigs)();\n            setMasterAgeList(allAgeConfigs);\n            // --- Smart Seeding/Updating for Buildings ---\n            let allBuildingConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllBuildingConfigs)();\n            let buildingMap = new Map(allBuildingConfigs.map((item)=>[\n                    item.id,\n                    item\n                ]));\n            let buildingsNeedUpdate = false;\n            const defaultAge = ((_allAgeConfigs_ = allAgeConfigs[0]) === null || _allAgeConfigs_ === void 0 ? void 0 : _allAgeConfigs_.name) || _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES[0].name;\n            for (const [index, pItem] of _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__.INITIAL_BUILDINGS.entries()){\n                const existingItem = buildingMap.get(pItem.id);\n                var _existingItem_isActive1, _existingItem_order1, _existingItem_populationCapacity;\n                const newItem = {\n                    ...existingItem || {},\n                    ...pItem,\n                    id: pItem.id,\n                    isPredefined: true,\n                    unlockedInAge: (existingItem === null || existingItem === void 0 ? void 0 : existingItem.unlockedInAge) || (pItem.id === \"townCenter\" ? _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES[0].name : defaultAge),\n                    isActive: (_existingItem_isActive1 = existingItem === null || existingItem === void 0 ? void 0 : existingItem.isActive) !== null && _existingItem_isActive1 !== void 0 ? _existingItem_isActive1 : true,\n                    order: (_existingItem_order1 = existingItem === null || existingItem === void 0 ? void 0 : existingItem.order) !== null && _existingItem_order1 !== void 0 ? _existingItem_order1 : index,\n                    populationCapacity: (_existingItem_populationCapacity = existingItem === null || existingItem === void 0 ? void 0 : existingItem.populationCapacity) !== null && _existingItem_populationCapacity !== void 0 ? _existingItem_populationCapacity : pItem.populationCapacity\n                };\n                if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveBuildingConfig)(newItem);\n                    buildingsNeedUpdate = true;\n                }\n            }\n            if (buildingsNeedUpdate) allBuildingConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllBuildingConfigs)();\n            setMasterBuildingList(allBuildingConfigs);\n            // --- Smart Seeding/Updating for Units ---\n            let allUnitConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllUnitConfigs)();\n            const unitMap = new Map(allUnitConfigs.map((item)=>[\n                    item.id,\n                    item\n                ]));\n            let unitsNeedUpdate = false;\n            const initialUnitsWithIds = _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__.INITIAL_UNITS.map((u)=>({\n                    ...u,\n                    id: u.name.toLowerCase().replace(/\\s/g, \"\")\n                }));\n            for (const [index, pItem] of initialUnitsWithIds.entries()){\n                const existingItem = unitMap.get(pItem.id);\n                var _existingItem_isActive2, _existingItem_order2, _existingItem_populationCost;\n                const newItem = {\n                    ...pItem,\n                    ...existingItem || {},\n                    id: pItem.id,\n                    isPredefined: true,\n                    isActive: (_existingItem_isActive2 = existingItem === null || existingItem === void 0 ? void 0 : existingItem.isActive) !== null && _existingItem_isActive2 !== void 0 ? _existingItem_isActive2 : true,\n                    order: (_existingItem_order2 = existingItem === null || existingItem === void 0 ? void 0 : existingItem.order) !== null && _existingItem_order2 !== void 0 ? _existingItem_order2 : index,\n                    treeId: (existingItem === null || existingItem === void 0 ? void 0 : existingItem.treeId) || \"utree-predefined-\".concat(pItem.id),\n                    populationCost: (_existingItem_populationCost = existingItem === null || existingItem === void 0 ? void 0 : existingItem.populationCost) !== null && _existingItem_populationCost !== void 0 ? _existingItem_populationCost : pItem.populationCost\n                };\n                if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveUnitConfig)(newItem);\n                    unitsNeedUpdate = true;\n                }\n            }\n            if (unitsNeedUpdate) allUnitConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllUnitConfigs)();\n            setMasterUnitList(allUnitConfigs);\n            return {\n                allAgeConfigs,\n                allBuildingConfigs,\n                allUnitConfigs\n            };\n        } catch (error) {\n            console.error(\"Error during initial config fetch:\", error);\n            const ages = _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES.map((a, i)=>({\n                    ...a,\n                    id: a.name,\n                    isActive: true,\n                    isPredefined: true,\n                    order: i\n                }));\n            const buildings = _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__.INITIAL_BUILDINGS.map((b, i)=>({\n                    ...b,\n                    isActive: true,\n                    isPredefined: true,\n                    order: i,\n                    unlockedInAge: \"Nomadic Age\"\n                }));\n            const units = _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__.INITIAL_UNITS.map((u, i)=>({\n                    ...u,\n                    id: u.name.toLowerCase().replace(/\\s/g, \"\"),\n                    isActive: true,\n                    isPredefined: true,\n                    order: i\n                }));\n            setMasterAgeList(ages);\n            setMasterBuildingList(buildings);\n            setMasterUnitList(units);\n            return {\n                allAgeConfigs: ages,\n                allBuildingConfigs: buildings,\n                allUnitConfigs: units\n            };\n        } finally{\n            setIsAppLoading(false);\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchSavesAndConfigs();\n    }, [\n        fetchSavesAndConfigs\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && civilization && currentSaveName) {\n            const fullState = {\n                civilization,\n                resources,\n                units,\n                buildings,\n                currentAge,\n                gameLog,\n                activeTasks,\n                resourceNodes,\n                inventory,\n                activeBuffs\n            };\n            (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveGameState)(currentSaveName, fullState);\n        }\n    }, [\n        civilization,\n        resources,\n        units,\n        buildings,\n        currentAge,\n        gameLog,\n        gameState,\n        currentSaveName,\n        activeTasks,\n        resourceNodes,\n        inventory,\n        activeBuffs\n    ]);\n    const addNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n        const id = \"\".concat(Date.now(), \"-\").concat(Math.random());\n        setNotifications((prev)=>[\n                {\n                    id,\n                    message\n                }\n            ]);\n    }, []);\n    const removeNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{\n        setNotifications((prev)=>prev.filter((n)=>n.id !== id));\n    }, []);\n    const addToLog = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message, icon)=>{\n        setGameLog((prev)=>[\n                {\n                    id: \"\".concat(Date.now(), \"-\").concat(Math.random()),\n                    message,\n                    icon\n                },\n                ...prev.slice(0, 19)\n            ]);\n    }, []);\n    const updateResources = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((deltas)=>{\n        setResources((prev)=>{\n            const newResources = {\n                ...prev\n            };\n            for(const key in deltas){\n                const resourceKey = key;\n                var _deltas_resourceKey;\n                newResources[resourceKey] = Math.max(0, newResources[resourceKey] + ((_deltas_resourceKey = deltas[resourceKey]) !== null && _deltas_resourceKey !== void 0 ? _deltas_resourceKey : 0));\n            }\n            return newResources;\n        });\n        setResourceDeltas((prev)=>({\n                ...prev,\n                ...deltas\n            }));\n        for(const key in deltas){\n            const resourceKey = key;\n            if (deltaTimeoutRef.current[resourceKey]) {\n                window.clearTimeout(deltaTimeoutRef.current[resourceKey]);\n            }\n            deltaTimeoutRef.current[resourceKey] = window.setTimeout(()=>{\n                setResourceDeltas((prev)=>{\n                    const newDeltas = {\n                        ...prev\n                    };\n                    delete newDeltas[resourceKey];\n                    return newDeltas;\n                });\n            }, 1500);\n        }\n    }, []);\n    const handleTaskCompletion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((task)=>{\n        var _task_payload;\n        if (((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.villagerIds) && task.payload.villagerIds.length > 0) {\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>task.payload.villagerIds.includes(v.id) ? {\n                            ...v,\n                            currentTask: null\n                        } : v)\n                }));\n        }\n        switch(task.type){\n            case \"build\":\n                {\n                    const { buildingType, position } = task.payload;\n                    const buildingInfo = buildingList.find((b)=>b.id === buildingType);\n                    const [name] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                    const newBuilding = {\n                        id: task.id,\n                        name,\n                        position: position,\n                        currentHp: buildingInfo.hp\n                    };\n                    setBuildings((p)=>{\n                        const currentBuildings = p[buildingType] || [];\n                        return {\n                            ...p,\n                            [buildingType]: [\n                                ...currentBuildings,\n                                newBuilding\n                            ]\n                        };\n                    });\n                    addToLog(\"\".concat(task.payload.villagerIds.length, \" builder(s) have constructed \").concat(name, \", a new \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n                    setActivityStatus(\"Construction of \".concat(name, \" is complete.\"));\n                    break;\n                }\n            case \"upgrade_building\":\n                {\n                    var _buildings_originalBuildingType;\n                    const { originalBuildingId, originalBuildingType, targetBuildingType } = task.payload;\n                    const originalBuilding = (_buildings_originalBuildingType = buildings[originalBuildingType]) === null || _buildings_originalBuildingType === void 0 ? void 0 : _buildings_originalBuildingType.find((b)=>b.id === originalBuildingId);\n                    const targetBuildingInfo = buildingList.find((b)=>b.id === targetBuildingType);\n                    if (originalBuilding && targetBuildingInfo) {\n                        const newBuilding = {\n                            id: originalBuilding.id,\n                            name: originalBuilding.name,\n                            position: originalBuilding.position,\n                            currentHp: targetBuildingInfo.hp\n                        };\n                        setBuildings((p)=>{\n                            const newBuildings = {\n                                ...p\n                            };\n                            newBuildings[originalBuildingType] = (newBuildings[originalBuildingType] || []).filter((b)=>b.id !== originalBuildingId);\n                            newBuildings[targetBuildingType] = [\n                                ...newBuildings[targetBuildingType] || [],\n                                newBuilding\n                            ];\n                            return newBuildings;\n                        });\n                        addToLog(\"\".concat(originalBuilding.name, \" has been upgraded to a \").concat(targetBuildingInfo.name, \"!\"), targetBuildingInfo.iconId);\n                        setActivityStatus(\"Upgrade to \".concat(targetBuildingInfo.name, \" complete.\"));\n                    }\n                    break;\n                }\n            case \"gather\":\n                break;\n            case \"train_villager\":\n                {\n                    const { count } = task.payload;\n                    const newVillagerNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", count);\n                    const newVillagers = newVillagerNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(name),\n                            name,\n                            currentTask: null\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            villagers: [\n                                ...p.villagers,\n                                ...newVillagers\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" new villager(s) have joined your settlement.\"), \"villager\");\n                    setActivityStatus(\"\".concat(count, \" new villager(s) are ready to work.\"));\n                    break;\n                }\n            case \"train_military\":\n                {\n                    const { unitType, count } = task.payload;\n                    const unitInfo = unitList.find((u)=>u.id === unitType);\n                    const newUnitNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"soldier\", count);\n                    const newUnits = newUnitNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(unitType, \"-\").concat(name),\n                            name,\n                            title: \"\",\n                            unitType: unitType\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            military: [\n                                ...p.military,\n                                ...newUnits\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" \").concat(unitInfo.name, \"(s) have been trained.\"), unitType);\n                    setActivityStatus(\"\".concat(count, \" new \").concat(unitInfo.name, \"(s) are ready for battle.\"));\n                    break;\n                }\n            case \"advance_age\":\n                {\n                    const activeAges = masterAgeList.filter((a)=>a.isActive);\n                    const currentIndex = activeAges.findIndex((age)=>age.name === currentAge);\n                    const ageResult = activeAges[currentIndex + 1] || {\n                        name: \"Age of Legends\",\n                        description: \"Your civilization transcends history and becomes a legend.\"\n                    };\n                    setCurrentAge(ageResult.name);\n                    addToLog(\"You have advanced to the \".concat(ageResult.name, \"!\"), \"age\");\n                    addToLog(ageResult.description, \"age\");\n                    setActivityStatus(\"Welcome to the \".concat(ageResult.name, \"!\"));\n                    break;\n                }\n        }\n    }, [\n        currentAge,\n        addToLog,\n        buildingList,\n        unitList,\n        masterAgeList,\n        buildings\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState !== _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING) {\n            if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n            return;\n        }\n        const gameLoop = ()=>{\n            const now = Date.now();\n            const deltaTime = now - lastTickRef.current;\n            lastTickRef.current = now;\n            let completedTasks = [];\n            let resourceDeltasThisTick = {};\n            // --- Passive Generation and Maintenance ---\n            Object.values(buildings).flat().forEach((instance)=>{\n                const config = masterBuildingList.find((b)=>b.id === Object.keys(buildings).find((key)=>buildings[key].some((bInst)=>bInst.id === instance.id)));\n                if (!config) return;\n                // Passive Generation\n                if (config.generatesResource && config.generatesResource !== \"none\" && config.generationRate) {\n                    const amountPerSecond = config.generationRate / 60;\n                    resourceDeltasThisTick[config.generatesResource] = (resourceDeltasThisTick[config.generatesResource] || 0) + amountPerSecond / 1000 * deltaTime;\n                }\n                // Maintenance Costs\n                if (config.maintenanceCost) {\n                    Object.entries(config.maintenanceCost).forEach((param)=>{\n                        let [res, cost] = param;\n                        const costPerSecond = (cost || 0) / 60;\n                        resourceDeltasThisTick[res] = (resourceDeltasThisTick[res] || 0) - costPerSecond / 1000 * deltaTime;\n                    });\n                }\n            });\n            setActiveBuffs((prev)=>{\n                var _prev_resourceBoost, _prev_resourceBoost1;\n                const newResourceBoosts = (_prev_resourceBoost = prev.resourceBoost) === null || _prev_resourceBoost === void 0 ? void 0 : _prev_resourceBoost.filter((b)=>b.endTime > now);\n                if ((newResourceBoosts === null || newResourceBoosts === void 0 ? void 0 : newResourceBoosts.length) !== ((_prev_resourceBoost1 = prev.resourceBoost) === null || _prev_resourceBoost1 === void 0 ? void 0 : _prev_resourceBoost1.length)) {\n                    addToLog(\"A resource gathering bonus has expired.\", \"system\");\n                }\n                return {\n                    ...prev,\n                    resourceBoost: newResourceBoosts\n                };\n            });\n            const tasksInProgress = activeTasks.map((task)=>{\n                if (now >= task.startTime + task.duration) {\n                    completedTasks.push(task);\n                    return null;\n                }\n                if (task.type === \"gather\") {\n                    var _task_payload_villagerIds, _task_payload, _activeBuffs_resourceBoost_find, _activeBuffs_resourceBoost;\n                    const node = resourceNodes.find((n)=>{\n                        var _task_payload;\n                        return n.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.resourceNodeId);\n                    });\n                    const villagerCount = ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 0;\n                    if (!node || villagerCount === 0) {\n                        completedTasks.push(task);\n                        return null;\n                    }\n                    const baseRatePerSecond = GATHER_INFO[node.type].rate;\n                    let civBonusMultiplier = 1;\n                    if (civilization === null || civilization === void 0 ? void 0 : civilization.bonus.toLowerCase().includes(node.type.toLowerCase())) {\n                        const match = civilization.bonus.match(/(\\d+)%/);\n                        if (match === null || match === void 0 ? void 0 : match[1]) civBonusMultiplier = 1 + parseInt(match[1], 10) / 100;\n                    }\n                    const itemBoostMultiplier = ((_activeBuffs_resourceBoost = activeBuffs.resourceBoost) === null || _activeBuffs_resourceBoost === void 0 ? void 0 : (_activeBuffs_resourceBoost_find = _activeBuffs_resourceBoost.find((b)=>b.resource === node.type)) === null || _activeBuffs_resourceBoost_find === void 0 ? void 0 : _activeBuffs_resourceBoost_find.multiplier) || 1;\n                    const finalRatePerSecond = baseRatePerSecond * civBonusMultiplier * itemBoostMultiplier;\n                    resourceDeltasThisTick[node.type] = (resourceDeltasThisTick[node.type] || 0) + finalRatePerSecond / 1000 * deltaTime * villagerCount;\n                }\n                return task;\n            }).filter(Boolean);\n            if (Object.keys(resourceDeltasThisTick).length > 0) {\n                updateResources(resourceDeltasThisTick);\n                setResourceNodes((prevNodes)=>prevNodes.map((node)=>{\n                        const amountToDecrement = resourceDeltasThisTick[node.type];\n                        if (!amountToDecrement) return node;\n                        const newAmount = node.amount - amountToDecrement;\n                        if (newAmount <= 0) {\n                            const taskId = \"gather-\".concat(node.id);\n                            const task = tasksInProgress.find((t)=>t.id === taskId);\n                            if (task) {\n                                var _task_payload_villagerIds, _task_payload;\n                                addToLog(\"\".concat(((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 0, \" villager(s) depleted a \").concat(node.type, \" source, gaining \").concat(Math.floor(node.amount), \" \").concat(node.type, \".\"), node.type);\n                                setActivityStatus(\"A \".concat(node.type, \" source has been fully depleted.\"));\n                                completedTasks.push(task);\n                            }\n                            return null;\n                        }\n                        return {\n                            ...node,\n                            amount: newAmount\n                        };\n                    }).filter(Boolean));\n            }\n            const finalActiveTasks = tasksInProgress.filter((t)=>!completedTasks.some((ct)=>ct.id === t.id));\n            setActiveTasks(finalActiveTasks);\n            if (completedTasks.length > 0) completedTasks.forEach(handleTaskCompletion);\n            animationFrameRef.current = requestAnimationFrame(gameLoop);\n        };\n        animationFrameRef.current = requestAnimationFrame(gameLoop);\n        return ()=>{\n            if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n        };\n    }, [\n        gameState,\n        activeTasks,\n        resourceNodes,\n        handleTaskCompletion,\n        addToLog,\n        updateResources,\n        units.villagers,\n        civilization,\n        activeBuffs,\n        buildings,\n        masterBuildingList\n    ]);\n    const handleNewEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!civilization || currentEvent) return;\n        const event = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedGameEvent)();\n        setCurrentEvent(event);\n        setActivityStatus(\"A new event requires your attention!\");\n    }, [\n        civilization,\n        currentEvent\n    ]);\n    const scheduleNextEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        eventTimerRef.current = setTimeout(()=>handleNewEvent(), (10 + Math.random() * 15) * 1000);\n    }, [\n        handleNewEvent\n    ]);\n    const generateResourceNodes = (existingPositions)=>{\n        const nodes = [];\n        const types = [\n            \"food\",\n            \"wood\",\n            \"gold\",\n            \"stone\"\n        ];\n        const numNodes = 20 + Math.floor(Math.random() * 10);\n        for(let i = 0; i < numNodes; i++){\n            let pos;\n            do {\n                pos = {\n                    x: Math.floor(Math.random() * MAP_DIMENSIONS.width),\n                    y: Math.floor(Math.random() * MAP_DIMENSIONS.height)\n                };\n            }while (existingPositions.has(\"\".concat(pos.x, \",\").concat(pos.y)));\n            existingPositions.add(\"\".concat(pos.x, \",\").concat(pos.y));\n            const type = types[Math.floor(Math.random() * types.length)];\n            nodes.push({\n                id: \"\".concat(Date.now(), \"-node-\").concat(i),\n                type,\n                position: pos,\n                amount: Math.floor(Math.random() * 2001) + 500\n            });\n        }\n        return nodes;\n    };\n    const handleStartNewGame = async (saveName)=>{\n        var _localAgeProgressionList_;\n        if (allSaves.includes(saveName)) {\n            addNotification('A saga named \"'.concat(saveName, '\" already exists.'));\n            return;\n        }\n        const configs = await fetchSavesAndConfigs();\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n        setCurrentSaveName(saveName);\n        const localAgeProgressionList = configs.allAgeConfigs.filter((a)=>a.isActive);\n        const civ = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedCivilization)();\n        setCivilization(civ);\n        setResources({\n            food: 200,\n            wood: 150,\n            gold: 50,\n            stone: 100\n        });\n        const initialVillagers = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", 3).map((name)=>({\n                id: \"\".concat(Date.now(), \"-\").concat(name),\n                name,\n                currentTask: null\n            }));\n        setUnits({\n            villagers: initialVillagers,\n            military: []\n        });\n        const tcPosition = {\n            x: Math.floor(MAP_DIMENSIONS.width / 2),\n            y: Math.floor(MAP_DIMENSIONS.height / 2)\n        };\n        const tcInfo = configs.allBuildingConfigs.find((b)=>b.id === \"townCenter\");\n        const initialTC = {\n            id: \"\".concat(Date.now(), \"-tc\"),\n            name: (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1)[0],\n            position: tcPosition,\n            currentHp: tcInfo.hp\n        };\n        setBuildings({\n            ...initialBuildingsState,\n            townCenter: [\n                initialTC\n            ]\n        });\n        setResourceNodes(generateResourceNodes(new Set([\n            \"\".concat(tcPosition.x, \",\").concat(tcPosition.y)\n        ])));\n        setCurrentAge(((_localAgeProgressionList_ = localAgeProgressionList[0]) === null || _localAgeProgressionList_ === void 0 ? void 0 : _localAgeProgressionList_.name) || _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES[0].name);\n        setGameLog([]);\n        setCurrentEvent(null);\n        setUnlimitedResources(false);\n        setActiveTasks([]);\n        setInventory([]);\n        setActiveBuffs({\n            resourceBoost: []\n        });\n        addToLog(\"\".concat(civ.name, \" has been founded!\"), \"system\");\n        addToLog(\"Your story begins...\", \"system\");\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        setActivityStatus(\"Your settlement awaits your command.\");\n    };\n    const isVillagerBusy = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        var _units_villagers_find;\n        return !!((_units_villagers_find = units.villagers.find((v)=>v.id === villagerId)) === null || _units_villagers_find === void 0 ? void 0 : _units_villagers_find.currentTask);\n    }, [\n        units.villagers\n    ]);\n    const getVillagerTaskDetails = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        var _buildingList_find, _resourceNodes_find;\n        const villager = units.villagers.find((v)=>v.id === villagerId);\n        if (!(villager === null || villager === void 0 ? void 0 : villager.currentTask)) return \"Idle\";\n        const task = activeTasks.find((t)=>t.id === villager.currentTask);\n        if (!task) return \"Idle (Finalizing Task)\";\n        if (task.type === \"build\") return \"Busy: Constructing \".concat(((_buildingList_find = buildingList.find((b)=>b.id === task.payload.buildingType)) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name) || \"a building\");\n        if (task.type === \"gather\") return \"Busy: Gathering \".concat(((_resourceNodes_find = resourceNodes.find((n)=>n.id === task.payload.resourceNodeId)) === null || _resourceNodes_find === void 0 ? void 0 : _resourceNodes_find.type) || \"resources\");\n        return \"Idle\";\n    }, [\n        activeTasks,\n        resourceNodes,\n        units.villagers,\n        buildingList\n    ]);\n    const handleResumeGame = async (saveName)=>{\n        const configs = await fetchSavesAndConfigs();\n        const savedState = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.loadGameState)(saveName);\n        if (savedState) {\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n            setCurrentSaveName(saveName);\n            setCivilization(savedState.civilization);\n            setResources(savedState.resources);\n            const migratedVillagers = (savedState.units.villagers || []).map((v)=>({\n                    ...v,\n                    currentTask: v.currentTask !== undefined ? v.currentTask : null\n                }));\n            const migratedTasks = (savedState.activeTasks || []).map((t)=>{\n                var _t_payload;\n                return t.type === \"build\" && !((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.villagerIds) ? {\n                    ...t,\n                    payload: {\n                        ...t.payload,\n                        villagerIds: []\n                    }\n                } : t;\n            });\n            migratedTasks.forEach((task)=>{\n                var _task_payload_villagerIds, _task_payload;\n                return (_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.forEach((vid)=>{\n                    const v = migratedVillagers.find((v)=>v.id === vid);\n                    if (v) v.currentTask = task.id;\n                });\n            });\n            setUnits({\n                ...savedState.units,\n                villagers: migratedVillagers\n            });\n            const constructionTasks = migratedTasks.filter((t)=>t.type === \"build\");\n            const occupiedCells = new Set([\n                ...Object.values(savedState.buildings || {}).flat().map((b)=>\"\".concat(b.position.x, \",\").concat(b.position.y)),\n                ...constructionTasks.map((t)=>\"\".concat(t.payload.position.x, \",\").concat(t.payload.position.y))\n            ]);\n            let finalBuildings = {\n                ...initialBuildingsState,\n                ...savedState.buildings || {}\n            };\n            Object.keys(finalBuildings).forEach((bType)=>{\n                const info = configs.allBuildingConfigs.find((b)=>b.id === bType);\n                if (info) finalBuildings[bType] = finalBuildings[bType].map((b)=>({\n                        ...b,\n                        currentHp: b.currentHp === undefined ? info.hp : b.currentHp\n                    }));\n            });\n            if (!finalBuildings.townCenter || finalBuildings.townCenter.length === 0) {\n                let tcPos = {\n                    x: 10,\n                    y: 5\n                };\n                while(occupiedCells.has(\"\".concat(tcPos.x, \",\").concat(tcPos.y))){\n                    tcPos.x++;\n                }\n                const tcInfo = configs.allBuildingConfigs.find((b)=>b.id === \"townCenter\");\n                finalBuildings.townCenter = [\n                    {\n                        id: \"\".concat(Date.now(), \"-tc\"),\n                        name: (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1)[0],\n                        position: tcPos,\n                        currentHp: tcInfo.hp\n                    }\n                ];\n                occupiedCells.add(\"\".concat(tcPos.x, \",\").concat(tcPos.y));\n            }\n            setBuildings(finalBuildings);\n            setResourceNodes((savedState.resourceNodes || []).length === 0 ? generateResourceNodes(occupiedCells) : savedState.resourceNodes || []);\n            setCurrentAge(savedState.currentAge);\n            setGameLog(savedState.gameLog);\n            setActiveTasks(migratedTasks);\n            setInventory(savedState.inventory || []);\n            setActiveBuffs(savedState.activeBuffs || {\n                resourceBoost: []\n            });\n            setCurrentEvent(null);\n            setActivityStatus(\"Welcome back to your saga.\");\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        } else {\n            addNotification('Could not find a saved game named \"'.concat(saveName, '\".'));\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState !== _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING) return;\n        if (!currentEvent) scheduleNextEvent();\n        else if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        return ()=>{\n            if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        };\n    }, [\n        gameState,\n        currentEvent,\n        scheduleNextEvent\n    ]);\n    const handleEventChoice = (choice)=>{\n        if (choice.cost) {\n            const missing = Object.keys(choice.cost).filter((res)=>resources[res] < (choice.cost[res] || 0));\n            if (missing.length > 0) {\n                addNotification(\"You lack the required resources: \".concat(missing.join(\", \"), \".\"));\n                return;\n            }\n            updateResources(Object.entries(choice.cost).reduce((acc, param)=>{\n                let [k, v] = param;\n                return {\n                    ...acc,\n                    [k]: -v\n                };\n            }, {}));\n        }\n        const isSuccess = choice.successChance === undefined || Math.random() < choice.successChance;\n        const effects = isSuccess ? choice.successEffects : choice.failureEffects;\n        if (!effects) {\n            setCurrentEvent(null);\n            scheduleNextEvent();\n            return;\n        }\n        let logMessage = 'Decision: \"'.concat(choice.text, '\". Outcome: ').concat(isSuccess ? \"Success\" : \"Failure\", \". \").concat(effects.log);\n        effects.rewards.forEach((reward)=>{\n            if (reward.type === \"resource\") {\n                const amount = Array.isArray(reward.amount) ? Math.floor(Math.random() * (reward.amount[1] - reward.amount[0] + 1)) + reward.amount[0] : reward.amount;\n                if (amount !== 0) {\n                    updateResources({\n                        [reward.resource]: amount\n                    });\n                    logMessage += \" You \".concat(amount > 0 ? \"gained\" : \"lost\", \" \").concat(Math.abs(amount), \" \").concat(reward.resource, \".\");\n                }\n            } else if (reward.type === \"item\") {\n                const itemInfo = _data_itemContent__WEBPACK_IMPORTED_MODULE_6__.GAME_ITEMS[reward.itemId];\n                if (itemInfo) {\n                    const newItems = Array.from({\n                        length: reward.amount\n                    }, (_, i)=>({\n                            ...itemInfo,\n                            id: \"\".concat(reward.itemId, \"-\").concat(Date.now(), \"-\").concat(i)\n                        }));\n                    setInventory((prev)=>[\n                            ...prev,\n                            ...newItems\n                        ]);\n                    logMessage += \" You received \".concat(reward.amount, \"x \").concat(itemInfo.name, \"!\");\n                }\n            } else if (reward.type === \"unit\" && reward.unitType === \"villager\") {\n                const newVillagers = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", reward.amount).map((name)=>({\n                        id: \"\".concat(Date.now(), \"-\").concat(name),\n                        name,\n                        currentTask: null\n                    }));\n                setUnits((p)=>({\n                        ...p,\n                        villagers: [\n                            ...p.villagers,\n                            ...newVillagers\n                        ]\n                    }));\n                logMessage += \" You gained \".concat(reward.amount, \" villager(s).\");\n            } else if (reward.type === \"building\") {\n                const buildingInfo = buildingList.find((b)=>b.id === reward.buildingId);\n                if (buildingInfo) {\n                    const occupiedCells = new Set();\n                    Object.values(buildings).flat().forEach((b)=>occupiedCells.add(\"\".concat(b.position.x, \",\").concat(b.position.y)));\n                    activeTasks.filter((t)=>t.type === \"build\").forEach((t)=>{\n                        var _t_payload;\n                        return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.position) && occupiedCells.add(\"\".concat(t.payload.position.x, \",\").concat(t.payload.position.y));\n                    });\n                    resourceNodes.forEach((n)=>occupiedCells.add(\"\".concat(n.position.x, \",\").concat(n.position.y)));\n                    let placed = false;\n                    for(let i = 0; i < MAP_DIMENSIONS.width * MAP_DIMENSIONS.height; i++){\n                        const x = Math.floor(Math.random() * MAP_DIMENSIONS.width);\n                        const y = Math.floor(Math.random() * MAP_DIMENSIONS.height);\n                        if (!occupiedCells.has(\"\".concat(x, \",\").concat(y))) {\n                            const [name] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                            const newBuilding = {\n                                id: \"reward-\".concat(Date.now()),\n                                name,\n                                position: {\n                                    x,\n                                    y\n                                },\n                                currentHp: buildingInfo.hp\n                            };\n                            setBuildings((p)=>({\n                                    ...p,\n                                    [reward.buildingId]: [\n                                        ...p[reward.buildingId] || [],\n                                        newBuilding\n                                    ]\n                                }));\n                            logMessage += \" You were gifted a new \".concat(buildingInfo.name, \"!\");\n                            placed = true;\n                            break;\n                        }\n                    }\n                    if (!placed) logMessage += \" You were to be gifted a \".concat(buildingInfo.name, \", but there was no room to build it!\");\n                }\n            }\n        });\n        addToLog(logMessage, \"event\");\n        setActivityStatus(effects.log);\n        setCurrentEvent(null);\n        scheduleNextEvent();\n    };\n    const handleInitiateBuild = (villagerId, rect)=>{\n        if (isVillagerBusy(villagerId)) {\n            addNotification(\"This villager is already busy.\");\n            return;\n        }\n        setBuildPanelState({\n            isOpen: true,\n            villagerId,\n            anchorRect: rect\n        });\n        setUnitManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleStartPlacement = (buildingId)=>{\n        var _buildings_buildingInfo_id;\n        const villagerId = buildPanelState.villagerId;\n        if (!villagerId) return;\n        const buildingInfo = buildingList.find((b)=>b.id === buildingId);\n        if (!buildingInfo) return;\n        const existingCount = ((_buildings_buildingInfo_id = buildings[buildingInfo.id]) === null || _buildings_buildingInfo_id === void 0 ? void 0 : _buildings_buildingInfo_id.length) || 0;\n        const constructingCount = activeTasks.filter((t)=>{\n            var _t_payload;\n            return t.type === \"build\" && ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.buildingType) === buildingInfo.id;\n        }).length;\n        const totalCount = existingCount + constructingCount;\n        const limit = buildingInfo.buildLimit || 0;\n        if (limit > 0 && totalCount >= limit) {\n            addNotification(\"You have reached the build limit for \".concat(buildingInfo.name, \" (\").concat(limit, \").\"));\n            return;\n        }\n        const missing = unlimitedResources ? [] : Object.keys(buildingInfo.cost).filter((res)=>resources[res] < (buildingInfo.cost[res] || 0));\n        if (missing.length > 0) {\n            addNotification(\"Need more \".concat(missing.join(\", \"), \".\"));\n            return;\n        }\n        setPlayerAction({\n            mode: \"build\",\n            buildingType: buildingId,\n            villagerId\n        });\n        setBuildPanelState({\n            isOpen: false,\n            villagerId: null,\n            anchorRect: null\n        });\n        setActivityStatus(\"Select a location to build a \".concat(buildingInfo.name, \". Right-click to cancel.\"));\n    };\n    const handleConfirmPlacement = (position)=>{\n        if ((playerAction === null || playerAction === void 0 ? void 0 : playerAction.mode) !== \"build\") return;\n        const { buildingType, villagerId } = playerAction;\n        const buildingInfo = buildingList.find((b)=>b.id === buildingType);\n        const builder = units.villagers.find((v)=>v.id === villagerId);\n        if (!buildingInfo || !builder) return;\n        if (!unlimitedResources) updateResources(Object.entries(buildingInfo.cost).reduce((acc, param)=>{\n            let [k, v] = param;\n            return {\n                ...acc,\n                [k]: -v\n            };\n        }, {}));\n        let buildTime = buildingInfo.buildTime * 1000;\n        if (activeBuffs.buildTimeReduction) {\n            buildTime *= 1 - activeBuffs.buildTimeReduction.percentage;\n            addToLog(\"A Builder's Charm reduced construction time by \".concat(activeBuffs.buildTimeReduction.percentage * 100, \"%!\"), \"item\");\n            setActiveBuffs((prev)=>({\n                    ...prev,\n                    buildTimeReduction: prev.buildTimeReduction.uses - 1 > 0 ? {\n                        ...prev.buildTimeReduction,\n                        uses: prev.buildTimeReduction.uses - 1\n                    } : undefined\n                }));\n        }\n        const taskId = \"\".concat(Date.now(), \"-build-\").concat(buildingType);\n        const taskPayload = {\n            buildingType,\n            villagerIds: [\n                villagerId\n            ],\n            position\n        };\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: taskId,\n                type: \"build\",\n                startTime: 0,\n                duration: 0,\n                payload: {\n                    ...taskPayload,\n                    position\n                }\n            });\n        } else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: taskId,\n                        type: \"build\",\n                        startTime: Date.now(),\n                        duration: buildTime,\n                        payload: taskPayload\n                    }\n                ]);\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>v.id === villagerId ? {\n                            ...v,\n                            currentTask: taskId\n                        } : v)\n                }));\n            setActivityStatus(\"\".concat(builder.name, \" has started constructing a \").concat(buildingInfo.name, \".\"));\n            addToLog(\"\".concat(builder.name, \" began construction of a new \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n        }\n        setPlayerAction(null);\n    };\n    const handleCancelPlayerAction = ()=>{\n        setPlayerAction(null);\n        setActivityStatus(\"Command cancelled.\");\n    };\n    const handleDemolishBuilding = (type, id)=>{\n        if (type === \"townCenter\") {\n            addNotification(\"The Town Center is the heart of your civilization and cannot be demolished.\");\n            return;\n        }\n        if (activeTasks.some((task)=>{\n            var _task_payload, _task_payload1;\n            return ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingId) === id || task.type === \"upgrade_building\" && ((_task_payload1 = task.payload) === null || _task_payload1 === void 0 ? void 0 : _task_payload1.originalBuildingId) === id;\n        })) {\n            addNotification(\"Cannot demolish a building with an active task (e.g., training or upgrading).\");\n            return;\n        }\n        const buildingInfo = buildingList.find((b)=>b.id === type);\n        const buildingInstance = buildings[type].find((b)=>b.id === id);\n        if (!buildingInfo || !buildingInstance) return;\n        const capacityWithoutThisBuilding = population.capacity - (buildingInfo.populationCapacity || 0);\n        if ((buildingInfo.populationCapacity || 0) > 0 && population.current > capacityWithoutThisBuilding) {\n            addNotification(\"Cannot demolish this building, your people would be homeless.\");\n            return;\n        }\n        const refund = Object.entries(buildingInfo.cost).reduce((acc, param)=>{\n            let [res, cost] = param;\n            const amount = Math.floor((cost || 0) * 0.5);\n            if (amount > 0) acc[res] = amount;\n            return acc;\n        }, {});\n        if (Object.keys(refund).length > 0) {\n            updateResources(refund);\n            addNotification(\"Salvaged \".concat(Object.entries(refund).map((param)=>{\n                let [r, a] = param;\n                return \"\".concat(a, \" \").concat(r);\n            }).join(\", \"), \".\"));\n        }\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((b)=>b.id !== id)\n            }));\n        addToLog(\"\".concat(buildingInstance.name, \" (\").concat(buildingInfo.name, \") was demolished.\"), buildingInfo.iconId);\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleUpdateBuilding = (type, id, name)=>{\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].map((b)=>b.id === id ? {\n                        ...b,\n                        name\n                    } : b)\n            }));\n        addNotification(\"Building renamed.\");\n    };\n    const handleUpgradeBuilding = (building, upgradePath)=>{\n        if (!unlimitedResources) {\n            const missing = Object.keys(upgradePath.cost).filter((res)=>resources[res] < (upgradePath.cost[res] || 0));\n            if (missing.length > 0) {\n                addNotification(\"Need more \".concat(missing.join(\", \"), \".\"));\n                return;\n            }\n            updateResources(Object.entries(upgradePath.cost).reduce((acc, param)=>{\n                let [k, v] = param;\n                return {\n                    ...acc,\n                    [k]: -(v || 0)\n                };\n            }, {}));\n        }\n        const originalBuildingType = Object.keys(buildings).find((type)=>buildings[type].some((b)=>b.id === building.id));\n        const taskPayload = {\n            originalBuildingId: building.id,\n            originalBuildingType,\n            targetBuildingType: upgradePath.id\n        };\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"instant\",\n                type: \"upgrade_building\",\n                startTime: 0,\n                duration: 0,\n                payload: taskPayload\n            });\n        } else {\n            var _buildingList_find;\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-upgrade-\").concat(building.id),\n                        type: \"upgrade_building\",\n                        startTime: Date.now(),\n                        duration: upgradePath.time * 1000,\n                        payload: taskPayload\n                    }\n                ]);\n            addToLog(\"Upgrading \".concat(building.name, \" to a \").concat((_buildingList_find = buildingList.find((b)=>b.id === upgradePath.id)) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name, \".\"), \"system\");\n            setActivityStatus(\"Upgrading \".concat(building.name, \"...\"));\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleTrainVillagers = (count)=>{\n        var _buildings_townCenter;\n        if (activeTasks.some((t)=>t.type === \"train_villager\") || count <= 0) return;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more villagers.\"));\n            return;\n        }\n        if (!((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter[0])) {\n            addNotification(\"No Town Center to train villagers.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            const totalCost = 50 * count;\n            if (resources.food < totalCost) {\n                addNotification(\"Need \".concat(totalCost - resources.food, \" more Food.\"));\n                return;\n            }\n            updateResources({\n                food: -totalCost\n            });\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"train_villager\",\n            startTime: 0,\n            duration: 0,\n            payload: {\n                count\n            }\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-train-villager\"),\n                        type: \"train_villager\",\n                        startTime: Date.now(),\n                        duration: 10000 * count,\n                        payload: {\n                            count,\n                            buildingId: buildings.townCenter[0].id\n                        }\n                    }\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" villager(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new villager(s).\"), \"villager\");\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleTrainUnits = (unitType, count)=>{\n        var _buildings_unitInfo_requiredBuilding;\n        const unitInfo = unitList.find((u)=>u.id === unitType);\n        if (!unitInfo || activeTasks.some((t)=>{\n            var _t_payload;\n            return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.unitType) === unitType;\n        }) || count <= 0) return;\n        const totalPopulationCost = (unitInfo.populationCost || 1) * count;\n        if (population.current + totalPopulationCost > population.capacity) {\n            addNotification(\"Need space for \".concat(totalPopulationCost, \" more population.\"));\n            return;\n        }\n        const trainingBuilding = (_buildings_unitInfo_requiredBuilding = buildings[unitInfo.requiredBuilding]) === null || _buildings_unitInfo_requiredBuilding === void 0 ? void 0 : _buildings_unitInfo_requiredBuilding[0];\n        if (!trainingBuilding) {\n            var _buildingList_find;\n            addNotification(\"No \".concat((_buildingList_find = buildingList.find((b)=>b.id === unitInfo.requiredBuilding)) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name, \" to train units.\"));\n            return;\n        }\n        if (!unlimitedResources) {\n            const missing = Object.keys(unitInfo.cost).filter((res)=>resources[res] < (unitInfo.cost[res] || 0) * count);\n            if (missing.length > 0) {\n                addNotification(\"Need more \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources(Object.entries(unitInfo.cost).reduce((acc, param)=>{\n                let [k, v] = param;\n                return {\n                    ...acc,\n                    [k]: -(v || 0) * count\n                };\n            }, {}));\n        }\n        let trainTime = unitInfo.trainTime * 1000 * count;\n        if (activeBuffs.permanentTrainTimeReduction) trainTime *= 1 - activeBuffs.permanentTrainTimeReduction;\n        if (activeBuffs.trainTimeReduction) {\n            const applicable = Math.min(count, activeBuffs.trainTimeReduction.uses);\n            trainTime = unitInfo.trainTime * 1000 * applicable * (1 - activeBuffs.trainTimeReduction.percentage) + unitInfo.trainTime * 1000 * (count - applicable);\n            if (activeBuffs.trainTimeReduction.uses - applicable > 0) setActiveBuffs((prev)=>({\n                    ...prev,\n                    trainTimeReduction: {\n                        ...prev.trainTimeReduction,\n                        uses: prev.trainTimeReduction.uses - applicable\n                    }\n                }));\n            else {\n                setActiveBuffs((prev)=>({\n                        ...prev,\n                        trainTimeReduction: undefined\n                    }));\n                addToLog(\"The Drillmaster's Whistle buff has been fully used.\", \"item\");\n            }\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"train_military\",\n            startTime: 0,\n            duration: 0,\n            payload: {\n                unitType,\n                count\n            }\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-train-\").concat(unitType),\n                        type: \"train_military\",\n                        startTime: Date.now(),\n                        duration: trainTime,\n                        payload: {\n                            unitType,\n                            count,\n                            buildingId: trainingBuilding.id\n                        }\n                    }\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" \").concat(unitInfo.name, \"(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new \").concat(unitInfo.name, \"(s).\"), unitType);\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleDismissSpecificUnit = (type, id)=>{\n        if (type === \"villagers\" && isVillagerBusy(id)) {\n            addNotification(\"Cannot dismiss a busy villager.\");\n            return;\n        }\n        const unit = units[type].find((u)=>u.id === id);\n        if (!unit) return;\n        if (type === \"villagers\" && units.villagers.length <= 1) {\n            addNotification(\"Cannot dismiss your last villager.\");\n            return;\n        }\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((u)=>u.id !== id)\n            }));\n        const unitTypeName = type === \"villagers\" ? \"villager\" : unit.unitType;\n        addToLog(\"\".concat(unit.name, \" the \").concat(unitTypeName, \" has been dismissed.\"), type === \"villagers\" ? \"villager\" : unit.unitType);\n        addNotification(\"\".concat(unit.name, \" was dismissed.\"));\n    };\n    const handleUpdateUnit = (type, id, name, title)=>{\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].map((u)=>u.id === id ? type === \"military\" && title !== undefined ? {\n                        ...u,\n                        name,\n                        title\n                    } : {\n                        ...u,\n                        name\n                    } : u)\n            }));\n        addNotification(\"Unit updated.\");\n    };\n    const handleAssignVillagersToConstruction = (constructionId, count)=>{\n        var _task_payload_villagerIds, _task_payload, _task_payload_villagerIds1, _task_payload1;\n        const idleVillagers = units.villagers.filter((v)=>!v.currentTask);\n        if (count <= 0 || idleVillagers.length === 0) {\n            addNotification(\"No idle villagers available.\");\n            return;\n        }\n        const task = activeTasks.find((t)=>t.id === constructionId);\n        if (!task || task.type !== \"build\") return;\n        const buildingInfo = buildingList.find((b)=>{\n            var _task_payload;\n            return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n        });\n        if (!buildingInfo) return;\n        const cappedCount = Math.min(count, idleVillagers.length);\n        const villagersToAssign = idleVillagers.slice(0, cappedCount).map((v)=>v.id);\n        const workDone = (Date.now() - task.startTime) * (((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 1);\n        const workRemaining = Math.max(0, buildingInfo.buildTime * 1000 - workDone);\n        const newWorkerCount = (((_task_payload1 = task.payload) === null || _task_payload1 === void 0 ? void 0 : (_task_payload_villagerIds1 = _task_payload1.villagerIds) === null || _task_payload_villagerIds1 === void 0 ? void 0 : _task_payload_villagerIds1.length) || 0) + cappedCount;\n        const newRemainingDuration = workRemaining / newWorkerCount;\n        setUnits((prev)=>({\n                ...prev,\n                villagers: prev.villagers.map((v)=>villagersToAssign.includes(v.id) ? {\n                        ...v,\n                        currentTask: constructionId\n                    } : v)\n            }));\n        setActiveTasks((prev)=>prev.map((t)=>t.id === constructionId ? {\n                    ...t,\n                    startTime: Date.now(),\n                    duration: newRemainingDuration,\n                    payload: {\n                        ...t.payload,\n                        villagerIds: [\n                            ...t.payload.villagerIds,\n                            ...villagersToAssign\n                        ]\n                    }\n                } : t));\n        addToLog(\"\".concat(cappedCount, \" villager(s) are now assisting with the \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n        setActivityStatus(\"Construction of the \".concat(buildingInfo.name, \" is now faster.\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAssignVillagers = (targetId, count)=>{\n        if (assignmentPanelState.targetType === \"construction\") return handleAssignVillagersToConstruction(targetId, count);\n        const idleVillagers = units.villagers.filter((v)=>!v.currentTask);\n        if (count <= 0 || idleVillagers.length === 0) {\n            addNotification(\"No idle villagers available.\");\n            return;\n        }\n        const targetNode = resourceNodes.find((n)=>n.id === targetId);\n        if (!targetNode) return;\n        const cappedCount = Math.min(count, idleVillagers.length);\n        const villagersToAssign = idleVillagers.slice(0, cappedCount).map((v)=>v.id);\n        const taskId = \"gather-\".concat(targetId);\n        const existingTask = activeTasks.find((t)=>t.id === taskId);\n        if (unlimitedResources) {\n            updateResources({\n                [targetNode.type]: targetNode.amount\n            });\n            addToLog(\"\".concat(cappedCount, \" villager(s) instantly gathered \").concat(Math.floor(targetNode.amount), \" \").concat(targetNode.type, \".\"), targetNode.type);\n            setResourceNodes((prev)=>prev.filter((n)=>n.id !== targetId));\n        } else {\n            if (existingTask) setActiveTasks((prev)=>prev.map((t)=>t.id === taskId ? {\n                        ...t,\n                        payload: {\n                            ...t.payload,\n                            villagerIds: [\n                                ...new Set([\n                                    ...t.payload.villagerIds,\n                                    ...villagersToAssign\n                                ])\n                            ]\n                        }\n                    } : t));\n            else setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: taskId,\n                        type: \"gather\",\n                        startTime: Date.now(),\n                        duration: 999999999,\n                        payload: {\n                            resourceNodeId: targetId,\n                            villagerIds: villagersToAssign\n                        }\n                    }\n                ]);\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>villagersToAssign.includes(v.id) ? {\n                            ...v,\n                            currentTask: taskId\n                        } : v)\n                }));\n        }\n        addToLog(\"\".concat(cappedCount, \" villager(s) assigned to gather \").concat(targetNode.type, \".\"), targetNode.type);\n        setActivityStatus(\"\".concat(cappedCount, \" villager(s) are now gathering \").concat(targetNode.type, \".\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleRecallVillagers = (targetId, count, type)=>{\n        var _task_payload_villagerIds, _task_payload;\n        const task = activeTasks.find((t)=>t.id === targetId);\n        var _task_payload_villagerIds_length;\n        if (!task || ((_task_payload_villagerIds_length = (_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) !== null && _task_payload_villagerIds_length !== void 0 ? _task_payload_villagerIds_length : 0) < count) return;\n        const villagersToRecall = task.payload.villagerIds.slice(task.payload.villagerIds.length - count);\n        if (type === \"construction\" && villagersToRecall.length === task.payload.villagerIds.length) {\n            addNotification(\"Cannot recall the last builder from a project.\");\n            return;\n        }\n        setUnits((prev)=>({\n                ...prev,\n                villagers: prev.villagers.map((v)=>villagersToRecall.includes(v.id) ? {\n                        ...v,\n                        currentTask: null\n                    } : v)\n            }));\n        const remainingVillagers = task.payload.villagerIds.filter((id)=>!villagersToRecall.includes(id));\n        if (remainingVillagers.length === 0) {\n            setActiveTasks((prev)=>prev.filter((t)=>t.id !== targetId));\n            const node = resourceNodes.find((n)=>n.id === targetId);\n            if (node) addToLog(\"All villagers recalled from gathering \".concat(node.type, \".\"), \"villager\");\n        } else {\n            const buildingInfo = buildingList.find((b)=>{\n                var _task_payload;\n                return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n            });\n            const workDone = (Date.now() - task.startTime) * task.payload.villagerIds.length;\n            const newRemainingDuration = (buildingInfo.buildTime * 1000 - workDone) / remainingVillagers.length;\n            setActiveTasks((prev)=>prev.map((t)=>t.id === targetId ? {\n                        ...t,\n                        startTime: Date.now(),\n                        duration: newRemainingDuration,\n                        payload: {\n                            ...t.payload,\n                            villagerIds: remainingVillagers\n                        }\n                    } : t));\n            if (type === \"construction\") addToLog(\"\".concat(count, \" builder(s) recalled. Construction will now be slower.\"), \"villager\");\n        }\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAdvanceAge = async ()=>{\n        if (activeTasks.some((t)=>t.type === \"advance_age\")) {\n            addNotification(\"Advancement already in progress.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            const missing = [];\n            if (resources.food < 500) missing.push(\"\".concat(500 - resources.food, \" Food\"));\n            if (resources.gold < 200) missing.push(\"\".concat(200 - resources.gold, \" Gold\"));\n            if (missing.length > 0) {\n                addNotification(\"To advance, you need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources({\n                food: -500,\n                gold: -200\n            });\n        }\n        const activeAges = masterAgeList.filter((a)=>a.isActive);\n        const currentIndex = activeAges.findIndex((age)=>age.name === currentAge);\n        if (currentIndex === -1 || currentIndex + 1 >= activeAges.length) {\n            addNotification(\"You have reached the final available age.\");\n            return;\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"advance_age\",\n            startTime: 0,\n            duration: 0,\n            payload: {}\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-advance_age\"),\n                        type: \"advance_age\",\n                        startTime: Date.now(),\n                        duration: 60000\n                    }\n                ]);\n            setActivityStatus(\"Your people begin the long journey to a new age.\");\n            setBuildingManagementPanel({\n                isOpen: false,\n                type: null,\n                instanceId: null,\n                anchorRect: null\n            });\n        }\n    };\n    const handleExitGame = async ()=>{\n        setCurrentSaveName(null);\n        await fetchSavesAndConfigs();\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n    };\n    const handleDeleteGame = async (saveName)=>{\n        await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.deleteGameState)(saveName);\n        await fetchSavesAndConfigs();\n        addNotification('Deleted saga: \"'.concat(saveName, '\"'));\n    };\n    const handleToggleUnlimitedResources = ()=>{\n        const newMode = !unlimitedResources;\n        setUnlimitedResources(newMode);\n        if (newMode) {\n            setResources({\n                food: 99999,\n                wood: 99999,\n                gold: 99999,\n                stone: 99999\n            });\n            addNotification(\"Test Mode: ON - All active tasks completed.\");\n            const depletedNodeIds = new Set();\n            activeTasks.forEach((task)=>{\n                var _task_payload;\n                if (task.type === \"gather\" && ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.resourceNodeId)) {\n                    depletedNodeIds.add(task.payload.resourceNodeId);\n                    const node = resourceNodes.find((n)=>n.id === task.payload.resourceNodeId);\n                    if (node) addToLog(\"Instantly gathered all \".concat(node.type, \" from a depleted source.\"), node.type);\n                }\n                handleTaskCompletion(task);\n            });\n            setActiveTasks([]);\n            if (depletedNodeIds.size > 0) setResourceNodes((prev)=>prev.filter((n)=>!depletedNodeIds.has(n.id)));\n        } else addNotification(\"Test Mode: OFF\");\n    };\n    const handleUseItem = (itemId)=>{\n        const item = inventory.find((i)=>i.id === itemId);\n        if (!item) return;\n        const baseItemId = item.id.split(\"-\")[0];\n        const constructionTasks = activeTasks.filter((t)=>t.type === \"build\");\n        switch(baseItemId){\n            case \"scroll_of_haste\":\n            case \"blueprint_of_the_master\":\n                if (constructionTasks.length > 0) {\n                    var _buildingList_find;\n                    const task = constructionTasks.sort((a, b)=>b.startTime + b.duration - (a.startTime + a.duration))[0];\n                    setActiveTasks((p)=>p.map((t)=>t.id === task.id ? {\n                                ...t,\n                                duration: Math.max(0, t.duration - (baseItemId === \"scroll_of_haste\" ? 15000 : 60000))\n                            } : t));\n                    addToLog(\"Used \".concat(item.name, \" on the \").concat((_buildingList_find = buildingList.find((b)=>{\n                        var _task_payload;\n                        return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n                    })) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name, \".\"), \"item\");\n                }\n                break;\n            case \"hearty_meal\":\n                updateResources({\n                    food: 75\n                });\n                addToLog(\"Used \".concat(item.name, \" to gain 75 food.\"), \"item\");\n                break;\n            case \"builders_charm\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        buildTimeReduction: {\n                            percentage: 0.1,\n                            uses: 1\n                        }\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Next building is 10% faster.\"), \"item\");\n                break;\n            case \"drillmasters_whistle\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        trainTimeReduction: {\n                            percentage: 0.25,\n                            uses: 5\n                        }\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Next 5 units train 25% faster.\"), \"item\");\n                break;\n            case \"golden_harvest\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        resourceBoost: [\n                            ...p.resourceBoost || [],\n                            {\n                                resource: \"food\",\n                                multiplier: 1.5,\n                                endTime: Date.now() + 60000\n                            }\n                        ]\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Food gathering boosted by 50% for 60s.\"), \"item\");\n                break;\n            case \"shard_of_the_ancients\":\n                if (constructionTasks.length > 0) {\n                    var _buildingList_find1;\n                    const task = constructionTasks.sort((a, b)=>b.startTime + b.duration - (a.startTime + a.duration))[0];\n                    setActiveTasks((p)=>p.filter((t)=>t.id !== task.id));\n                    handleTaskCompletion(task);\n                    addToLog(\"Used \".concat(item.name, \" to instantly complete the \").concat((_buildingList_find1 = buildingList.find((b)=>{\n                        var _task_payload;\n                        return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n                    })) === null || _buildingList_find1 === void 0 ? void 0 : _buildingList_find1.name, \".\"), \"item\");\n                }\n                break;\n            case \"heart_of_the_mountain\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        resourceBoost: [\n                            ...p.resourceBoost || [],\n                            {\n                                resource: \"gold\",\n                                multiplier: 2,\n                                endTime: Date.now() + 120000\n                            },\n                            {\n                                resource: \"stone\",\n                                multiplier: 2,\n                                endTime: Date.now() + 120000\n                            }\n                        ]\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Gold and Stone gathering doubled for 2 minutes.\"), \"item\");\n                break;\n            case \"banner_of_command\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        permanentTrainTimeReduction: (p.permanentTrainTimeReduction || 0) + 0.05\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Military units train 5% faster, permanently.\"), \"item\");\n                break;\n            case \"whisper_of_the_creator\":\n                const tasks = [\n                    ...activeTasks\n                ];\n                setActiveTasks([]);\n                tasks.forEach(handleTaskCompletion);\n                addToLog(\"A divine whisper echoes, and all work is instantly finished.\", \"item\");\n                break;\n        }\n        setInventory((prev)=>prev.filter((i)=>i.id !== itemId));\n        setInventoryPanelState({\n            isOpen: false,\n            anchorRect: null\n        });\n    };\n    const buildingCounts = buildingList.reduce((acc, b)=>{\n        var _buildings_b_id;\n        acc[b.id] = ((_buildings_b_id = buildings[b.id]) === null || _buildings_b_id === void 0 ? void 0 : _buildings_b_id.length) || 0;\n        return acc;\n    }, {});\n    const idleVillagerCount = units.villagers.filter((v)=>!v.currentTask).length;\n    const assignmentTarget = assignmentPanelState.targetType === \"resource\" ? resourceNodes.find((n)=>n.id === assignmentPanelState.targetId) : activeTasks.find((t)=>t.type === \"build\" && t.id === assignmentPanelState.targetId);\n    const currentAgeIndex = ageProgressionList.findIndex((a)=>a.name === currentAge);\n    const availableBuildings = buildingList.filter((b)=>{\n        const unlockAgeIndex = ageProgressionList.findIndex((a)=>a.name === b.unlockedInAge);\n        return b.isActive && !b.isUpgradeOnly && unlockAgeIndex !== -1 && unlockAgeIndex <= currentAgeIndex;\n    });\n    const activeUnits = unitList.filter((u)=>u.isActive);\n    const closeAllPanels = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setUnitManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                anchorRect: null\n            } : p);\n        setBuildingManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                instanceId: null,\n                anchorRect: null\n            } : p);\n        setBuildPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                villagerId: null,\n                anchorRect: null\n            } : p);\n        setAssignmentPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                targetId: null,\n                targetType: null,\n                anchorRect: null\n            } : p);\n        setCivPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setAllBuildingsPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setInventoryPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n    }, []);\n    const handleOpenBuildingPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((type, instanceId, rect)=>{\n        closeAllPanels();\n        setBuildingManagementPanel({\n            isOpen: true,\n            type,\n            instanceId,\n            anchorRect: rect\n        });\n    }, [\n        closeAllPanels\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleClickOutside = (event)=>{\n            const target = event.target;\n            if (!target.closest(\".sci-fi-panel-popup, [data-radix-popper-content-wrapper]\")) closeAllPanels();\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return ()=>document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [\n        closeAllPanels\n    ]);\n    const renderContent = ()=>{\n        if (isAppLoading) {\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 944,\n                columnNumber: 20\n            }, undefined);\n        }\n        switch(gameState){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves,\n                    onDeleteGame: handleDeleteGame\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 948,\n                    columnNumber: 42\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 949,\n                    columnNumber: 45\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING:\n                if (!civilization) return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 951,\n                    columnNumber: 43\n                }, undefined);\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_GameUI__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                            civilization: civilization,\n                            resources: resources,\n                            units: units,\n                            buildings: buildings,\n                            population: population,\n                            currentAge: currentAge,\n                            gameLog: gameLog,\n                            resourceDeltas: resourceDeltas,\n                            activityStatus: activityStatus,\n                            unitList: activeUnits,\n                            buildingList: buildingList,\n                            onOpenUnitPanel: (type, rect)=>{\n                                closeAllPanels();\n                                setUnitManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            onOpenAllBuildingsPanel: (rect)=>{\n                                closeAllPanels();\n                                setAllBuildingsPanel({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            playerAction: playerAction,\n                            onConfirmPlacement: handleConfirmPlacement,\n                            onCancelPlayerAction: handleCancelPlayerAction,\n                            onBuildingClick: (building, rect)=>{\n                                closeAllPanels();\n                                const type = Object.keys(buildings).find((key)=>{\n                                    var _buildings_key;\n                                    return (_buildings_key = buildings[key]) === null || _buildings_key === void 0 ? void 0 : _buildings_key.some((b)=>b.id === building.id);\n                                });\n                                if (type) setBuildingManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    instanceId: building.id,\n                                    anchorRect: rect\n                                });\n                            },\n                            mapDimensions: MAP_DIMENSIONS,\n                            activeTasks: activeTasks,\n                            onExitGame: handleExitGame,\n                            onOpenCivPanel: (rect)=>{\n                                closeAllPanels();\n                                setCivPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            resourceNodes: resourceNodes,\n                            onOpenAssignmentPanel: (nodeId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: nodeId,\n                                    targetType: \"resource\",\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenConstructionPanel: (constructionId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: constructionId,\n                                    targetType: \"construction\",\n                                    anchorRect: rect\n                                });\n                            },\n                            gatherInfo: GATHER_INFO,\n                            currentEvent: currentEvent,\n                            onEventChoice: handleEventChoice,\n                            inventory: inventory,\n                            onOpenInventoryPanel: (rect)=>{\n                                closeAllPanels();\n                                setInventoryPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            }\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 954,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildPanel__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                            isOpen: buildPanelState.isOpen,\n                            onClose: ()=>setBuildPanelState({\n                                    isOpen: false,\n                                    villagerId: null,\n                                    anchorRect: null\n                                }),\n                            onStartPlacement: handleStartPlacement,\n                            resources: resources,\n                            buildingCounts: buildingCounts,\n                            buildingList: availableBuildings,\n                            anchorRect: buildPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 969,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                            isOpen: unitManagementPanel.isOpen,\n                            onClose: ()=>setUnitManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            type: unitManagementPanel.type,\n                            units: units,\n                            onUpdateUnit: handleUpdateUnit,\n                            onDismissUnit: handleDismissSpecificUnit,\n                            onInitiateBuild: (villagerId, rect)=>{\n                                closeAllPanels();\n                                handleInitiateBuild(villagerId, rect);\n                            },\n                            getVillagerTaskDetails: getVillagerTaskDetails,\n                            anchorRect: unitManagementPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 970,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                            isOpen: buildingManagementPanel.isOpen,\n                            onClose: ()=>setBuildingManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            panelState: buildingManagementPanel,\n                            buildings: buildings,\n                            buildingList: buildingList,\n                            onUpdateBuilding: handleUpdateBuilding,\n                            onDemolishBuilding: handleDemolishBuilding,\n                            onTrainUnits: handleTrainUnits,\n                            onTrainVillagers: handleTrainVillagers,\n                            onUpgradeBuilding: handleUpgradeBuilding,\n                            resources: resources,\n                            population: population,\n                            unitList: activeUnits,\n                            onAdvanceAge: handleAdvanceAge,\n                            activeTasks: activeTasks,\n                            anchorRect: buildingManagementPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 971,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n                            isOpen: assignmentPanelState.isOpen,\n                            onClose: ()=>setAssignmentPanelState({\n                                    isOpen: false,\n                                    targetId: null,\n                                    targetType: null,\n                                    anchorRect: null\n                                }),\n                            assignmentTarget: assignmentTarget || null,\n                            idleVillagerCount: idleVillagerCount,\n                            onAssignVillagers: handleAssignVillagers,\n                            onRecallVillagers: handleRecallVillagers,\n                            gatherInfo: GATHER_INFO,\n                            buildingList: buildingList,\n                            units: units,\n                            anchorRect: assignmentPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 972,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                            isOpen: civPanelState.isOpen,\n                            onClose: ()=>setCivPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            civilization: civilization,\n                            anchorRect: civPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 973,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                            isOpen: allBuildingsPanel.isOpen,\n                            onClose: ()=>setAllBuildingsPanel({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            buildingList: buildingList,\n                            buildingCounts: buildingCounts,\n                            activeTasks: activeTasks,\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            anchorRect: allBuildingsPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 974,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_InventoryPanel__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n                            isOpen: inventoryPanelState.isOpen,\n                            onClose: ()=>setInventoryPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            inventory: inventory,\n                            onUseItem: handleUseItem,\n                            activeTasks: activeTasks,\n                            activeBuffs: activeBuffs,\n                            anchorRect: inventoryPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 975,\n                            columnNumber: 25\n                        }, undefined)\n                    ]\n                }, void 0, true);\n            default:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves,\n                    onDeleteGame: handleDeleteGame\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 978,\n                    columnNumber: 29\n                }, undefined);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-stone-dark flex items-center justify-center p-4\",\n        children: [\n            gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: handleToggleUnlimitedResources,\n                className: \"fixed bottom-4 left-4 z-[101] bg-brand-gold text-stone-dark font-bold py-1 px-3 rounded-full text-xs shadow-lg hover:scale-105 transition-transform\",\n                \"aria-label\": \"Toggle unlimited resources test mode\",\n                children: [\n                    \"Test Mode: \",\n                    unlimitedResources ? \"ON\" : \"OFF\"\n                ]\n            }, void 0, true, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 985,\n                columnNumber: 18\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_NotificationManager__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n                notifications: notifications,\n                onRemoveNotification: removeNotification\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 987,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: \"w-full max-w-7xl mx-auto\",\n                children: renderContent()\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 988,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/user/studio/src/app/page.tsx\",\n        lineNumber: 983,\n        columnNumber: 9\n    }, undefined);\n};\n_s(GamePage, \"gZnfX5xD65/ekxtK9j57QCGpM7Y=\");\n_c = GamePage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GamePage);\nvar _c;\n$RefreshReg$(_c, \"GamePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBSWpCLFdBQVdBOzRCQUFXaVksV0FBV3ZEOzRCQUFlOVUsYUFBYUE7NEJBQWFNLGFBQWFBOzRCQUFhZSxZQUFZZSxvQkFBb0JmLFVBQVU7Ozs7Ozs7O1lBRzFSO2dCQUFTLHFCQUFPLDhEQUFDbkYsZ0VBQVdBO29CQUFDa2EsV0FBV3ZJO29CQUFvQndJLGNBQWMzSDtvQkFBa0I0SCxZQUFZNVc7b0JBQVU2VyxjQUFjOUI7Ozs7OztRQUNwSTtJQUNKO0lBRUEscUJBQ0ksOERBQUM2RDtRQUFJQyxXQUFVOztZQUNWeGEsY0FBY2hELDhDQUFVQSxDQUFDMEwsT0FBTyxrQkFDNUIsOERBQUMrUjtnQkFBT0MsU0FBUy9EO2dCQUFnQzZELFdBQVU7Z0JBQXNKRyxjQUFXOztvQkFBdUM7b0JBQVlsWixxQkFBcUIsT0FBTzs7Ozs7OzswQkFFaFQsOERBQUNuRCx3RUFBbUJBO2dCQUFDaUQsZUFBZUE7Z0JBQWVxWixzQkFBc0IzUjs7Ozs7OzBCQUN6RSw4REFBQzRSO2dCQUFLTCxXQUFVOzBCQUNYcEM7Ozs7Ozs7Ozs7OztBQUlqQjtHQXo3Qk1yWTtLQUFBQTtBQTI3Qk4sK0RBQWVBLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2FwcC9wYWdlLnRzeD9mNjhhIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG4ndXNlIGNsaWVudCc7XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2FtZVN0YXR1cywgdHlwZSBDaXZpbGl6YXRpb24sIHR5cGUgUmVzb3VyY2VzLCB0eXBlIFVuaXRzLCB0eXBlIEJ1aWxkaW5ncywgdHlwZSBHYW1lRXZlbnQsIHR5cGUgR2FtZUxvZ0VudHJ5LCB0eXBlIExvZ0ljb25UeXBlLCB0eXBlIFJlc291cmNlRGVsdGFzLCBCdWlsZGluZ1R5cGUsIFVJTm90aWZpY2F0aW9uLCBGdWxsR2FtZVN0YXRlLCBWaWxsYWdlciwgTWlsaXRhcnlVbml0LCBVbml0Q29uZmlnLCBNaWxpdGFyeVVuaXRUeXBlLCBHYW1lVGFzaywgVGFza1R5cGUsIFJlc291cmNlTm9kZSwgUmVzb3VyY2VOb2RlVHlwZSwgUGxheWVyQWN0aW9uU3RhdGUsIEdhbWVFdmVudENob2ljZSwgR2FtZUl0ZW0sIFJld2FyZCwgQWN0aXZlQnVmZnMsIEJ1aWxkaW5nSW5zdGFuY2UsIEFnZUNvbmZpZywgQnVpbGRpbmdDb25maWcsIEJ1aWxkaW5nVXBncmFkZVBhdGggfSBmcm9tICdAL3R5cGVzJztcbmltcG9ydCB7IGdldFByZWRlZmluZWRDaXZpbGl6YXRpb24sIGdldFByZWRlZmluZWRHYW1lRXZlbnQgfSBmcm9tICdAL3NlcnZpY2VzL2dlbWluaVNlcnZpY2UnO1xuaW1wb3J0IHsgc2F2ZUdhbWVTdGF0ZSwgbG9hZEdhbWVTdGF0ZSwgZ2V0QWxsU2F2ZU5hbWVzLCBkZWxldGVHYW1lU3RhdGUsIGdldEFsbEFnZUNvbmZpZ3MsIGdldEFsbEJ1aWxkaW5nQ29uZmlncywgZ2V0QWxsVW5pdENvbmZpZ3MsIHNhdmVBZ2VDb25maWcsIHNhdmVCdWlsZGluZ0NvbmZpZywgc2F2ZVVuaXRDb25maWcgfSBmcm9tICdAL3NlcnZpY2VzL2RiU2VydmljZSc7XG5pbXBvcnQgeyBnZXRSYW5kb21OYW1lcyB9IGZyb20gJ0Avc2VydmljZXMvbmFtZVNlcnZpY2UnO1xuaW1wb3J0IHsgR0FNRV9JVEVNUyB9IGZyb20gJ0AvZGF0YS9pdGVtQ29udGVudCc7XG5pbXBvcnQgeyBJTklUSUFMX0FHRVMgfSBmcm9tICdAL2RhdGEvYWdlSW5mbyc7XG5pbXBvcnQgeyBJTklUSUFMX0JVSUxESU5HUyB9IGZyb20gJ0AvZGF0YS9idWlsZGluZ0luZm8nO1xuaW1wb3J0IHsgSU5JVElBTF9VTklUUyB9IGZyb20gJ0AvZGF0YS91bml0SW5mbyc7XG5pbXBvcnQgR2FtZVVJIGZyb20gJ0AvY29tcG9uZW50cy9HYW1lVUknO1xuaW1wb3J0IFN0YXJ0U2NyZWVuIGZyb20gJ0AvY29tcG9uZW50cy9TdGFydFNjcmVlbic7XG5pbXBvcnQgTG9hZGluZ1NjcmVlbiBmcm9tICdAL2NvbXBvbmVudHMvTG9hZGluZ1NjcmVlbic7XG5pbXBvcnQgQnVpbGRQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvQnVpbGRQYW5lbCc7XG5pbXBvcnQgTm90aWZpY2F0aW9uTWFuYWdlciBmcm9tICdAL2NvbXBvbmVudHMvTm90aWZpY2F0aW9uTWFuYWdlcic7XG5pbXBvcnQgVW5pdE1hbmFnZW1lbnRQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvVW5pdE1hbmFnZW1lbnRQYW5lbCc7XG5pbXBvcnQgQnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwgZnJvbSAnQC9jb21wb25lbnRzL0J1aWxkaW5nTWFuYWdlbWVudFBhbmVsJztcbmltcG9ydCBSZXNvdXJjZUFzc2lnbm1lbnRQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvUmVzb3VyY2VBc3NpZ25tZW50UGFuZWwnO1xuaW1wb3J0IENpdmlsaXphdGlvblBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy9DaXZpbGl6YXRpb25QYW5lbCc7XG5pbXBvcnQgQWxsQnVpbGRpbmdzUGFuZWwgZnJvbSAnQC9jb21wb25lbnRzL0FsbEJ1aWxkaW5nc1BhbmVsJztcbmltcG9ydCBJbnZlbnRvcnlQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvSW52ZW50b3J5UGFuZWwnO1xuXG5jb25zdCBHQVRIRVJfSU5GTzogUmVjb3JkPFJlc291cmNlTm9kZVR5cGUsIHsgcmF0ZTogbnVtYmVyIH0+ID0ge1xuICAgIGZvb2Q6IHsgcmF0ZTogMTAgfSxcbiAgICB3b29kOiB7IHJhdGU6IDggfSxcbiAgICBnb2xkOiB7IHJhdGU6IDUgfSxcbiAgICBzdG9uZTogeyByYXRlOiA2IH0sXG59XG5cbmNvbnN0IGluaXRpYWxCdWlsZGluZ3NTdGF0ZTogQnVpbGRpbmdzID0ge1xuICAgIGhvdXNlczogW10sIGJhcnJhY2tzOiBbXSwgYXJjaGVyeVJhbmdlOiBbXSwgc3RhYmxlOiBbXSwgc2llZ2VXb3Jrc2hvcDogW10sIGJsYWNrc21pdGg6IFtdLCB3YXRjaFRvd2VyOiBbXSwgdG93bkNlbnRlcjogW11cbn07XG5cbmNvbnN0IE1BUF9ESU1FTlNJT05TID0geyB3aWR0aDogMjUsIGhlaWdodDogMTggfTtcblxuXG5jb25zdCBHYW1lUGFnZTogUmVhY3QuRkMgPSAoKSA9PiB7XG4gICAgLy8gQ29yZSBHYW1lIFN0YXRlXG4gICAgY29uc3QgW2dhbWVTdGF0ZSwgc2V0R2FtZVN0YXRlXSA9IHVzZVN0YXRlPEdhbWVTdGF0dXM+KEdhbWVTdGF0dXMuTE9BRElORyk7XG4gICAgY29uc3QgW2NpdmlsaXphdGlvbiwgc2V0Q2l2aWxpemF0aW9uXSA9IHVzZVN0YXRlPENpdmlsaXphdGlvbiB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtyZXNvdXJjZXMsIHNldFJlc291cmNlc10gPSB1c2VTdGF0ZTxSZXNvdXJjZXM+KHsgZm9vZDogMjAwLCB3b29kOiAxNTAsIGdvbGQ6IDUwLCBzdG9uZTogMTAwIH0pO1xuICAgIGNvbnN0IFt1bml0cywgc2V0VW5pdHNdID0gdXNlU3RhdGU8VW5pdHM+KHsgdmlsbGFnZXJzOiBbXSwgbWlsaXRhcnk6IFtdIH0pO1xuICAgIGNvbnN0IFtidWlsZGluZ3MsIHNldEJ1aWxkaW5nc10gPSB1c2VTdGF0ZTxCdWlsZGluZ3M+KGluaXRpYWxCdWlsZGluZ3NTdGF0ZSk7XG4gICAgY29uc3QgW2N1cnJlbnRBZ2UsIHNldEN1cnJlbnRBZ2VdID0gdXNlU3RhdGU8c3RyaW5nPignTm9tYWRpYyBBZ2UnKTtcbiAgICBjb25zdCBbZ2FtZUxvZywgc2V0R2FtZUxvZ10gPSB1c2VTdGF0ZTxHYW1lTG9nRW50cnlbXT4oW10pO1xuICAgIGNvbnN0IFtjdXJyZW50RXZlbnQsIHNldEN1cnJlbnRFdmVudF0gPSB1c2VTdGF0ZTxHYW1lRXZlbnQgfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBbcmVzb3VyY2VEZWx0YXMsIHNldFJlc291cmNlRGVsdGFzXSA9IHVzZVN0YXRlPFJlc291cmNlRGVsdGFzPih7fSk7XG4gICAgY29uc3QgW2FjdGl2aXR5U3RhdHVzLCBzZXRBY3Rpdml0eVN0YXR1c10gPSB1c2VTdGF0ZTxzdHJpbmc+KCdZb3VyIHN0b3J5IGJlZ2lucy4uLicpO1xuICAgIGNvbnN0IFtub3RpZmljYXRpb25zLCBzZXROb3RpZmljYXRpb25zXSA9IHVzZVN0YXRlPFVJTm90aWZpY2F0aW9uW10+KFtdKTtcbiAgICBjb25zdCBbdW5saW1pdGVkUmVzb3VyY2VzLCBzZXRVbmxpbWl0ZWRSZXNvdXJjZXNdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIGNvbnN0IFthbGxTYXZlcywgc2V0QWxsU2F2ZXNdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcbiAgICBjb25zdCBbY3VycmVudFNhdmVOYW1lLCBzZXRDdXJyZW50U2F2ZU5hbWVdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW3BsYXllckFjdGlvbiwgc2V0UGxheWVyQWN0aW9uXSA9IHVzZVN0YXRlPFBsYXllckFjdGlvblN0YXRlPihudWxsKTtcbiAgICBjb25zdCBbYWN0aXZlVGFza3MsIHNldEFjdGl2ZVRhc2tzXSA9IHVzZVN0YXRlPEdhbWVUYXNrW10+KFtdKTtcbiAgICBjb25zdCBbcmVzb3VyY2VOb2Rlcywgc2V0UmVzb3VyY2VOb2Rlc10gPSB1c2VTdGF0ZTxSZXNvdXJjZU5vZGVbXT4oW10pO1xuICAgIGNvbnN0IFtpbnZlbnRvcnksIHNldEludmVudG9yeV0gPSB1c2VTdGF0ZTxHYW1lSXRlbVtdPihbXSk7XG4gICAgY29uc3QgW2FjdGl2ZUJ1ZmZzLCBzZXRBY3RpdmVCdWZmc10gPSB1c2VTdGF0ZTxBY3RpdmVCdWZmcz4oeyByZXNvdXJjZUJvb3N0OiBbXSB9KTtcbiAgICBcbiAgICAvLyBNYXN0ZXIgbGlzdHMgb2YgYWxsIGNvbmZpZ3VyYXRpb25zIGZyb20gREJcbiAgICBjb25zdCBbbWFzdGVyQWdlTGlzdCwgc2V0TWFzdGVyQWdlTGlzdF0gPSB1c2VTdGF0ZTxBZ2VDb25maWdbXT4oW10pO1xuICAgIGNvbnN0IFttYXN0ZXJCdWlsZGluZ0xpc3QsIHNldE1hc3RlckJ1aWxkaW5nTGlzdF0gPSB1c2VTdGF0ZTxCdWlsZGluZ0NvbmZpZ1tdPihbXSk7XG4gICAgY29uc3QgW21hc3RlclVuaXRMaXN0LCBzZXRNYXN0ZXJVbml0TGlzdF0gPSB1c2VTdGF0ZTxVbml0Q29uZmlnW10+KFtdKTtcblxuICAgIC8vIEFwcCBMb2FkaW5nIFN0YXRlXG4gICAgY29uc3QgW2lzQXBwTG9hZGluZywgc2V0SXNBcHBMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gICAgXG4gICAgLy8gUGFuZWwgU3RhdGVzXG4gICAgY29uc3QgW2J1aWxkUGFuZWxTdGF0ZSwgc2V0QnVpbGRQYW5lbFN0YXRlXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyB2aWxsYWdlcklkOiBzdHJpbmcgfCBudWxsOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbCB9Pih7IGlzT3BlbjogZmFsc2UsIHZpbGxhZ2VySWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgY29uc3QgW3VuaXRNYW5hZ2VtZW50UGFuZWwsIHNldFVuaXRNYW5hZ2VtZW50UGFuZWxdID0gdXNlU3RhdGU8eyBpc09wZW46IGJvb2xlYW47IHR5cGU6ICd2aWxsYWdlcnMnIHwgJ21pbGl0YXJ5JyB8IG51bGw7IGFuY2hvclJlY3Q6IERPTVJlY3QgfCBudWxsOyB9Pih7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgY29uc3QgW2J1aWxkaW5nTWFuYWdlbWVudFBhbmVsLCBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbF0gPSB1c2VTdGF0ZTx7IGlzT3BlbjogYm9vbGVhbjsgdHlwZTogQnVpbGRpbmdUeXBlIHwgc3RyaW5nIHwgbnVsbDsgaW5zdGFuY2VJZD86IHN0cmluZzsgYW5jaG9yUmVjdDogRE9NUmVjdCB8IG51bGw7IH0+KHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgaW5zdGFuY2VJZDogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICBjb25zdCBbYWxsQnVpbGRpbmdzUGFuZWwsIHNldEFsbEJ1aWxkaW5nc1BhbmVsXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbDsgfT4oeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIGNvbnN0IFthc3NpZ25tZW50UGFuZWxTdGF0ZSwgc2V0QXNzaWdubWVudFBhbmVsU3RhdGVdID0gdXNlU3RhdGU8eyBpc09wZW46IGJvb2xlYW47IHRhcmdldElkOiBzdHJpbmcgfCBudWxsOyB0YXJnZXRUeXBlOiAncmVzb3VyY2UnIHwgJ2NvbnN0cnVjdGlvbicgfCBudWxsOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbDsgfT4oeyBpc09wZW46IGZhbHNlLCB0YXJnZXRJZDogbnVsbCwgdGFyZ2V0VHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICBjb25zdCBbY2l2UGFuZWxTdGF0ZSwgc2V0Q2l2UGFuZWxTdGF0ZV0gPSB1c2VTdGF0ZTx7IGlzT3BlbjogYm9vbGVhbjsgYW5jaG9yUmVjdDogRE9NUmVjdCB8IG51bGw7IH0+KHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICBjb25zdCBbaW52ZW50b3J5UGFuZWxTdGF0ZSwgc2V0SW52ZW50b3J5UGFuZWxTdGF0ZV0gPSB1c2VTdGF0ZTx7IGlzT3BlbjogYm9vbGVhbjsgYW5jaG9yUmVjdDogRE9NUmVjdCB8IG51bGw7IH0+KHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9KTtcblxuICAgIGNvbnN0IGRlbHRhVGltZW91dFJlZiA9IHVzZVJlZjx7IFtrZXkgaW4ga2V5b2YgUmVzb3VyY2VzXT86IG51bWJlciB9Pih7fSk7XG4gICAgY29uc3QgZXZlbnRUaW1lclJlZiA9IHVzZVJlZjxOb2RlSlMuVGltZW91dCB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IGxhc3RUaWNrUmVmID0gdXNlUmVmPG51bWJlcj4oRGF0ZS5ub3coKSk7XG4gICAgY29uc3QgYW5pbWF0aW9uRnJhbWVSZWYgPSB1c2VSZWY8bnVtYmVyPigpO1xuICAgIFxuICAgIC8vIERlcml2ZWQgc3RhdGUgZm9yIGFjdGl2ZSBnYW1lIGNvbmZpZ3VyYXRpb25zXG4gICAgY29uc3QgYWdlUHJvZ3Jlc3Npb25MaXN0ID0gbWFzdGVyQWdlTGlzdC5maWx0ZXIoYWdlID0+IGFnZS5pc0FjdGl2ZSk7XG4gICAgY29uc3QgYnVpbGRpbmdMaXN0ID0gbWFzdGVyQnVpbGRpbmdMaXN0OyAvLyBLZWVwIGFsbCBmb3IgbG9va3VwcywgZmlsdGVyIG9uIHVzZVxuICAgIGNvbnN0IHVuaXRMaXN0ID0gbWFzdGVyVW5pdExpc3Q7IC8vIEtlZXAgYWxsIGZvciBsb29rdXBzLCBmaWx0ZXIgb24gdXNlXG5cbiAgICBjb25zdCBwb3B1bGF0aW9uQ2FwYWNpdHkgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgbGV0IGNhcGFjaXR5ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBidWlsZGluZ1R5cGUgaW4gYnVpbGRpbmdzKSB7XG4gICAgICAgICAgICBjb25zdCBidWlsZGluZ0luZm8gPSBtYXN0ZXJCdWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IGJ1aWxkaW5nVHlwZSk7XG4gICAgICAgICAgICBpZiAoYnVpbGRpbmdJbmZvICYmIGJ1aWxkaW5nSW5mby5wb3B1bGF0aW9uQ2FwYWNpdHkpIHtcbiAgICAgICAgICAgICAgICBjYXBhY2l0eSArPSBidWlsZGluZ3NbYnVpbGRpbmdUeXBlXS5sZW5ndGggKiBidWlsZGluZ0luZm8ucG9wdWxhdGlvbkNhcGFjaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYXBhY2l0eTtcbiAgICB9LCBbYnVpbGRpbmdzLCBtYXN0ZXJCdWlsZGluZ0xpc3RdKTtcbiAgICBcbiAgICBjb25zdCBwb3B1bGF0aW9uID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1pbGl0YXJ5UG9wID0gdW5pdHMubWlsaXRhcnkucmVkdWNlKChhY2MsIHVuaXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVuaXRJbmZvID0gbWFzdGVyVW5pdExpc3QuZmluZCh1ID0+IHUuaWQgPT09IHVuaXQudW5pdFR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYyArICh1bml0SW5mbz8ucG9wdWxhdGlvbkNvc3QgfHwgMSk7XG4gICAgICAgIH0sIDApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnJlbnQ6IHVuaXRzLnZpbGxhZ2Vycy5sZW5ndGggKyBtaWxpdGFyeVBvcCxcbiAgICAgICAgICAgIGNhcGFjaXR5OiBwb3B1bGF0aW9uQ2FwYWNpdHksXG4gICAgICAgIH07XG4gICAgfSwgW3VuaXRzLCBwb3B1bGF0aW9uQ2FwYWNpdHksIG1hc3RlclVuaXRMaXN0XSk7XG4gICAgXG4gICAgY29uc3QgZmV0Y2hTYXZlc0FuZENvbmZpZ3MgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICAgIHNldElzQXBwTG9hZGluZyh0cnVlKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gYXdhaXQgZ2V0QWxsU2F2ZU5hbWVzKCk7XG4gICAgICAgICAgICBzZXRBbGxTYXZlcyhuYW1lcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIC0tLSBTbWFydCBTZWVkaW5nL1VwZGF0aW5nIGZvciBBZ2VzIC0tLVxuICAgICAgICAgICAgbGV0IGFsbEFnZUNvbmZpZ3MgPSBhd2FpdCBnZXRBbGxBZ2VDb25maWdzKCk7XG4gICAgICAgICAgICBsZXQgYWdlTWFwID0gbmV3IE1hcChhbGxBZ2VDb25maWdzLm1hcChpdGVtID0+IFtpdGVtLmlkLCBpdGVtXSkpO1xuICAgICAgICAgICAgbGV0IGFnZXNOZWVkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgcEl0ZW1dIG9mIElOSVRJQUxfQUdFUy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ0l0ZW0gPSBhZ2VNYXAuZ2V0KHBJdGVtLm5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW06IEFnZUNvbmZpZyA9IHsgLi4uKGV4aXN0aW5nSXRlbSB8fCB7fSksIC4uLnBJdGVtLCBpZDogcEl0ZW0ubmFtZSwgaXNQcmVkZWZpbmVkOiB0cnVlLCBpc0FjdGl2ZTogZXhpc3RpbmdJdGVtPy5pc0FjdGl2ZSA/PyB0cnVlLCBvcmRlcjogZXhpc3RpbmdJdGVtPy5vcmRlciA/PyBpbmRleCB9O1xuICAgICAgICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShleGlzdGluZ0l0ZW0pICE9PSBKU09OLnN0cmluZ2lmeShuZXdJdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzYXZlQWdlQ29uZmlnKG5ld0l0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBhZ2VzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFnZXNOZWVkVXBkYXRlKSBhbGxBZ2VDb25maWdzID0gYXdhaXQgZ2V0QWxsQWdlQ29uZmlncygpO1xuICAgICAgICAgICAgc2V0TWFzdGVyQWdlTGlzdChhbGxBZ2VDb25maWdzKTtcblxuICAgICAgICAgICAgLy8gLS0tIFNtYXJ0IFNlZWRpbmcvVXBkYXRpbmcgZm9yIEJ1aWxkaW5ncyAtLS1cbiAgICAgICAgICAgIGxldCBhbGxCdWlsZGluZ0NvbmZpZ3MgPSBhd2FpdCBnZXRBbGxCdWlsZGluZ0NvbmZpZ3MoKTtcbiAgICAgICAgICAgIGxldCBidWlsZGluZ01hcCA9IG5ldyBNYXAoYWxsQnVpbGRpbmdDb25maWdzLm1hcChpdGVtID0+IFtpdGVtLmlkLCBpdGVtXSkpO1xuICAgICAgICAgICAgbGV0IGJ1aWxkaW5nc05lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRBZ2UgPSBhbGxBZ2VDb25maWdzWzBdPy5uYW1lIHx8IElOSVRJQUxfQUdFU1swXS5uYW1lO1xuICAgICAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIHBJdGVtXSBvZiBJTklUSUFMX0JVSUxESU5HUy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ0l0ZW0gPSBidWlsZGluZ01hcC5nZXQocEl0ZW0uaWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW06IEJ1aWxkaW5nQ29uZmlnID0geyAuLi4oZXhpc3RpbmdJdGVtIHx8IHt9KSwgLi4ucEl0ZW0sIGlkOiBwSXRlbS5pZCwgaXNQcmVkZWZpbmVkOiB0cnVlLCB1bmxvY2tlZEluQWdlOiBleGlzdGluZ0l0ZW0/LnVubG9ja2VkSW5BZ2UgfHwgKHBJdGVtLmlkID09PSAndG93bkNlbnRlcicgPyBJTklUSUFMX0FHRVNbMF0ubmFtZSA6IGRlZmF1bHRBZ2UpLCBpc0FjdGl2ZTogZXhpc3RpbmdJdGVtPy5pc0FjdGl2ZSA/PyB0cnVlLCBvcmRlcjogZXhpc3RpbmdJdGVtPy5vcmRlciA/PyBpbmRleCwgcG9wdWxhdGlvbkNhcGFjaXR5OiBleGlzdGluZ0l0ZW0/LnBvcHVsYXRpb25DYXBhY2l0eSA/PyBwSXRlbS5wb3B1bGF0aW9uQ2FwYWNpdHkgfTtcbiAgICAgICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoZXhpc3RpbmdJdGVtKSAhPT0gSlNPTi5zdHJpbmdpZnkobmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2F2ZUJ1aWxkaW5nQ29uZmlnKG5ld0l0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBidWlsZGluZ3NOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVpbGRpbmdzTmVlZFVwZGF0ZSkgYWxsQnVpbGRpbmdDb25maWdzID0gYXdhaXQgZ2V0QWxsQnVpbGRpbmdDb25maWdzKCk7XG4gICAgICAgICAgICBzZXRNYXN0ZXJCdWlsZGluZ0xpc3QoYWxsQnVpbGRpbmdDb25maWdzKTtcblxuICAgICAgICAgICAgLy8gLS0tIFNtYXJ0IFNlZWRpbmcvVXBkYXRpbmcgZm9yIFVuaXRzIC0tLVxuICAgICAgICAgICAgbGV0IGFsbFVuaXRDb25maWdzID0gYXdhaXQgZ2V0QWxsVW5pdENvbmZpZ3MoKTtcbiAgICAgICAgICAgIGNvbnN0IHVuaXRNYXAgPSBuZXcgTWFwKGFsbFVuaXRDb25maWdzLm1hcChpdGVtID0+IFtpdGVtLmlkLCBpdGVtXSkpO1xuICAgICAgICAgICAgbGV0IHVuaXRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgaW5pdGlhbFVuaXRzV2l0aElkcyA9IElOSVRJQUxfVU5JVFMubWFwKHUgPT4gKHsgLi4udSwgaWQ6IHUubmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJykgfSkpO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgcEl0ZW1dIG9mIGluaXRpYWxVbml0c1dpdGhJZHMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gdW5pdE1hcC5nZXQocEl0ZW0uaWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW06IFVuaXRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLihwSXRlbSBhcyBhbnkpLCAvLyBCYXNlIHByZWRlZmluZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIC4uLihleGlzdGluZ0l0ZW0gfHwge30pLCAvLyBPdmVyd3JpdGUgd2l0aCBzYXZlZCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHBJdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICBpc1ByZWRlZmluZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlOiBleGlzdGluZ0l0ZW0/LmlzQWN0aXZlID8/IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyOiBleGlzdGluZ0l0ZW0/Lm9yZGVyID8/IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICB0cmVlSWQ6IGV4aXN0aW5nSXRlbT8udHJlZUlkIHx8IGB1dHJlZS1wcmVkZWZpbmVkLSR7cEl0ZW0uaWR9YCxcbiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGlvbkNvc3Q6IGV4aXN0aW5nSXRlbT8ucG9wdWxhdGlvbkNvc3QgPz8gcEl0ZW0ucG9wdWxhdGlvbkNvc3QsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShleGlzdGluZ0l0ZW0pICE9PSBKU09OLnN0cmluZ2lmeShuZXdJdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzYXZlVW5pdENvbmZpZyhuZXdJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgdW5pdHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5pdHNOZWVkVXBkYXRlKSBhbGxVbml0Q29uZmlncyA9IGF3YWl0IGdldEFsbFVuaXRDb25maWdzKCk7XG4gICAgICAgICAgICBzZXRNYXN0ZXJVbml0TGlzdChhbGxVbml0Q29uZmlncyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB7IGFsbEFnZUNvbmZpZ3MsIGFsbEJ1aWxkaW5nQ29uZmlncywgYWxsVW5pdENvbmZpZ3MgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBkdXJpbmcgaW5pdGlhbCBjb25maWcgZmV0Y2g6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIGNvbnN0IGFnZXMgPSBJTklUSUFMX0FHRVMubWFwKChhLCBpKSA9PiAoey4uLmEsIGlkOiBhLm5hbWUsIGlzQWN0aXZlOiB0cnVlLCBpc1ByZWRlZmluZWQ6IHRydWUsIG9yZGVyOiBpfSkpO1xuICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdzID0gSU5JVElBTF9CVUlMRElOR1MubWFwKChiLCBpKSA9PiAoey4uLmIsIGlzQWN0aXZlOiB0cnVlLCBpc1ByZWRlZmluZWQ6IHRydWUsIG9yZGVyOiBpLCB1bmxvY2tlZEluQWdlOiAnTm9tYWRpYyBBZ2UnIH0gYXMgQnVpbGRpbmdDb25maWcpKTtcbiAgICAgICAgICAgIGNvbnN0IHVuaXRzID0gSU5JVElBTF9VTklUUy5tYXAoKHUsIGkpID0+ICh7Li4udSwgaWQ6IHUubmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyksIGlzQWN0aXZlOiB0cnVlLCBpc1ByZWRlZmluZWQ6IHRydWUsIG9yZGVyOiBpfSkpO1xuICAgICAgICAgICAgc2V0TWFzdGVyQWdlTGlzdChhZ2VzKTtcbiAgICAgICAgICAgIHNldE1hc3RlckJ1aWxkaW5nTGlzdChidWlsZGluZ3MpO1xuICAgICAgICAgICAgc2V0TWFzdGVyVW5pdExpc3QodW5pdHMgYXMgVW5pdENvbmZpZ1tdKTtcbiAgICAgICAgICAgIHJldHVybiB7IGFsbEFnZUNvbmZpZ3M6IGFnZXMsIGFsbEJ1aWxkaW5nQ29uZmlnczogYnVpbGRpbmdzLCBhbGxVbml0Q29uZmlnczogdW5pdHMgYXMgVW5pdENvbmZpZ1tdIH07XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBzZXRJc0FwcExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgc2V0R2FtZVN0YXRlKEdhbWVTdGF0dXMuTUVOVSk7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG4gICAgXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZmV0Y2hTYXZlc0FuZENvbmZpZ3MoKTtcbiAgICB9LCBbZmV0Y2hTYXZlc0FuZENvbmZpZ3NdKTtcbiAgICBcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoZ2FtZVN0YXRlID09PSBHYW1lU3RhdHVzLlBMQVlJTkcgJiYgY2l2aWxpemF0aW9uICYmIGN1cnJlbnRTYXZlTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgZnVsbFN0YXRlOiBGdWxsR2FtZVN0YXRlID0ge1xuICAgICAgICAgICAgICAgIGNpdmlsaXphdGlvbixcbiAgICAgICAgICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgICAgICAgICAgdW5pdHMsXG4gICAgICAgICAgICAgICAgYnVpbGRpbmdzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRBZ2UsXG4gICAgICAgICAgICAgICAgZ2FtZUxvZyxcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrcyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZU5vZGVzLFxuICAgICAgICAgICAgICAgIGludmVudG9yeSxcbiAgICAgICAgICAgICAgICBhY3RpdmVCdWZmcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzYXZlR2FtZVN0YXRlKGN1cnJlbnRTYXZlTmFtZSwgZnVsbFN0YXRlKTtcbiAgICAgICAgfVxuICAgIH0sIFtjaXZpbGl6YXRpb24sIHJlc291cmNlcywgdW5pdHMsIGJ1aWxkaW5ncywgY3VycmVudEFnZSwgZ2FtZUxvZywgZ2FtZVN0YXRlLCBjdXJyZW50U2F2ZU5hbWUsIGFjdGl2ZVRhc2tzLCByZXNvdXJjZU5vZGVzLCBpbnZlbnRvcnksIGFjdGl2ZUJ1ZmZzXSk7XG5cbiAgICBjb25zdCBhZGROb3RpZmljYXRpb24gPSB1c2VDYWxsYmFjaygobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gYCR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpfWA7XG4gICAgICAgIHNldE5vdGlmaWNhdGlvbnMocHJldiA9PiBbeyBpZCwgbWVzc2FnZSB9XSk7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgcmVtb3ZlTm90aWZpY2F0aW9uID0gdXNlQ2FsbGJhY2soKGlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgc2V0Tm90aWZpY2F0aW9ucyhwcmV2ID0+IHByZXYuZmlsdGVyKG4gPT4gbi5pZCAhPT0gaWQpKTtcbiAgICB9LCBbXSk7XG4gICAgXG4gICAgY29uc3QgYWRkVG9Mb2cgPSB1c2VDYWxsYmFjaygobWVzc2FnZTogc3RyaW5nLCBpY29uOiBMb2dJY29uVHlwZSkgPT4ge1xuICAgICAgICBzZXRHYW1lTG9nKHByZXYgPT4gW3sgaWQ6IGAke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKX1gLCBtZXNzYWdlLCBpY29uIH0sIC4uLnByZXYuc2xpY2UoMCwgMTkpXSk7XG4gICAgfSwgW10pO1xuICAgIFxuICAgIGNvbnN0IHVwZGF0ZVJlc291cmNlcyA9IHVzZUNhbGxiYWNrKChkZWx0YXM6IFJlc291cmNlRGVsdGFzKSA9PiB7XG4gICAgICAgIHNldFJlc291cmNlcyhwcmV2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc291cmNlcyA9IHsgLi4ucHJldiB9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGVsdGFzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VLZXkgPSBrZXkgYXMga2V5b2YgUmVzb3VyY2VzO1xuICAgICAgICAgICAgICAgIG5ld1Jlc291cmNlc1tyZXNvdXJjZUtleV0gPSBNYXRoLm1heCgwLCBuZXdSZXNvdXJjZXNbcmVzb3VyY2VLZXldICsgKGRlbHRhc1tyZXNvdXJjZUtleV0gPz8gMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld1Jlc291cmNlcztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2V0UmVzb3VyY2VEZWx0YXMocHJldiA9PiAoey4uLnByZXYsIC4uLmRlbHRhc30pKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkZWx0YXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlS2V5ID0ga2V5IGFzIGtleW9mIFJlc291cmNlcztcbiAgICAgICAgICAgIGlmIChkZWx0YVRpbWVvdXRSZWYuY3VycmVudFtyZXNvdXJjZUtleV0pIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGRlbHRhVGltZW91dFJlZi5jdXJyZW50W3Jlc291cmNlS2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWx0YVRpbWVvdXRSZWYuY3VycmVudFtyZXNvdXJjZUtleV0gPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0UmVzb3VyY2VEZWx0YXMocHJldiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RlbHRhcyA9IHsuLi5wcmV2fTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5ld0RlbHRhc1tyZXNvdXJjZUtleV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdEZWx0YXM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAxNTAwKTtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGhhbmRsZVRhc2tDb21wbGV0aW9uID0gdXNlQ2FsbGJhY2soKHRhc2s6IEdhbWVUYXNrKSA9PiB7XG4gICAgICAgIGlmICh0YXNrLnBheWxvYWQ/LnZpbGxhZ2VySWRzICYmIHRhc2sucGF5bG9hZC52aWxsYWdlcklkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzZXRVbml0cyhwcmV2ID0+ICh7IC4uLnByZXYsIHZpbGxhZ2VyczogcHJldi52aWxsYWdlcnMubWFwKHYgPT4gdGFzay5wYXlsb2FkIS52aWxsYWdlcklkcyEuaW5jbHVkZXModi5pZCkgPyB7IC4uLnYsIGN1cnJlbnRUYXNrOiBudWxsIH0gOiB2KSB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRhc2sudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnYnVpbGQnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBidWlsZGluZ1R5cGUsIHBvc2l0aW9uIH0gPSB0YXNrLnBheWxvYWQhO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nSW5mbyA9IGJ1aWxkaW5nTGlzdC5maW5kKGIgPT4gYi5pZCA9PT0gYnVpbGRpbmdUeXBlKSE7XG4gICAgICAgICAgICAgICAgY29uc3QgW25hbWVdID0gZ2V0UmFuZG9tTmFtZXMoJ2J1aWxkaW5nJywgMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3QnVpbGRpbmc6IEJ1aWxkaW5nSW5zdGFuY2UgPSB7IGlkOiB0YXNrLmlkLCBuYW1lLCBwb3NpdGlvbjogcG9zaXRpb24hLCBjdXJyZW50SHA6IGJ1aWxkaW5nSW5mby5ocCB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNldEJ1aWxkaW5ncyhwID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJ1aWxkaW5ncyA9IHBbYnVpbGRpbmdUeXBlIGFzIHN0cmluZ10gfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnAsIFtidWlsZGluZ1R5cGUgYXMgc3RyaW5nXTogWy4uLmN1cnJlbnRCdWlsZGluZ3MsIG5ld0J1aWxkaW5nXSB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGFkZFRvTG9nKGAke3Rhc2sucGF5bG9hZCEudmlsbGFnZXJJZHMhLmxlbmd0aH0gYnVpbGRlcihzKSBoYXZlIGNvbnN0cnVjdGVkICR7bmFtZX0sIGEgbmV3ICR7YnVpbGRpbmdJbmZvLm5hbWV9LmAsIGJ1aWxkaW5nSW5mby5pY29uSWQpO1xuICAgICAgICAgICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGBDb25zdHJ1Y3Rpb24gb2YgJHtuYW1lfSBpcyBjb21wbGV0ZS5gKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3VwZ3JhZGVfYnVpbGRpbmcnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBvcmlnaW5hbEJ1aWxkaW5nSWQsIG9yaWdpbmFsQnVpbGRpbmdUeXBlLCB0YXJnZXRCdWlsZGluZ1R5cGUgfSA9IHRhc2sucGF5bG9hZCE7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxCdWlsZGluZyA9IGJ1aWxkaW5nc1tvcmlnaW5hbEJ1aWxkaW5nVHlwZSBhcyBzdHJpbmddPy5maW5kKGIgPT4gYi5pZCA9PT0gb3JpZ2luYWxCdWlsZGluZ0lkKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRCdWlsZGluZ0luZm8gPSBidWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IHRhcmdldEJ1aWxkaW5nVHlwZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxCdWlsZGluZyAmJiB0YXJnZXRCdWlsZGluZ0luZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3QnVpbGRpbmc6IEJ1aWxkaW5nSW5zdGFuY2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogb3JpZ2luYWxCdWlsZGluZy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG9yaWdpbmFsQnVpbGRpbmcubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBvcmlnaW5hbEJ1aWxkaW5nLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEhwOiB0YXJnZXRCdWlsZGluZ0luZm8uaHAsXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0QnVpbGRpbmdzKHAgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3QnVpbGRpbmdzID0geyAuLi5wIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdCdWlsZGluZ3Nbb3JpZ2luYWxCdWlsZGluZ1R5cGUgYXMgc3RyaW5nXSA9IChuZXdCdWlsZGluZ3Nbb3JpZ2luYWxCdWlsZGluZ1R5cGUgYXMgc3RyaW5nXSB8fCBbXSkuZmlsdGVyKGIgPT4gYi5pZCAhPT0gb3JpZ2luYWxCdWlsZGluZ0lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0J1aWxkaW5nc1t0YXJnZXRCdWlsZGluZ1R5cGUgYXMgc3RyaW5nXSA9IFsuLi4obmV3QnVpbGRpbmdzW3RhcmdldEJ1aWxkaW5nVHlwZSBhcyBzdHJpbmddIHx8IFtdKSwgbmV3QnVpbGRpbmddO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld0J1aWxkaW5ncztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICBhZGRUb0xvZyhgJHtvcmlnaW5hbEJ1aWxkaW5nLm5hbWV9IGhhcyBiZWVuIHVwZ3JhZGVkIHRvIGEgJHt0YXJnZXRCdWlsZGluZ0luZm8ubmFtZX0hYCwgdGFyZ2V0QnVpbGRpbmdJbmZvLmljb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgVXBncmFkZSB0byAke3RhcmdldEJ1aWxkaW5nSW5mby5uYW1lfSBjb21wbGV0ZS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdnYXRoZXInOiBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RyYWluX3ZpbGxhZ2VyJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY291bnQgfSA9IHRhc2sucGF5bG9hZCE7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmlsbGFnZXJOYW1lcyA9IGdldFJhbmRvbU5hbWVzKCd2aWxsYWdlcicsIGNvdW50ISk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmlsbGFnZXJzOiBWaWxsYWdlcltdID0gbmV3VmlsbGFnZXJOYW1lcy5tYXAobmFtZSA9PiAoeyBpZDogYCR7RGF0ZS5ub3coKX0tJHtuYW1lfWAsIG5hbWUsIGN1cnJlbnRUYXNrOiBudWxsIH0pKTtcbiAgICAgICAgICAgICAgICBzZXRVbml0cyhwID0+ICh7IC4uLnAsIHZpbGxhZ2VyczogWy4uLnAudmlsbGFnZXJzLCAuLi5uZXdWaWxsYWdlcnNdIH0pKTtcbiAgICAgICAgICAgICAgICBhZGRUb0xvZyhgJHtjb3VudH0gbmV3IHZpbGxhZ2VyKHMpIGhhdmUgam9pbmVkIHlvdXIgc2V0dGxlbWVudC5gLCAndmlsbGFnZXInKTtcbiAgICAgICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgJHtjb3VudH0gbmV3IHZpbGxhZ2VyKHMpIGFyZSByZWFkeSB0byB3b3JrLmApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAndHJhaW5fbWlsaXRhcnknOiB7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHsgdW5pdFR5cGUsIGNvdW50IH0gPSB0YXNrLnBheWxvYWQhO1xuICAgICAgICAgICAgICAgICBjb25zdCB1bml0SW5mbyA9IHVuaXRMaXN0LmZpbmQodSA9PiB1LmlkID09PSB1bml0VHlwZSkhO1xuICAgICAgICAgICAgICAgICBjb25zdCBuZXdVbml0TmFtZXMgPSBnZXRSYW5kb21OYW1lcygnc29sZGllcicsIGNvdW50ISk7XG4gICAgICAgICAgICAgICAgIGNvbnN0IG5ld1VuaXRzOiBNaWxpdGFyeVVuaXRbXSA9IG5ld1VuaXROYW1lcy5tYXAobmFtZSA9PiAoeyBpZDogYCR7RGF0ZS5ub3coKX0tJHt1bml0VHlwZX0tJHtuYW1lfWAsIG5hbWUsIHRpdGxlOiAnJywgdW5pdFR5cGU6IHVuaXRUeXBlISB9KSk7XG4gICAgICAgICAgICAgICAgIHNldFVuaXRzKHAgPT4gKHsgLi4ucCwgbWlsaXRhcnk6IFsuLi5wLm1pbGl0YXJ5LCAuLi5uZXdVbml0c10gfSkpO1xuICAgICAgICAgICAgICAgICBhZGRUb0xvZyhgJHtjb3VudH0gJHt1bml0SW5mby5uYW1lfShzKSBoYXZlIGJlZW4gdHJhaW5lZC5gLCB1bml0VHlwZSEpO1xuICAgICAgICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgJHtjb3VudH0gbmV3ICR7dW5pdEluZm8ubmFtZX0ocykgYXJlIHJlYWR5IGZvciBiYXR0bGUuYCk7XG4gICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYWR2YW5jZV9hZ2UnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQWdlcyA9IG1hc3RlckFnZUxpc3QuZmlsdGVyKGEgPT4gYS5pc0FjdGl2ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gYWN0aXZlQWdlcy5maW5kSW5kZXgoYWdlID0+IGFnZS5uYW1lID09PSBjdXJyZW50QWdlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhZ2VSZXN1bHQgPSBhY3RpdmVBZ2VzW2N1cnJlbnRJbmRleCArIDFdIHx8IHsgbmFtZTogJ0FnZSBvZiBMZWdlbmRzJywgZGVzY3JpcHRpb246ICdZb3VyIGNpdmlsaXphdGlvbiB0cmFuc2NlbmRzIGhpc3RvcnkgYW5kIGJlY29tZXMgYSBsZWdlbmQuJ307XG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEFnZShhZ2VSZXN1bHQubmFtZSk7XG4gICAgICAgICAgICAgICAgYWRkVG9Mb2coYFlvdSBoYXZlIGFkdmFuY2VkIHRvIHRoZSAke2FnZVJlc3VsdC5uYW1lfSFgLCAnYWdlJyk7XG4gICAgICAgICAgICAgICAgYWRkVG9Mb2coYWdlUmVzdWx0LmRlc2NyaXB0aW9uLCAnYWdlJyk7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYFdlbGNvbWUgdG8gdGhlICR7YWdlUmVzdWx0Lm5hbWV9IWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2N1cnJlbnRBZ2UsIGFkZFRvTG9nLCBidWlsZGluZ0xpc3QsIHVuaXRMaXN0LCBtYXN0ZXJBZ2VMaXN0LCBidWlsZGluZ3NdKTtcbiAgICBcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoZ2FtZVN0YXRlICE9PSBHYW1lU3RhdHVzLlBMQVlJTkcpIHtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25GcmFtZVJlZi5jdXJyZW50KSBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZVJlZi5jdXJyZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGdhbWVMb29wID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhVGltZSA9IG5vdyAtIGxhc3RUaWNrUmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICBsYXN0VGlja1JlZi5jdXJyZW50ID0gbm93O1xuXG4gICAgICAgICAgICBsZXQgY29tcGxldGVkVGFza3M6IEdhbWVUYXNrW10gPSBbXTtcbiAgICAgICAgICAgIGxldCByZXNvdXJjZURlbHRhc1RoaXNUaWNrOiBSZXNvdXJjZURlbHRhcyA9IHt9O1xuXG4gICAgICAgICAgICAvLyAtLS0gUGFzc2l2ZSBHZW5lcmF0aW9uIGFuZCBNYWludGVuYW5jZSAtLS1cbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoYnVpbGRpbmdzKS5mbGF0KCkuZm9yRWFjaChpbnN0YW5jZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbWFzdGVyQnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSBPYmplY3Qua2V5cyhidWlsZGluZ3MpLmZpbmQoa2V5ID0+IGJ1aWxkaW5nc1trZXkgYXMgc3RyaW5nXS5zb21lKGJJbnN0ID0+IGJJbnN0LmlkID09PSBpbnN0YW5jZS5pZCkpKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpZykgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gUGFzc2l2ZSBHZW5lcmF0aW9uXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5nZW5lcmF0ZXNSZXNvdXJjZSAmJiBjb25maWcuZ2VuZXJhdGVzUmVzb3VyY2UgIT09ICdub25lJyAmJiBjb25maWcuZ2VuZXJhdGlvblJhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYW1vdW50UGVyU2Vjb25kID0gY29uZmlnLmdlbmVyYXRpb25SYXRlIC8gNjA7XG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlRGVsdGFzVGhpc1RpY2tbY29uZmlnLmdlbmVyYXRlc1Jlc291cmNlXSA9IChyZXNvdXJjZURlbHRhc1RoaXNUaWNrW2NvbmZpZy5nZW5lcmF0ZXNSZXNvdXJjZV0gfHwgMCkgKyAoYW1vdW50UGVyU2Vjb25kIC8gMTAwMCkgKiBkZWx0YVRpbWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTWFpbnRlbmFuY2UgQ29zdHNcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLm1haW50ZW5hbmNlQ29zdCkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhjb25maWcubWFpbnRlbmFuY2VDb3N0KS5mb3JFYWNoKChbcmVzLCBjb3N0XSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29zdFBlclNlY29uZCA9IChjb3N0IHx8IDApIC8gNjA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZURlbHRhc1RoaXNUaWNrW3JlcyBhcyBrZXlvZiBSZXNvdXJjZXNdID0gKHJlc291cmNlRGVsdGFzVGhpc1RpY2tbcmVzIGFzIGtleW9mIFJlc291cmNlc10gfHwgMCkgLSAoY29zdFBlclNlY29uZCAvIDEwMDApICogZGVsdGFUaW1lO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2V0QWN0aXZlQnVmZnMocHJldiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3UmVzb3VyY2VCb29zdHMgPSBwcmV2LnJlc291cmNlQm9vc3Q/LmZpbHRlcihiID0+IGIuZW5kVGltZSA+IG5vdyk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1Jlc291cmNlQm9vc3RzPy5sZW5ndGggIT09IHByZXYucmVzb3VyY2VCb29zdD8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFRvTG9nKFwiQSByZXNvdXJjZSBnYXRoZXJpbmcgYm9udXMgaGFzIGV4cGlyZWQuXCIsICdzeXN0ZW0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ucHJldiwgcmVzb3VyY2VCb29zdDogbmV3UmVzb3VyY2VCb29zdHMgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCB0YXNrc0luUHJvZ3Jlc3MgPSBhY3RpdmVUYXNrcy5tYXAodGFzayA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSB0YXNrLnN0YXJ0VGltZSArIHRhc2suZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkVGFza3MucHVzaCh0YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0YXNrLnR5cGUgPT09ICdnYXRoZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSByZXNvdXJjZU5vZGVzLmZpbmQobiA9PiBuLmlkID09PSB0YXNrLnBheWxvYWQ/LnJlc291cmNlTm9kZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlsbGFnZXJDb3VudCA9IHRhc2sucGF5bG9hZD8udmlsbGFnZXJJZHM/Lmxlbmd0aCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUgfHwgdmlsbGFnZXJDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkVGFza3MucHVzaCh0YXNrKTsgcmV0dXJuIG51bGw7IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VSYXRlUGVyU2Vjb25kID0gR0FUSEVSX0lORk9bbm9kZS50eXBlXS5yYXRlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2l2Qm9udXNNdWx0aXBsaWVyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNpdmlsaXphdGlvbj8uYm9udXMudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhub2RlLnR5cGUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gY2l2aWxpemF0aW9uLmJvbnVzLm1hdGNoKC8oXFxkKyklLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2g/LlsxXSkgY2l2Qm9udXNNdWx0aXBsaWVyID0gMSArIChwYXJzZUludChtYXRjaFsxXSwgMTApIC8gMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtQm9vc3RNdWx0aXBsaWVyID0gYWN0aXZlQnVmZnMucmVzb3VyY2VCb29zdD8uZmluZChiID0+IGIucmVzb3VyY2UgPT09IG5vZGUudHlwZSk/Lm11bHRpcGxpZXIgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluYWxSYXRlUGVyU2Vjb25kID0gYmFzZVJhdGVQZXJTZWNvbmQgKiBjaXZCb251c011bHRpcGxpZXIgKiBpdGVtQm9vc3RNdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZURlbHRhc1RoaXNUaWNrW25vZGUudHlwZV0gPSAocmVzb3VyY2VEZWx0YXNUaGlzVGlja1tub2RlLnR5cGVdIHx8IDApICsgKGZpbmFsUmF0ZVBlclNlY29uZCAvIDEwMDApICogZGVsdGFUaW1lICogdmlsbGFnZXJDb3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbikgYXMgR2FtZVRhc2tbXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJlc291cmNlRGVsdGFzVGhpc1RpY2spLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMocmVzb3VyY2VEZWx0YXNUaGlzVGljayk7XG4gICAgICAgICAgICAgICAgc2V0UmVzb3VyY2VOb2RlcyhwcmV2Tm9kZXMgPT4gcHJldk5vZGVzLm1hcChub2RlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYW1vdW50VG9EZWNyZW1lbnQgPSByZXNvdXJjZURlbHRhc1RoaXNUaWNrW25vZGUudHlwZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghYW1vdW50VG9EZWNyZW1lbnQpIHJldHVybiBub2RlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdBbW91bnQgPSBub2RlLmFtb3VudCAtIGFtb3VudFRvRGVjcmVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3QW1vdW50IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tJZCA9IGBnYXRoZXItJHtub2RlLmlkfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXNrID0gdGFza3NJblByb2dyZXNzLmZpbmQodCA9PiB0LmlkID09PSB0YXNrSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvTG9nKGAke3Rhc2sucGF5bG9hZD8udmlsbGFnZXJJZHM/Lmxlbmd0aCB8fCAwfSB2aWxsYWdlcihzKSBkZXBsZXRlZCBhICR7bm9kZS50eXBlfSBzb3VyY2UsIGdhaW5pbmcgJHtNYXRoLmZsb29yKG5vZGUuYW1vdW50KX0gJHtub2RlLnR5cGV9LmAsIG5vZGUudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYEEgJHtub2RlLnR5cGV9IHNvdXJjZSBoYXMgYmVlbiBmdWxseSBkZXBsZXRlZC5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRUYXNrcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubm9kZSwgYW1vdW50OiBuZXdBbW91bnQgfTtcbiAgICAgICAgICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbikgYXMgUmVzb3VyY2VOb2RlW10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBmaW5hbEFjdGl2ZVRhc2tzID0gdGFza3NJblByb2dyZXNzLmZpbHRlcih0ID0+ICFjb21wbGV0ZWRUYXNrcy5zb21lKGN0ID0+IGN0LmlkID09PSB0LmlkKSk7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhmaW5hbEFjdGl2ZVRhc2tzKTtcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZWRUYXNrcy5sZW5ndGggPiAwKSBjb21wbGV0ZWRUYXNrcy5mb3JFYWNoKGhhbmRsZVRhc2tDb21wbGV0aW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWVSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShnYW1lTG9vcCk7XG4gICAgICAgIH07XG4gICAgICAgIGFuaW1hdGlvbkZyYW1lUmVmLmN1cnJlbnQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZ2FtZUxvb3ApO1xuICAgICAgICByZXR1cm4gKCkgPT4geyBpZiAoYW5pbWF0aW9uRnJhbWVSZWYuY3VycmVudCkgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWVSZWYuY3VycmVudCk7IH07XG4gICAgfSwgW2dhbWVTdGF0ZSwgYWN0aXZlVGFza3MsIHJlc291cmNlTm9kZXMsIGhhbmRsZVRhc2tDb21wbGV0aW9uLCBhZGRUb0xvZywgdXBkYXRlUmVzb3VyY2VzLCB1bml0cy52aWxsYWdlcnMsIGNpdmlsaXphdGlvbiwgYWN0aXZlQnVmZnMsIGJ1aWxkaW5ncywgbWFzdGVyQnVpbGRpbmdMaXN0XSk7XG5cbiAgICBjb25zdCBoYW5kbGVOZXdFdmVudCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKCFjaXZpbGl6YXRpb24gfHwgY3VycmVudEV2ZW50KSByZXR1cm47XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gZ2V0UHJlZGVmaW5lZEdhbWVFdmVudCgpO1xuICAgICAgICBzZXRDdXJyZW50RXZlbnQoZXZlbnQpO1xuICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cygnQSBuZXcgZXZlbnQgcmVxdWlyZXMgeW91ciBhdHRlbnRpb24hJyk7XG4gICAgfSwgW2NpdmlsaXphdGlvbiwgY3VycmVudEV2ZW50XSk7XG4gICAgXG4gICAgY29uc3Qgc2NoZWR1bGVOZXh0RXZlbnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmIChldmVudFRpbWVyUmVmLmN1cnJlbnQpIGNsZWFyVGltZW91dChldmVudFRpbWVyUmVmLmN1cnJlbnQpO1xuICAgICAgICBldmVudFRpbWVyUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IGhhbmRsZU5ld0V2ZW50KCksICgxMCArIE1hdGgucmFuZG9tKCkgKiAxNSkgKiAxMDAwKTtcbiAgICB9LCBbaGFuZGxlTmV3RXZlbnRdKTtcblxuICAgIGNvbnN0IGdlbmVyYXRlUmVzb3VyY2VOb2RlcyA9IChleGlzdGluZ1Bvc2l0aW9uczogU2V0PHN0cmluZz4pOiBSZXNvdXJjZU5vZGVbXSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGVzOiBSZXNvdXJjZU5vZGVbXSA9IFtdO1xuICAgICAgICBjb25zdCB0eXBlczogUmVzb3VyY2VOb2RlVHlwZVtdID0gWydmb29kJywgJ3dvb2QnLCAnZ29sZCcsICdzdG9uZSddO1xuICAgICAgICBjb25zdCBudW1Ob2RlcyA9IDIwICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU5vZGVzOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwb3M6IHt4OiBudW1iZXIsIHk6IG51bWJlcn07XG4gICAgICAgICAgICBkbyB7IHBvcyA9IHsgeDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTUFQX0RJTUVOU0lPTlMud2lkdGgpLCB5OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNQVBfRElNRU5TSU9OUy5oZWlnaHQpIH0gfSB3aGlsZSAoZXhpc3RpbmdQb3NpdGlvbnMuaGFzKGAke3Bvcy54fSwke3Bvcy55fWApKTtcbiAgICAgICAgICAgIGV4aXN0aW5nUG9zaXRpb25zLmFkZChgJHtwb3MueH0sJHtwb3MueX1gKTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0eXBlcy5sZW5ndGgpXTtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goeyBpZDogYCR7RGF0ZS5ub3coKX0tbm9kZS0ke2l9YCwgdHlwZSwgcG9zaXRpb246IHBvcywgYW1vdW50OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyMDAxKSArIDUwMCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVN0YXJ0TmV3R2FtZSA9IGFzeW5jIChzYXZlTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChhbGxTYXZlcy5pbmNsdWRlcyhzYXZlTmFtZSkpIHsgYWRkTm90aWZpY2F0aW9uKGBBIHNhZ2EgbmFtZWQgXCIke3NhdmVOYW1lfVwiIGFscmVhZHkgZXhpc3RzLmApOyByZXR1cm47IH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvbmZpZ3MgPSBhd2FpdCBmZXRjaFNhdmVzQW5kQ29uZmlncygpO1xuICAgICAgICBzZXRHYW1lU3RhdGUoR2FtZVN0YXR1cy5MT0FESU5HKTtcbiAgICAgICAgc2V0Q3VycmVudFNhdmVOYW1lKHNhdmVOYW1lKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxvY2FsQWdlUHJvZ3Jlc3Npb25MaXN0ID0gY29uZmlncy5hbGxBZ2VDb25maWdzLmZpbHRlcihhID0+IGEuaXNBY3RpdmUpO1xuXG4gICAgICAgIGNvbnN0IGNpdiA9IGdldFByZWRlZmluZWRDaXZpbGl6YXRpb24oKTtcbiAgICAgICAgc2V0Q2l2aWxpemF0aW9uKGNpdik7XG4gICAgICAgIHNldFJlc291cmNlcyh7IGZvb2Q6IDIwMCwgd29vZDogMTUwLCBnb2xkOiA1MCwgc3RvbmU6IDEwMCB9KTtcbiAgICAgICAgY29uc3QgaW5pdGlhbFZpbGxhZ2VycyA9IGdldFJhbmRvbU5hbWVzKCd2aWxsYWdlcicsIDMpLm1hcChuYW1lID0+ICh7IGlkOiBgJHtEYXRlLm5vdygpfS0ke25hbWV9YCwgbmFtZSwgY3VycmVudFRhc2s6IG51bGwgfSkpO1xuICAgICAgICBzZXRVbml0cyh7IHZpbGxhZ2VyczogaW5pdGlhbFZpbGxhZ2VycywgbWlsaXRhcnk6IFtdIH0pO1xuICAgICAgICBjb25zdCB0Y1Bvc2l0aW9uID0geyB4OiBNYXRoLmZsb29yKE1BUF9ESU1FTlNJT05TLndpZHRoIC8gMiksIHk6IE1hdGguZmxvb3IoTUFQX0RJTUVOU0lPTlMuaGVpZ2h0IC8gMikgfTtcbiAgICAgICAgY29uc3QgdGNJbmZvID0gY29uZmlncy5hbGxCdWlsZGluZ0NvbmZpZ3MuZmluZChiID0+IGIuaWQgPT09ICd0b3duQ2VudGVyJykhO1xuICAgICAgICBjb25zdCBpbml0aWFsVEMgPSB7IGlkOiBgJHtEYXRlLm5vdygpfS10Y2AsIG5hbWU6IGdldFJhbmRvbU5hbWVzKCdidWlsZGluZycsIDEpWzBdLCBwb3NpdGlvbjogdGNQb3NpdGlvbiwgY3VycmVudEhwOiB0Y0luZm8uaHAgfTtcbiAgICAgICAgc2V0QnVpbGRpbmdzKHsuLi5pbml0aWFsQnVpbGRpbmdzU3RhdGUsIHRvd25DZW50ZXI6IFtpbml0aWFsVENdfSk7XG4gICAgICAgIHNldFJlc291cmNlTm9kZXMoZ2VuZXJhdGVSZXNvdXJjZU5vZGVzKG5ldyBTZXQoW2Ake3RjUG9zaXRpb24ueH0sJHt0Y1Bvc2l0aW9uLnl9YF0pKSk7XG4gICAgICAgIHNldEN1cnJlbnRBZ2UobG9jYWxBZ2VQcm9ncmVzc2lvbkxpc3RbMF0/Lm5hbWUgfHwgSU5JVElBTF9BR0VTWzBdLm5hbWUpO1xuICAgICAgICBzZXRHYW1lTG9nKFtdKTsgc2V0Q3VycmVudEV2ZW50KG51bGwpOyBzZXRVbmxpbWl0ZWRSZXNvdXJjZXMoZmFsc2UpOyBzZXRBY3RpdmVUYXNrcyhbXSk7IHNldEludmVudG9yeShbXSk7IHNldEFjdGl2ZUJ1ZmZzKHsgcmVzb3VyY2VCb29zdDogW10gfSk7XG4gICAgICAgIGFkZFRvTG9nKGAke2Npdi5uYW1lfSBoYXMgYmVlbiBmb3VuZGVkIWAsICdzeXN0ZW0nKTtcbiAgICAgICAgYWRkVG9Mb2coJ1lvdXIgc3RvcnkgYmVnaW5zLi4uJywgJ3N5c3RlbScpO1xuICAgICAgICBzZXRHYW1lU3RhdGUoR2FtZVN0YXR1cy5QTEFZSU5HKTtcbiAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoJ1lvdXIgc2V0dGxlbWVudCBhd2FpdHMgeW91ciBjb21tYW5kLicpO1xuICAgIH07XG5cbiAgICBjb25zdCBpc1ZpbGxhZ2VyQnVzeSA9IHVzZUNhbGxiYWNrKCh2aWxsYWdlcklkOiBzdHJpbmcpOiBib29sZWFuID0+ICEhdW5pdHMudmlsbGFnZXJzLmZpbmQodiA9PiB2LmlkID09PSB2aWxsYWdlcklkKT8uY3VycmVudFRhc2ssIFt1bml0cy52aWxsYWdlcnNdKTtcblxuICAgIGNvbnN0IGdldFZpbGxhZ2VyVGFza0RldGFpbHMgPSB1c2VDYWxsYmFjaygodmlsbGFnZXJJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgICAgY29uc3QgdmlsbGFnZXIgPSB1bml0cy52aWxsYWdlcnMuZmluZCh2ID0+IHYuaWQgPT09IHZpbGxhZ2VySWQpO1xuICAgICAgICBpZiAoIXZpbGxhZ2VyPy5jdXJyZW50VGFzaykgcmV0dXJuICdJZGxlJztcbiAgICAgICAgY29uc3QgdGFzayA9IGFjdGl2ZVRhc2tzLmZpbmQodCA9PiB0LmlkID09PSB2aWxsYWdlci5jdXJyZW50VGFzayk7XG4gICAgICAgIGlmICghdGFzaykgcmV0dXJuICdJZGxlIChGaW5hbGl6aW5nIFRhc2spJztcbiAgICAgICAgaWYgKHRhc2sudHlwZSA9PT0gJ2J1aWxkJykgcmV0dXJuIGBCdXN5OiBDb25zdHJ1Y3RpbmcgJHtidWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IHRhc2sucGF5bG9hZCEuYnVpbGRpbmdUeXBlKT8ubmFtZSB8fCAnYSBidWlsZGluZyd9YDtcbiAgICAgICAgaWYgKHRhc2sudHlwZSA9PT0gJ2dhdGhlcicpIHJldHVybiBgQnVzeTogR2F0aGVyaW5nICR7cmVzb3VyY2VOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gdGFzay5wYXlsb2FkIS5yZXNvdXJjZU5vZGVJZCk/LnR5cGUgfHwgJ3Jlc291cmNlcyd9YDtcbiAgICAgICAgcmV0dXJuICdJZGxlJztcbiAgICB9LCBbYWN0aXZlVGFza3MsIHJlc291cmNlTm9kZXMsIHVuaXRzLnZpbGxhZ2VycywgYnVpbGRpbmdMaXN0XSk7XG5cbiAgICBjb25zdCBoYW5kbGVSZXN1bWVHYW1lID0gYXN5bmMgKHNhdmVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgY29uZmlncyA9IGF3YWl0IGZldGNoU2F2ZXNBbmRDb25maWdzKCk7XG4gICAgICAgIGNvbnN0IHNhdmVkU3RhdGUgPSBhd2FpdCBsb2FkR2FtZVN0YXRlKHNhdmVOYW1lKSBhcyBGdWxsR2FtZVN0YXRlO1xuICAgICAgICBpZiAoc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgc2V0R2FtZVN0YXRlKEdhbWVTdGF0dXMuTE9BRElORyk7XG4gICAgICAgICAgICBzZXRDdXJyZW50U2F2ZU5hbWUoc2F2ZU5hbWUpO1xuICAgICAgICAgICAgc2V0Q2l2aWxpemF0aW9uKHNhdmVkU3RhdGUuY2l2aWxpemF0aW9uKTtcbiAgICAgICAgICAgIHNldFJlc291cmNlcyhzYXZlZFN0YXRlLnJlc291cmNlcyk7XG4gICAgICAgICAgICBjb25zdCBtaWdyYXRlZFZpbGxhZ2VycyA9IChzYXZlZFN0YXRlLnVuaXRzLnZpbGxhZ2VycyB8fCBbXSkubWFwKHYgPT4gKHsuLi52LCBjdXJyZW50VGFzazogdi5jdXJyZW50VGFzayAhPT0gdW5kZWZpbmVkID8gdi5jdXJyZW50VGFzayA6IG51bGx9KSk7XG4gICAgICAgICAgICBjb25zdCBtaWdyYXRlZFRhc2tzID0gKHNhdmVkU3RhdGUuYWN0aXZlVGFza3MgfHwgW10pLm1hcCh0ID0+IHQudHlwZSA9PT0gJ2J1aWxkJyAmJiAhdC5wYXlsb2FkPy52aWxsYWdlcklkcyA/IHsgLi4udCwgcGF5bG9hZDogeyAuLi50LnBheWxvYWQsIHZpbGxhZ2VySWRzOiBbXSB9IH0gOiB0KTtcbiAgICAgICAgICAgIG1pZ3JhdGVkVGFza3MuZm9yRWFjaCh0YXNrID0+IHRhc2sucGF5bG9hZD8udmlsbGFnZXJJZHM/LmZvckVhY2godmlkID0+IHsgY29uc3QgdiA9IG1pZ3JhdGVkVmlsbGFnZXJzLmZpbmQodiA9PiB2LmlkID09PSB2aWQpOyBpZih2KSB2LmN1cnJlbnRUYXNrID0gdGFzay5pZDsgfSkpO1xuICAgICAgICAgICAgc2V0VW5pdHMoeyAuLi5zYXZlZFN0YXRlLnVuaXRzLCB2aWxsYWdlcnM6IG1pZ3JhdGVkVmlsbGFnZXJzIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBjb25zdHJ1Y3Rpb25UYXNrcyA9IG1pZ3JhdGVkVGFza3MuZmlsdGVyKHQgPT4gdC50eXBlID09PSAnYnVpbGQnKTtcbiAgICAgICAgICAgIGNvbnN0IG9jY3VwaWVkQ2VsbHMgPSBuZXcgU2V0KFsuLi5PYmplY3QudmFsdWVzKHNhdmVkU3RhdGUuYnVpbGRpbmdzIHx8IHt9KS5mbGF0KCkubWFwKChiOiBhbnkpID0+IGAke2IucG9zaXRpb24ueH0sJHtiLnBvc2l0aW9uLnl9YCksIC4uLmNvbnN0cnVjdGlvblRhc2tzLm1hcCh0ID0+IGAke3QucGF5bG9hZCEucG9zaXRpb24hLnh9LCR7dC5wYXlsb2FkIS5wb3NpdGlvbiEueX1gKV0pO1xuICAgICAgICAgICAgbGV0IGZpbmFsQnVpbGRpbmdzID0geyAuLi5pbml0aWFsQnVpbGRpbmdzU3RhdGUsIC4uLihzYXZlZFN0YXRlLmJ1aWxkaW5ncyB8fCB7fSkgfTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGZpbmFsQnVpbGRpbmdzKS5mb3JFYWNoKGJUeXBlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gY29uZmlncy5hbGxCdWlsZGluZ0NvbmZpZ3MuZmluZChiID0+IGIuaWQgPT09IGJUeXBlKTtcbiAgICAgICAgICAgICAgICBpZihpbmZvKSBmaW5hbEJ1aWxkaW5nc1tiVHlwZV0gPSBmaW5hbEJ1aWxkaW5nc1tiVHlwZV0ubWFwKGIgPT4gKHsgLi4uYiwgY3VycmVudEhwOiBiLmN1cnJlbnRIcCA9PT0gdW5kZWZpbmVkID8gaW5mby5ocCA6IGIuY3VycmVudEhwIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFmaW5hbEJ1aWxkaW5ncy50b3duQ2VudGVyIHx8IGZpbmFsQnVpbGRpbmdzLnRvd25DZW50ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRjUG9zID0geyB4OiAxMCwgeTogNSB9OyB3aGlsZSAob2NjdXBpZWRDZWxscy5oYXMoYCR7dGNQb3MueH0sJHt0Y1Bvcy55fWApKSB7IHRjUG9zLngrKzsgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRjSW5mbyA9IGNvbmZpZ3MuYWxsQnVpbGRpbmdDb25maWdzLmZpbmQoYiA9PiBiLmlkID09PSAndG93bkNlbnRlcicpITtcbiAgICAgICAgICAgICAgICBmaW5hbEJ1aWxkaW5ncy50b3duQ2VudGVyID0gW3sgaWQ6IGAke0RhdGUubm93KCl9LXRjYCwgbmFtZTogZ2V0UmFuZG9tTmFtZXMoJ2J1aWxkaW5nJywgMSlbMF0sIHBvc2l0aW9uOiB0Y1BvcywgY3VycmVudEhwOiB0Y0luZm8uaHAgfV07XG4gICAgICAgICAgICAgICAgb2NjdXBpZWRDZWxscy5hZGQoYCR7dGNQb3MueH0sJHt0Y1Bvcy55fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0QnVpbGRpbmdzKGZpbmFsQnVpbGRpbmdzKTtcblxuICAgICAgICAgICAgc2V0UmVzb3VyY2VOb2Rlcygoc2F2ZWRTdGF0ZS5yZXNvdXJjZU5vZGVzIHx8IFtdKS5sZW5ndGggPT09IDAgPyBnZW5lcmF0ZVJlc291cmNlTm9kZXMob2NjdXBpZWRDZWxscykgOiAoc2F2ZWRTdGF0ZS5yZXNvdXJjZU5vZGVzIHx8IFtdKSk7XG4gICAgICAgICAgICBzZXRDdXJyZW50QWdlKHNhdmVkU3RhdGUuY3VycmVudEFnZSk7IHNldEdhbWVMb2coc2F2ZWRTdGF0ZS5nYW1lTG9nKTsgc2V0QWN0aXZlVGFza3MobWlncmF0ZWRUYXNrcyk7XG4gICAgICAgICAgICBzZXRJbnZlbnRvcnkoc2F2ZWRTdGF0ZS5pbnZlbnRvcnkgfHwgW10pOyBzZXRBY3RpdmVCdWZmcyhzYXZlZFN0YXRlLmFjdGl2ZUJ1ZmZzIHx8IHsgcmVzb3VyY2VCb29zdDogW10gfSk7XG4gICAgICAgICAgICBzZXRDdXJyZW50RXZlbnQobnVsbCk7IHNldEFjdGl2aXR5U3RhdHVzKCdXZWxjb21lIGJhY2sgdG8geW91ciBzYWdhLicpO1xuICAgICAgICAgICAgc2V0R2FtZVN0YXRlKEdhbWVTdGF0dXMuUExBWUlORyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhZGROb3RpZmljYXRpb24oYENvdWxkIG5vdCBmaW5kIGEgc2F2ZWQgZ2FtZSBuYW1lZCBcIiR7c2F2ZU5hbWV9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGdhbWVTdGF0ZSAhPT0gR2FtZVN0YXR1cy5QTEFZSU5HKSByZXR1cm47XG4gICAgICAgIGlmICghY3VycmVudEV2ZW50KSBzY2hlZHVsZU5leHRFdmVudCgpO1xuICAgICAgICBlbHNlIGlmIChldmVudFRpbWVyUmVmLmN1cnJlbnQpIGNsZWFyVGltZW91dChldmVudFRpbWVyUmVmLmN1cnJlbnQpO1xuICAgICAgICByZXR1cm4gKCkgPT4geyBpZiAoZXZlbnRUaW1lclJlZi5jdXJyZW50KSBjbGVhclRpbWVvdXQoZXZlbnRUaW1lclJlZi5jdXJyZW50KTsgfTtcbiAgICB9LCBbZ2FtZVN0YXRlLCBjdXJyZW50RXZlbnQsIHNjaGVkdWxlTmV4dEV2ZW50XSk7XG5cbiAgICBjb25zdCBoYW5kbGVFdmVudENob2ljZSA9IChjaG9pY2U6IEdhbWVFdmVudENob2ljZSkgPT4ge1xuICAgICAgICBpZiAoY2hvaWNlLmNvc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmcgPSAoT2JqZWN0LmtleXMoY2hvaWNlLmNvc3QpIGFzIChrZXlvZiBSZXNvdXJjZXMpW10pLmZpbHRlcihyZXMgPT4gcmVzb3VyY2VzW3Jlc10gPCAoY2hvaWNlLmNvc3QhW3Jlc10gfHwgMCkpO1xuICAgICAgICAgICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkgeyBhZGROb3RpZmljYXRpb24oYFlvdSBsYWNrIHRoZSByZXF1aXJlZCByZXNvdXJjZXM6ICR7bWlzc2luZy5qb2luKCcsICcpfS5gKTsgcmV0dXJuOyB9XG4gICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMoT2JqZWN0LmVudHJpZXMoY2hvaWNlLmNvc3QpLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+ICh7Li4uYWNjLCBba106IC12fSksIHt9KSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNTdWNjZXNzID0gY2hvaWNlLnN1Y2Nlc3NDaGFuY2UgPT09IHVuZGVmaW5lZCB8fCBNYXRoLnJhbmRvbSgpIDwgY2hvaWNlLnN1Y2Nlc3NDaGFuY2U7XG4gICAgICAgIGNvbnN0IGVmZmVjdHMgPSBpc1N1Y2Nlc3MgPyBjaG9pY2Uuc3VjY2Vzc0VmZmVjdHMgOiBjaG9pY2UuZmFpbHVyZUVmZmVjdHM7XG4gICAgICAgIGlmICghZWZmZWN0cykgeyBzZXRDdXJyZW50RXZlbnQobnVsbCk7IHNjaGVkdWxlTmV4dEV2ZW50KCk7IHJldHVybjsgfVxuXG4gICAgICAgIGxldCBsb2dNZXNzYWdlID0gYERlY2lzaW9uOiBcIiR7Y2hvaWNlLnRleHR9XCIuIE91dGNvbWU6ICR7aXNTdWNjZXNzID8gJ1N1Y2Nlc3MnIDogJ0ZhaWx1cmUnfS4gJHtlZmZlY3RzLmxvZ31gO1xuICAgICAgICBlZmZlY3RzLnJld2FyZHMuZm9yRWFjaCgocmV3YXJkOiBSZXdhcmQpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXdhcmQudHlwZSA9PT0gJ3Jlc291cmNlJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IEFycmF5LmlzQXJyYXkocmV3YXJkLmFtb3VudCkgPyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAocmV3YXJkLmFtb3VudFsxXSAtIHJld2FyZC5hbW91bnRbMF0gKyAxKSkgKyByZXdhcmQuYW1vdW50WzBdIDogcmV3YXJkLmFtb3VudDtcbiAgICAgICAgICAgICAgICBpZiAoYW1vdW50ICE9PSAwKSB7IHVwZGF0ZVJlc291cmNlcyh7IFtyZXdhcmQucmVzb3VyY2VdOiBhbW91bnQgfSk7IGxvZ01lc3NhZ2UgKz0gYCBZb3UgJHthbW91bnQgPiAwID8gJ2dhaW5lZCcgOiAnbG9zdCd9ICR7TWF0aC5hYnMoYW1vdW50KX0gJHtyZXdhcmQucmVzb3VyY2V9LmA7IH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmV3YXJkLnR5cGUgPT09ICdpdGVtJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1JbmZvID0gR0FNRV9JVEVNU1tyZXdhcmQuaXRlbUlkXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3SXRlbXMgPSBBcnJheS5mcm9tKHtsZW5ndGg6IHJld2FyZC5hbW91bnR9LCAoXywgaSkgPT4gKHsgLi4uaXRlbUluZm8sIGlkOiBgJHtyZXdhcmQuaXRlbUlkfS0ke0RhdGUubm93KCl9LSR7aX1gIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW52ZW50b3J5KHByZXYgPT4gWy4uLnByZXYsIC4uLm5ld0l0ZW1zXSk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ01lc3NhZ2UgKz0gYCBZb3UgcmVjZWl2ZWQgJHtyZXdhcmQuYW1vdW50fXggJHtpdGVtSW5mby5uYW1lfSFgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmV3YXJkLnR5cGUgPT09ICd1bml0JyAmJiByZXdhcmQudW5pdFR5cGUgPT09ICd2aWxsYWdlcicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWaWxsYWdlcnMgPSBnZXRSYW5kb21OYW1lcygndmlsbGFnZXInLCByZXdhcmQuYW1vdW50KS5tYXAobmFtZSA9PiAoeyBpZDogYCR7RGF0ZS5ub3coKX0tJHtuYW1lfWAsIG5hbWUsIGN1cnJlbnRUYXNrOiBudWxsIH0pKTtcbiAgICAgICAgICAgICAgICBzZXRVbml0cyhwID0+ICh7IC4uLnAsIHZpbGxhZ2VyczogWy4uLnAudmlsbGFnZXJzLCAuLi5uZXdWaWxsYWdlcnNdIH0pKTtcbiAgICAgICAgICAgICAgICBsb2dNZXNzYWdlICs9IGAgWW91IGdhaW5lZCAke3Jld2FyZC5hbW91bnR9IHZpbGxhZ2VyKHMpLmA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJld2FyZC50eXBlID09PSAnYnVpbGRpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gYnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSByZXdhcmQuYnVpbGRpbmdJZCk7XG4gICAgICAgICAgICAgICAgaWYgKGJ1aWxkaW5nSW5mbykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvY2N1cGllZENlbGxzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoYnVpbGRpbmdzKS5mbGF0KCkuZm9yRWFjaChiID0+IG9jY3VwaWVkQ2VsbHMuYWRkKGAke2IucG9zaXRpb24ueH0sJHtiLnBvc2l0aW9uLnl9YCkpO1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVUYXNrcy5maWx0ZXIodCA9PiB0LnR5cGUgPT09ICdidWlsZCcpLmZvckVhY2godCA9PiB0LnBheWxvYWQ/LnBvc2l0aW9uICYmIG9jY3VwaWVkQ2VsbHMuYWRkKGAke3QucGF5bG9hZC5wb3NpdGlvbi54fSwke3QucGF5bG9hZC5wb3NpdGlvbi55fWApKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VOb2Rlcy5mb3JFYWNoKG4gPT4gb2NjdXBpZWRDZWxscy5hZGQoYCR7bi5wb3NpdGlvbi54fSwke24ucG9zaXRpb24ueX1gKSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgcGxhY2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTUFQX0RJTUVOU0lPTlMud2lkdGggKiBNQVBfRElNRU5TSU9OUy5oZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BUF9ESU1FTlNJT05TLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNQVBfRElNRU5TSU9OUy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvY2N1cGllZENlbGxzLmhhcyhgJHt4fSwke3l9YCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbbmFtZV0gPSBnZXRSYW5kb21OYW1lcygnYnVpbGRpbmcnLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdCdWlsZGluZzogQnVpbGRpbmdJbnN0YW5jZSA9IHsgaWQ6IGByZXdhcmQtJHtEYXRlLm5vdygpfWAsIG5hbWUsIHBvc2l0aW9uOiB7eCx5fSwgY3VycmVudEhwOiBidWlsZGluZ0luZm8uaHAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRCdWlsZGluZ3MocCA9PiAoeyAuLi5wLCBbcmV3YXJkLmJ1aWxkaW5nSWQgYXMgc3RyaW5nXTogWy4uLihwW3Jld2FyZC5idWlsZGluZ0lkIGFzIHN0cmluZ10gfHwgW10pLCBuZXdCdWlsZGluZ119KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nTWVzc2FnZSArPSBgIFlvdSB3ZXJlIGdpZnRlZCBhIG5ldyAke2J1aWxkaW5nSW5mby5uYW1lfSFgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGFjZWQpIGxvZ01lc3NhZ2UgKz0gYCBZb3Ugd2VyZSB0byBiZSBnaWZ0ZWQgYSAke2J1aWxkaW5nSW5mby5uYW1lfSwgYnV0IHRoZXJlIHdhcyBubyByb29tIHRvIGJ1aWxkIGl0IWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGFkZFRvTG9nKGxvZ01lc3NhZ2UsICdldmVudCcpOyBzZXRBY3Rpdml0eVN0YXR1cyhlZmZlY3RzLmxvZyk7IHNldEN1cnJlbnRFdmVudChudWxsKTsgc2NoZWR1bGVOZXh0RXZlbnQoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlSW5pdGlhdGVCdWlsZCA9ICh2aWxsYWdlcklkOiBzdHJpbmcsIHJlY3Q6IERPTVJlY3QpID0+IHtcbiAgICAgICAgaWYgKGlzVmlsbGFnZXJCdXN5KHZpbGxhZ2VySWQpKSB7IGFkZE5vdGlmaWNhdGlvbihcIlRoaXMgdmlsbGFnZXIgaXMgYWxyZWFkeSBidXN5LlwiKTsgcmV0dXJuOyB9XG4gICAgICAgIHNldEJ1aWxkUGFuZWxTdGF0ZSh7IGlzT3BlbjogdHJ1ZSwgdmlsbGFnZXJJZCwgYW5jaG9yUmVjdDogcmVjdCB9KTtcbiAgICAgICAgc2V0VW5pdE1hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBoYW5kbGVTdGFydFBsYWNlbWVudCA9IChidWlsZGluZ0lkOiBCdWlsZGluZ1R5cGUgfCBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgdmlsbGFnZXJJZCA9IGJ1aWxkUGFuZWxTdGF0ZS52aWxsYWdlcklkOyBpZiAoIXZpbGxhZ2VySWQpIHJldHVybjtcbiAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gYnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSBidWlsZGluZ0lkKTsgaWYgKCFidWlsZGluZ0luZm8pIHJldHVybjtcblxuICAgICAgICBjb25zdCBleGlzdGluZ0NvdW50ID0gYnVpbGRpbmdzW2J1aWxkaW5nSW5mby5pZCBhcyBzdHJpbmddPy5sZW5ndGggfHwgMDtcbiAgICAgICAgY29uc3QgY29uc3RydWN0aW5nQ291bnQgPSBhY3RpdmVUYXNrcy5maWx0ZXIodCA9PiB0LnR5cGUgPT09ICdidWlsZCcgJiYgdC5wYXlsb2FkPy5idWlsZGluZ1R5cGUgPT09IGJ1aWxkaW5nSW5mby5pZCkubGVuZ3RoO1xuICAgICAgICBjb25zdCB0b3RhbENvdW50ID0gZXhpc3RpbmdDb3VudCArIGNvbnN0cnVjdGluZ0NvdW50O1xuICAgICAgICBjb25zdCBsaW1pdCA9IGJ1aWxkaW5nSW5mby5idWlsZExpbWl0IHx8IDA7XG5cbiAgICAgICAgaWYgKGxpbWl0ID4gMCAmJiB0b3RhbENvdW50ID49IGxpbWl0KSB7XG4gICAgICAgICAgICBhZGROb3RpZmljYXRpb24oYFlvdSBoYXZlIHJlYWNoZWQgdGhlIGJ1aWxkIGxpbWl0IGZvciAke2J1aWxkaW5nSW5mby5uYW1lfSAoJHtsaW1pdH0pLmApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWlzc2luZyA9IHVubGltaXRlZFJlc291cmNlcyA/IFtdIDogKE9iamVjdC5rZXlzKGJ1aWxkaW5nSW5mby5jb3N0KSBhcyAoa2V5b2YgUmVzb3VyY2VzKVtdKS5maWx0ZXIocmVzID0+IHJlc291cmNlc1tyZXNdIDwgKGJ1aWxkaW5nSW5mby5jb3N0W3Jlc10gfHwgMCkpO1xuICAgICAgICBpZiAobWlzc2luZy5sZW5ndGggPiAwKSB7IGFkZE5vdGlmaWNhdGlvbihgTmVlZCBtb3JlICR7bWlzc2luZy5qb2luKCcsICcpfS5gKTsgcmV0dXJuOyB9XG4gICAgICAgIFxuICAgICAgICBzZXRQbGF5ZXJBY3Rpb24oeyBtb2RlOiAnYnVpbGQnLCBidWlsZGluZ1R5cGU6IGJ1aWxkaW5nSWQsIHZpbGxhZ2VySWQgfSk7XG4gICAgICAgIHNldEJ1aWxkUGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHZpbGxhZ2VySWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGBTZWxlY3QgYSBsb2NhdGlvbiB0byBidWlsZCBhICR7YnVpbGRpbmdJbmZvLm5hbWV9LiBSaWdodC1jbGljayB0byBjYW5jZWwuYCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUNvbmZpcm1QbGFjZW1lbnQgPSAocG9zaXRpb246IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSkgPT4ge1xuICAgICAgICBpZiAocGxheWVyQWN0aW9uPy5tb2RlICE9PSAnYnVpbGQnKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgYnVpbGRpbmdUeXBlLCB2aWxsYWdlcklkIH0gPSBwbGF5ZXJBY3Rpb247XG4gICAgICAgIGNvbnN0IGJ1aWxkaW5nSW5mbyA9IGJ1aWxkaW5nTGlzdC5maW5kKGIgPT4gYi5pZCA9PT0gYnVpbGRpbmdUeXBlKTtcbiAgICAgICAgY29uc3QgYnVpbGRlciA9IHVuaXRzLnZpbGxhZ2Vycy5maW5kKHYgPT4gdi5pZCA9PT0gdmlsbGFnZXJJZCk7XG4gICAgICAgIGlmICghYnVpbGRpbmdJbmZvIHx8ICFidWlsZGVyKSByZXR1cm47XG4gICAgICAgIGlmICghdW5saW1pdGVkUmVzb3VyY2VzKSB1cGRhdGVSZXNvdXJjZXMoT2JqZWN0LmVudHJpZXMoYnVpbGRpbmdJbmZvLmNvc3QpLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+ICh7Li4uYWNjLCBba106IC12fSksIHt9KSk7XG4gICAgICAgIFxuICAgICAgICBsZXQgYnVpbGRUaW1lID0gYnVpbGRpbmdJbmZvLmJ1aWxkVGltZSAqIDEwMDA7XG4gICAgICAgIGlmKGFjdGl2ZUJ1ZmZzLmJ1aWxkVGltZVJlZHVjdGlvbikge1xuICAgICAgICAgICAgYnVpbGRUaW1lICo9ICgxIC0gYWN0aXZlQnVmZnMuYnVpbGRUaW1lUmVkdWN0aW9uLnBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgYWRkVG9Mb2coYEEgQnVpbGRlcidzIENoYXJtIHJlZHVjZWQgY29uc3RydWN0aW9uIHRpbWUgYnkgJHthY3RpdmVCdWZmcy5idWlsZFRpbWVSZWR1Y3Rpb24ucGVyY2VudGFnZSAqIDEwMH0lIWAsICdpdGVtJyk7XG4gICAgICAgICAgICBzZXRBY3RpdmVCdWZmcyhwcmV2ID0+ICh7Li4ucHJldiwgYnVpbGRUaW1lUmVkdWN0aW9uOiBwcmV2LmJ1aWxkVGltZVJlZHVjdGlvbiEudXNlcyAtIDEgPiAwID8gey4uLnByZXYuYnVpbGRUaW1lUmVkdWN0aW9uISwgdXNlczogcHJldi5idWlsZFRpbWVSZWR1Y3Rpb24hLnVzZXMgLSAxfSA6IHVuZGVmaW5lZCB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRhc2tJZCA9IGAke0RhdGUubm93KCl9LWJ1aWxkLSR7YnVpbGRpbmdUeXBlfWA7XG4gICAgICAgIGNvbnN0IHRhc2tQYXlsb2FkID0geyBidWlsZGluZ1R5cGUsIHZpbGxhZ2VySWRzOiBbdmlsbGFnZXJJZF0sIHBvc2l0aW9uIH07XG4gICAgICAgIGlmICh1bmxpbWl0ZWRSZXNvdXJjZXMpIHtcbiAgICAgICAgICAgICBoYW5kbGVUYXNrQ29tcGxldGlvbih7IGlkOiB0YXNrSWQsIHR5cGU6ICdidWlsZCcsIHN0YXJ0VGltZTogMCwgZHVyYXRpb246IDAsIHBheWxvYWQ6IHsgLi4udGFza1BheWxvYWQsIHBvc2l0aW9uIH0gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IFsuLi5wcmV2LCB7IGlkOiB0YXNrSWQsIHR5cGU6ICdidWlsZCcsIHN0YXJ0VGltZTogRGF0ZS5ub3coKSwgZHVyYXRpb246IGJ1aWxkVGltZSwgcGF5bG9hZDogdGFza1BheWxvYWQgfV0pO1xuICAgICAgICAgICAgc2V0VW5pdHMocHJldiA9PiAoey4uLnByZXYsIHZpbGxhZ2VyczogcHJldi52aWxsYWdlcnMubWFwKHYgPT4gdi5pZCA9PT0gdmlsbGFnZXJJZCA/IHsuLi52LCBjdXJyZW50VGFzazogdGFza0lkfSA6IHYpfSkpO1xuICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYCR7YnVpbGRlci5uYW1lfSBoYXMgc3RhcnRlZCBjb25zdHJ1Y3RpbmcgYSAke2J1aWxkaW5nSW5mby5uYW1lfS5gKTtcbiAgICAgICAgICAgIGFkZFRvTG9nKGAke2J1aWxkZXIubmFtZX0gYmVnYW4gY29uc3RydWN0aW9uIG9mIGEgbmV3ICR7YnVpbGRpbmdJbmZvLm5hbWV9LmAsIGJ1aWxkaW5nSW5mby5pY29uSWQpO1xuICAgICAgICB9XG4gICAgICAgIHNldFBsYXllckFjdGlvbihudWxsKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlQ2FuY2VsUGxheWVyQWN0aW9uID0gKCkgPT4geyBzZXRQbGF5ZXJBY3Rpb24obnVsbCk7IHNldEFjdGl2aXR5U3RhdHVzKCdDb21tYW5kIGNhbmNlbGxlZC4nKTsgfTtcblxuICAgIGNvbnN0IGhhbmRsZURlbW9saXNoQnVpbGRpbmcgPSAodHlwZTogQnVpbGRpbmdUeXBlIHwgc3RyaW5nLCBpZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICh0eXBlID09PSAndG93bkNlbnRlcicpIHsgYWRkTm90aWZpY2F0aW9uKFwiVGhlIFRvd24gQ2VudGVyIGlzIHRoZSBoZWFydCBvZiB5b3VyIGNpdmlsaXphdGlvbiBhbmQgY2Fubm90IGJlIGRlbW9saXNoZWQuXCIpOyByZXR1cm47IH1cbiAgICAgICAgaWYgKGFjdGl2ZVRhc2tzLnNvbWUodGFzayA9PiAodGFzay5wYXlsb2FkPy5idWlsZGluZ0lkID09PSBpZCkgfHwgKHRhc2sudHlwZSA9PT0gJ3VwZ3JhZGVfYnVpbGRpbmcnICYmIHRhc2sucGF5bG9hZD8ub3JpZ2luYWxCdWlsZGluZ0lkID09PSBpZCkpKSB7IGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCBkZW1vbGlzaCBhIGJ1aWxkaW5nIHdpdGggYW4gYWN0aXZlIHRhc2sgKGUuZy4sIHRyYWluaW5nIG9yIHVwZ3JhZGluZykuXCIpOyByZXR1cm47IH1cbiAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gYnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB0eXBlKTtcbiAgICAgICAgY29uc3QgYnVpbGRpbmdJbnN0YW5jZSA9IGJ1aWxkaW5nc1t0eXBlIGFzIHN0cmluZ10uZmluZChiID0+IGIuaWQgPT09IGlkKTtcbiAgICAgICAgaWYgKCFidWlsZGluZ0luZm8gfHwgIWJ1aWxkaW5nSW5zdGFuY2UpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNhcGFjaXR5V2l0aG91dFRoaXNCdWlsZGluZyA9IHBvcHVsYXRpb24uY2FwYWNpdHkgLSAoYnVpbGRpbmdJbmZvLnBvcHVsYXRpb25DYXBhY2l0eSB8fCAwKTtcbiAgICAgICAgaWYgKChidWlsZGluZ0luZm8ucG9wdWxhdGlvbkNhcGFjaXR5IHx8IDApID4gMCAmJiBwb3B1bGF0aW9uLmN1cnJlbnQgPiBjYXBhY2l0eVdpdGhvdXRUaGlzQnVpbGRpbmcpIHtcbiAgICAgICAgICAgICBhZGROb3RpZmljYXRpb24oXCJDYW5ub3QgZGVtb2xpc2ggdGhpcyBidWlsZGluZywgeW91ciBwZW9wbGUgd291bGQgYmUgaG9tZWxlc3MuXCIpOyByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWZ1bmQgPSBPYmplY3QuZW50cmllcyhidWlsZGluZ0luZm8uY29zdCkucmVkdWNlKChhY2MsIFtyZXMsIGNvc3RdKSA9PiB7IGNvbnN0IGFtb3VudCA9IE1hdGguZmxvb3IoKGNvc3QgfHwgMCkgKiAwLjUpOyBpZiAoYW1vdW50ID4gMCkgYWNjW3JlcyBhcyBrZXlvZiBSZXNvdXJjZXNdID0gYW1vdW50OyByZXR1cm4gYWNjOyB9LCB7fSBhcyBSZXNvdXJjZURlbHRhcyk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhyZWZ1bmQpLmxlbmd0aCA+IDApIHsgdXBkYXRlUmVzb3VyY2VzKHJlZnVuZCk7IGFkZE5vdGlmaWNhdGlvbihgU2FsdmFnZWQgJHtPYmplY3QuZW50cmllcyhyZWZ1bmQpLm1hcCgoW3IsYV0pID0+IGAke2F9ICR7cn1gKS5qb2luKCcsICcpfS5gKTsgfVxuICAgICAgICBzZXRCdWlsZGluZ3MocHJldiA9PiAoeyAuLi5wcmV2LCBbdHlwZSBhcyBzdHJpbmddOiBwcmV2W3R5cGUgYXMgc3RyaW5nXS5maWx0ZXIoYiA9PiBiLmlkICE9PSBpZCkgfSkpO1xuICAgICAgICBhZGRUb0xvZyhgJHtidWlsZGluZ0luc3RhbmNlLm5hbWV9ICgke2J1aWxkaW5nSW5mby5uYW1lfSkgd2FzIGRlbW9saXNoZWQuYCwgYnVpbGRpbmdJbmZvLmljb25JZCk7XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHtpc09wZW46IGZhbHNlLCB0eXBlOiBudWxsLCBpbnN0YW5jZUlkOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVVcGRhdGVCdWlsZGluZyA9ICh0eXBlOiBCdWlsZGluZ1R5cGUgfCBzdHJpbmcsIGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICBzZXRCdWlsZGluZ3MocHJldiA9PiAoeyAuLi5wcmV2LCBbdHlwZSBhcyBzdHJpbmddOiBwcmV2W3R5cGUgYXMgc3RyaW5nXS5tYXAoYiA9PiBiLmlkID09PSBpZCA/IHsgLi4uYiwgbmFtZSB9IDogYikgfSkpO1xuICAgICAgICBhZGROb3RpZmljYXRpb24oXCJCdWlsZGluZyByZW5hbWVkLlwiKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlVXBncmFkZUJ1aWxkaW5nID0gKGJ1aWxkaW5nOiBCdWlsZGluZ0luc3RhbmNlLCB1cGdyYWRlUGF0aDogQnVpbGRpbmdVcGdyYWRlUGF0aCkgPT4ge1xuICAgICAgICBpZiAoIXVubGltaXRlZFJlc291cmNlcykge1xuICAgICAgICAgICAgY29uc3QgbWlzc2luZyA9IChPYmplY3Qua2V5cyh1cGdyYWRlUGF0aC5jb3N0KSBhcyAoa2V5b2YgUmVzb3VyY2VzKVtdKS5maWx0ZXIocmVzID0+IHJlc291cmNlc1tyZXNdIDwgKHVwZ3JhZGVQYXRoLmNvc3RbcmVzXSB8fCAwKSk7XG4gICAgICAgICAgICBpZiAobWlzc2luZy5sZW5ndGggPiAwKSB7IGFkZE5vdGlmaWNhdGlvbihgTmVlZCBtb3JlICR7bWlzc2luZy5qb2luKCcsICcpfS5gKTsgcmV0dXJuOyB9XG4gICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMoT2JqZWN0LmVudHJpZXModXBncmFkZVBhdGguY29zdCkucmVkdWNlKChhY2MsIFtrLCB2XSkgPT4gKHsgLi4uYWNjLCBba106IC0odiB8fCAwKSB9KSwge30pKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxCdWlsZGluZ1R5cGUgPSBPYmplY3Qua2V5cyhidWlsZGluZ3MpLmZpbmQodHlwZSA9PiBidWlsZGluZ3NbdHlwZSBhcyBzdHJpbmddLnNvbWUoYiA9PiBiLmlkID09PSBidWlsZGluZy5pZCkpO1xuICAgICAgICBjb25zdCB0YXNrUGF5bG9hZCA9IHtcbiAgICAgICAgICAgIG9yaWdpbmFsQnVpbGRpbmdJZDogYnVpbGRpbmcuaWQsXG4gICAgICAgICAgICBvcmlnaW5hbEJ1aWxkaW5nVHlwZSxcbiAgICAgICAgICAgIHRhcmdldEJ1aWxkaW5nVHlwZTogdXBncmFkZVBhdGguaWQsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVubGltaXRlZFJlc291cmNlcykge1xuICAgICAgICAgICAgaGFuZGxlVGFza0NvbXBsZXRpb24oeyBpZDogJ2luc3RhbnQnLCB0eXBlOiAndXBncmFkZV9idWlsZGluZycsIHN0YXJ0VGltZTogMCwgZHVyYXRpb246IDAsIHBheWxvYWQ6IHRhc2tQYXlsb2FkIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocHJldiA9PiBbLi4ucHJldiwgeyBpZDogYCR7RGF0ZS5ub3coKX0tdXBncmFkZS0ke2J1aWxkaW5nLmlkfWAsIHR5cGU6ICd1cGdyYWRlX2J1aWxkaW5nJywgc3RhcnRUaW1lOiBEYXRlLm5vdygpLCBkdXJhdGlvbjogdXBncmFkZVBhdGgudGltZSAqIDEwMDAsIHBheWxvYWQ6IHRhc2tQYXlsb2FkIH1dKTtcbiAgICAgICAgICAgIGFkZFRvTG9nKGBVcGdyYWRpbmcgJHtidWlsZGluZy5uYW1lfSB0byBhICR7YnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB1cGdyYWRlUGF0aC5pZCk/Lm5hbWV9LmAsICdzeXN0ZW0nKTtcbiAgICAgICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGBVcGdyYWRpbmcgJHtidWlsZGluZy5uYW1lfS4uLmApO1xuICAgICAgICB9XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgaW5zdGFuY2VJZDogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlVHJhaW5WaWxsYWdlcnMgPSAoY291bnQ6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlVGFza3Muc29tZSh0ID0+IHQudHlwZSA9PT0gJ3RyYWluX3ZpbGxhZ2VyJykgfHwgY291bnQgPD0gMCkgcmV0dXJuO1xuICAgICAgICBpZiAocG9wdWxhdGlvbi5jdXJyZW50ICsgY291bnQgPiBwb3B1bGF0aW9uLmNhcGFjaXR5KSB7IGFkZE5vdGlmaWNhdGlvbihgTmVlZCBzcGFjZSBmb3IgJHtjb3VudH0gbW9yZSB2aWxsYWdlcnMuYCk7IHJldHVybjsgfVxuICAgICAgICBpZiAoIWJ1aWxkaW5ncy50b3duQ2VudGVyPy5bMF0pIHsgYWRkTm90aWZpY2F0aW9uKGBObyBUb3duIENlbnRlciB0byB0cmFpbiB2aWxsYWdlcnMuYCk7IHJldHVybjsgfVxuICAgICAgICBpZiAoIXVubGltaXRlZFJlc291cmNlcykgeyBjb25zdCB0b3RhbENvc3QgPSA1MCAqIGNvdW50OyBpZiAocmVzb3VyY2VzLmZvb2QgPCB0b3RhbENvc3QpIHsgYWRkTm90aWZpY2F0aW9uKGBOZWVkICR7dG90YWxDb3N0IC0gcmVzb3VyY2VzLmZvb2R9IG1vcmUgRm9vZC5gKTsgcmV0dXJuOyB9IHVwZGF0ZVJlc291cmNlcyh7IGZvb2Q6IC10b3RhbENvc3QgfSk7IH1cbiAgICAgICAgXG4gICAgICAgIGlmKHVubGltaXRlZFJlc291cmNlcykgaGFuZGxlVGFza0NvbXBsZXRpb24oeyBpZDogJ2luc3RhbnQnLCB0eXBlOiAndHJhaW5fdmlsbGFnZXInLCBzdGFydFRpbWU6IDAsIGR1cmF0aW9uOiAwLCBwYXlsb2FkOiB7IGNvdW50IH0gfSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocHJldiA9PiBbLi4ucHJldiwgeyBpZDogYCR7RGF0ZS5ub3coKX0tdHJhaW4tdmlsbGFnZXJgLCB0eXBlOiAndHJhaW5fdmlsbGFnZXInLCBzdGFydFRpbWU6IERhdGUubm93KCksIGR1cmF0aW9uOiAxMDAwMCAqIGNvdW50LCBwYXlsb2FkOiB7IGNvdW50LCBidWlsZGluZ0lkOiBidWlsZGluZ3MudG93bkNlbnRlciFbMF0uaWQgfSB9XSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgVHJhaW5pbmcgJHtjb3VudH0gdmlsbGFnZXIocykuLi5gKTsgYWRkVG9Mb2coYEJlZ2FuIHRyYWluaW5nICR7Y291bnR9IG5ldyB2aWxsYWdlcihzKS5gLCAndmlsbGFnZXInKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGluc3RhbmNlSWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBoYW5kbGVUcmFpblVuaXRzID0gKHVuaXRUeXBlOiBNaWxpdGFyeVVuaXRUeXBlLCBjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHVuaXRJbmZvID0gdW5pdExpc3QuZmluZCh1ID0+IHUuaWQgPT09IHVuaXRUeXBlKTtcbiAgICAgICAgaWYgKCF1bml0SW5mbyB8fCBhY3RpdmVUYXNrcy5zb21lKHQgPT4gdC5wYXlsb2FkPy51bml0VHlwZSA9PT0gdW5pdFR5cGUpIHx8IGNvdW50IDw9IDApIHJldHVybjtcbiAgICAgICAgY29uc3QgdG90YWxQb3B1bGF0aW9uQ29zdCA9ICh1bml0SW5mby5wb3B1bGF0aW9uQ29zdCB8fCAxKSAqIGNvdW50O1xuICAgICAgICBpZiAocG9wdWxhdGlvbi5jdXJyZW50ICsgdG90YWxQb3B1bGF0aW9uQ29zdCA+IHBvcHVsYXRpb24uY2FwYWNpdHkpIHsgYWRkTm90aWZpY2F0aW9uKGBOZWVkIHNwYWNlIGZvciAke3RvdGFsUG9wdWxhdGlvbkNvc3R9IG1vcmUgcG9wdWxhdGlvbi5gKTsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IHRyYWluaW5nQnVpbGRpbmcgPSBidWlsZGluZ3NbdW5pdEluZm8ucmVxdWlyZWRCdWlsZGluZyBhcyBCdWlsZGluZ1R5cGVdPy5bMF07XG4gICAgICAgIGlmICghdHJhaW5pbmdCdWlsZGluZykgeyBhZGROb3RpZmljYXRpb24oYE5vICR7YnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB1bml0SW5mby5yZXF1aXJlZEJ1aWxkaW5nKT8ubmFtZX0gdG8gdHJhaW4gdW5pdHMuYCk7IHJldHVybjsgfVxuXG4gICAgICAgIGlmICghdW5saW1pdGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nID0gKE9iamVjdC5rZXlzKHVuaXRJbmZvLmNvc3QpIGFzIChrZXlvZiBSZXNvdXJjZXMpW10pLmZpbHRlcihyZXMgPT4gcmVzb3VyY2VzW3Jlc10gPCAodW5pdEluZm8uY29zdFtyZXNdIHx8IDApICogY291bnQpO1xuICAgICAgICAgICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkgeyBhZGROb3RpZmljYXRpb24oYE5lZWQgbW9yZSAke21pc3Npbmcuam9pbignIGFuZCAnKX0uYCk7IHJldHVybjsgfVxuICAgICAgICAgICAgdXBkYXRlUmVzb3VyY2VzKE9iamVjdC5lbnRyaWVzKHVuaXRJbmZvLmNvc3QpLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+ICh7Li4uYWNjLCBba106IC0odiB8fCAwKSAqIGNvdW50fSksIHt9KSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCB0cmFpblRpbWUgPSB1bml0SW5mby50cmFpblRpbWUgKiAxMDAwICogY291bnQ7XG4gICAgICAgIGlmKGFjdGl2ZUJ1ZmZzLnBlcm1hbmVudFRyYWluVGltZVJlZHVjdGlvbikgdHJhaW5UaW1lICo9ICgxIC0gYWN0aXZlQnVmZnMucGVybWFuZW50VHJhaW5UaW1lUmVkdWN0aW9uKTtcbiAgICAgICAgaWYgKGFjdGl2ZUJ1ZmZzLnRyYWluVGltZVJlZHVjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgYXBwbGljYWJsZSA9IE1hdGgubWluKGNvdW50LCBhY3RpdmVCdWZmcy50cmFpblRpbWVSZWR1Y3Rpb24udXNlcyk7XG4gICAgICAgICAgICB0cmFpblRpbWUgPSAodW5pdEluZm8udHJhaW5UaW1lICogMTAwMCAqIGFwcGxpY2FibGUgKiAoMSAtIGFjdGl2ZUJ1ZmZzLnRyYWluVGltZVJlZHVjdGlvbi5wZXJjZW50YWdlKSkgKyAodW5pdEluZm8udHJhaW5UaW1lICogMTAwMCAqIChjb3VudCAtIGFwcGxpY2FibGUpKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVCdWZmcy50cmFpblRpbWVSZWR1Y3Rpb24udXNlcyAtIGFwcGxpY2FibGUgPiAwKSBzZXRBY3RpdmVCdWZmcyhwcmV2ID0+ICh7Li4ucHJldiwgdHJhaW5UaW1lUmVkdWN0aW9uOiB7Li4ucHJldi50cmFpblRpbWVSZWR1Y3Rpb24hLCB1c2VzOiBwcmV2LnRyYWluVGltZVJlZHVjdGlvbiEudXNlcyAtIGFwcGxpY2FibGV9fSkpO1xuICAgICAgICAgICAgZWxzZSB7IHNldEFjdGl2ZUJ1ZmZzKHByZXYgPT4gKHsuLi5wcmV2LCB0cmFpblRpbWVSZWR1Y3Rpb246IHVuZGVmaW5lZH0pKTsgYWRkVG9Mb2coXCJUaGUgRHJpbGxtYXN0ZXIncyBXaGlzdGxlIGJ1ZmYgaGFzIGJlZW4gZnVsbHkgdXNlZC5cIiwgJ2l0ZW0nKTsgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZih1bmxpbWl0ZWRSZXNvdXJjZXMpIGhhbmRsZVRhc2tDb21wbGV0aW9uKHsgaWQ6ICdpbnN0YW50JywgdHlwZTogJ3RyYWluX21pbGl0YXJ5Jywgc3RhcnRUaW1lOiAwLCBkdXJhdGlvbjogMCwgcGF5bG9hZDogeyB1bml0VHlwZSwgY291bnQgfSB9KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IFsuLi5wcmV2LCB7IGlkOiBgJHtEYXRlLm5vdygpfS10cmFpbi0ke3VuaXRUeXBlfWAsIHR5cGU6ICd0cmFpbl9taWxpdGFyeScsIHN0YXJ0VGltZTogRGF0ZS5ub3coKSwgZHVyYXRpb246IHRyYWluVGltZSwgcGF5bG9hZDogeyB1bml0VHlwZSwgY291bnQsIGJ1aWxkaW5nSWQ6IHRyYWluaW5nQnVpbGRpbmcuaWQgfSB9XSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgVHJhaW5pbmcgJHtjb3VudH0gJHt1bml0SW5mby5uYW1lfShzKS4uLmApOyBhZGRUb0xvZyhgQmVnYW4gdHJhaW5pbmcgJHtjb3VudH0gbmV3ICR7dW5pdEluZm8ubmFtZX0ocykuYCwgdW5pdFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgaW5zdGFuY2VJZDogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRGlzbWlzc1NwZWNpZmljVW5pdCA9ICh0eXBlOiAndmlsbGFnZXJzJyB8ICdtaWxpdGFyeScsIGlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICd2aWxsYWdlcnMnICYmIGlzVmlsbGFnZXJCdXN5KGlkKSkgeyBhZGROb3RpZmljYXRpb24oXCJDYW5ub3QgZGlzbWlzcyBhIGJ1c3kgdmlsbGFnZXIuXCIpOyByZXR1cm47IH1cbiAgICAgICAgY29uc3QgdW5pdCA9IHVuaXRzW3R5cGVdLmZpbmQodSA9PiB1LmlkID09PSBpZCk7IGlmICghdW5pdCkgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3ZpbGxhZ2VycycgJiYgdW5pdHMudmlsbGFnZXJzLmxlbmd0aCA8PSAxKSB7IGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCBkaXNtaXNzIHlvdXIgbGFzdCB2aWxsYWdlci5cIik7IHJldHVybjsgfVxuICAgICAgICBzZXRVbml0cyhwcmV2ID0+ICh7IC4uLnByZXYsIFt0eXBlXTogcHJldlt0eXBlXS5maWx0ZXIodSA9PiB1LmlkICE9PSBpZCkgfSkpO1xuICAgICAgICBjb25zdCB1bml0VHlwZU5hbWUgPSB0eXBlID09PSAndmlsbGFnZXJzJyA/ICd2aWxsYWdlcicgOiAodW5pdCBhcyBNaWxpdGFyeVVuaXQpLnVuaXRUeXBlO1xuICAgICAgICBhZGRUb0xvZyhgJHt1bml0Lm5hbWV9IHRoZSAke3VuaXRUeXBlTmFtZX0gaGFzIGJlZW4gZGlzbWlzc2VkLmAsIHR5cGUgPT09ICd2aWxsYWdlcnMnID8gJ3ZpbGxhZ2VyJyA6ICh1bml0IGFzIE1pbGl0YXJ5VW5pdCkudW5pdFR5cGUpO1xuICAgICAgICBhZGROb3RpZmljYXRpb24oYCR7dW5pdC5uYW1lfSB3YXMgZGlzbWlzc2VkLmApO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVVcGRhdGVVbml0ID0gKHR5cGU6ICd2aWxsYWdlcnMnIHwgJ21pbGl0YXJ5JywgaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZykgPT4ge1xuICAgICAgICAgc2V0VW5pdHMocHJldiA9PiAoeyAuLi5wcmV2LCBbdHlwZV06IHByZXZbdHlwZV0ubWFwKHUgPT4gdS5pZCA9PT0gaWQgPyAodHlwZSA9PT0gJ21pbGl0YXJ5JyAmJiB0aXRsZSAhPT0gdW5kZWZpbmVkID8geyAuLi51LCBuYW1lLCB0aXRsZSB9IDogeyAuLi51LCBuYW1lIH0pIDogdSl9KSk7XG4gICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIlVuaXQgdXBkYXRlZC5cIik7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUFzc2lnblZpbGxhZ2Vyc1RvQ29uc3RydWN0aW9uID0gKGNvbnN0cnVjdGlvbklkOiBzdHJpbmcsIGNvdW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgaWRsZVZpbGxhZ2VycyA9IHVuaXRzLnZpbGxhZ2Vycy5maWx0ZXIodiA9PiAhdi5jdXJyZW50VGFzayk7XG4gICAgICAgIGlmIChjb3VudCA8PSAwIHx8IGlkbGVWaWxsYWdlcnMubGVuZ3RoID09PSAwKSB7IGFkZE5vdGlmaWNhdGlvbihcIk5vIGlkbGUgdmlsbGFnZXJzIGF2YWlsYWJsZS5cIik7IHJldHVybjsgfVxuICAgICAgICBjb25zdCB0YXNrID0gYWN0aXZlVGFza3MuZmluZCh0ID0+IHQuaWQgPT09IGNvbnN0cnVjdGlvbklkKTsgaWYgKCF0YXNrIHx8IHRhc2sudHlwZSAhPT0gJ2J1aWxkJykgcmV0dXJuO1xuICAgICAgICBjb25zdCBidWlsZGluZ0luZm8gPSBidWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IHRhc2sucGF5bG9hZD8uYnVpbGRpbmdUeXBlKTsgaWYgKCFidWlsZGluZ0luZm8pIHJldHVybjtcblxuICAgICAgICBjb25zdCBjYXBwZWRDb3VudCA9IE1hdGgubWluKGNvdW50LCBpZGxlVmlsbGFnZXJzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHZpbGxhZ2Vyc1RvQXNzaWduID0gaWRsZVZpbGxhZ2Vycy5zbGljZSgwLCBjYXBwZWRDb3VudCkubWFwKHYgPT4gdi5pZCk7XG4gICAgICAgIGNvbnN0IHdvcmtEb25lID0gKERhdGUubm93KCkgLSB0YXNrLnN0YXJ0VGltZSkgKiAodGFzay5wYXlsb2FkPy52aWxsYWdlcklkcz8ubGVuZ3RoIHx8IDEpO1xuICAgICAgICBjb25zdCB3b3JrUmVtYWluaW5nID0gTWF0aC5tYXgoMCwgKGJ1aWxkaW5nSW5mby5idWlsZFRpbWUgKiAxMDAwKSAtIHdvcmtEb25lKTtcbiAgICAgICAgY29uc3QgbmV3V29ya2VyQ291bnQgPSAodGFzay5wYXlsb2FkPy52aWxsYWdlcklkcz8ubGVuZ3RoIHx8IDApICsgY2FwcGVkQ291bnQ7XG4gICAgICAgIGNvbnN0IG5ld1JlbWFpbmluZ0R1cmF0aW9uID0gd29ya1JlbWFpbmluZyAvIG5ld1dvcmtlckNvdW50O1xuICAgICAgICBcbiAgICAgICAgc2V0VW5pdHMocHJldiA9PiAoey4uLnByZXYsIHZpbGxhZ2VyczogcHJldi52aWxsYWdlcnMubWFwKHYgPT4gdmlsbGFnZXJzVG9Bc3NpZ24uaW5jbHVkZXModi5pZCkgPyB7Li4udiwgY3VycmVudFRhc2s6IGNvbnN0cnVjdGlvbklkfSA6IHYpfSkpO1xuICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IHByZXYubWFwKHQgPT4gdC5pZCA9PT0gY29uc3RydWN0aW9uSWQgPyB7IC4uLnQsIHN0YXJ0VGltZTogRGF0ZS5ub3coKSwgZHVyYXRpb246IG5ld1JlbWFpbmluZ0R1cmF0aW9uLCBwYXlsb2FkOiB7IC4uLnQucGF5bG9hZCwgdmlsbGFnZXJJZHM6IFsuLi50LnBheWxvYWQhLnZpbGxhZ2VySWRzISwgLi4udmlsbGFnZXJzVG9Bc3NpZ25dIH0gfSA6IHQpKTtcbiAgICAgICAgYWRkVG9Mb2coYCR7Y2FwcGVkQ291bnR9IHZpbGxhZ2VyKHMpIGFyZSBub3cgYXNzaXN0aW5nIHdpdGggdGhlICR7YnVpbGRpbmdJbmZvLm5hbWV9LmAsIGJ1aWxkaW5nSW5mby5pY29uSWQpO1xuICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgQ29uc3RydWN0aW9uIG9mIHRoZSAke2J1aWxkaW5nSW5mby5uYW1lfSBpcyBub3cgZmFzdGVyLmApO1xuICAgICAgICBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHRhcmdldElkOiBudWxsLCB0YXJnZXRUeXBlOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVBc3NpZ25WaWxsYWdlcnMgPSAodGFyZ2V0SWQ6IHN0cmluZywgY291bnQ6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAoYXNzaWdubWVudFBhbmVsU3RhdGUudGFyZ2V0VHlwZSA9PT0gJ2NvbnN0cnVjdGlvbicpIHJldHVybiBoYW5kbGVBc3NpZ25WaWxsYWdlcnNUb0NvbnN0cnVjdGlvbih0YXJnZXRJZCwgY291bnQpO1xuICAgICAgICBjb25zdCBpZGxlVmlsbGFnZXJzID0gdW5pdHMudmlsbGFnZXJzLmZpbHRlcih2ID0+ICF2LmN1cnJlbnRUYXNrKTtcbiAgICAgICAgaWYgKGNvdW50IDw9IDAgfHwgaWRsZVZpbGxhZ2Vycy5sZW5ndGggPT09IDApIHsgYWRkTm90aWZpY2F0aW9uKFwiTm8gaWRsZSB2aWxsYWdlcnMgYXZhaWxhYmxlLlwiKTsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSByZXNvdXJjZU5vZGVzLmZpbmQobiA9PiBuLmlkID09PSB0YXJnZXRJZCk7IGlmICghdGFyZ2V0Tm9kZSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBjYXBwZWRDb3VudCA9IE1hdGgubWluKGNvdW50LCBpZGxlVmlsbGFnZXJzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHZpbGxhZ2Vyc1RvQXNzaWduID0gaWRsZVZpbGxhZ2Vycy5zbGljZSgwLCBjYXBwZWRDb3VudCkubWFwKHYgPT4gdi5pZCk7XG4gICAgICAgIGNvbnN0IHRhc2tJZCA9IGBnYXRoZXItJHt0YXJnZXRJZH1gO1xuICAgICAgICBjb25zdCBleGlzdGluZ1Rhc2sgPSBhY3RpdmVUYXNrcy5maW5kKHQgPT4gdC5pZCA9PT0gdGFza0lkKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh1bmxpbWl0ZWRSZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIHVwZGF0ZVJlc291cmNlcyh7IFt0YXJnZXROb2RlLnR5cGVdOiB0YXJnZXROb2RlLmFtb3VudCB9KTtcbiAgICAgICAgICAgIGFkZFRvTG9nKGAke2NhcHBlZENvdW50fSB2aWxsYWdlcihzKSBpbnN0YW50bHkgZ2F0aGVyZWQgJHtNYXRoLmZsb29yKHRhcmdldE5vZGUuYW1vdW50KX0gJHt0YXJnZXROb2RlLnR5cGV9LmAsIHRhcmdldE5vZGUudHlwZSk7XG4gICAgICAgICAgICBzZXRSZXNvdXJjZU5vZGVzKHByZXYgPT4gcHJldi5maWx0ZXIobiA9PiBuLmlkICE9PSB0YXJnZXRJZCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nVGFzaykgc2V0QWN0aXZlVGFza3MocHJldiA9PiBwcmV2Lm1hcCh0ID0+IHQuaWQgPT09IHRhc2tJZCA/IHsgLi4udCwgcGF5bG9hZDogeyAuLi50LnBheWxvYWQsIHZpbGxhZ2VySWRzOiBbLi4ubmV3IFNldChbLi4udC5wYXlsb2FkIS52aWxsYWdlcklkcyEsIC4uLnZpbGxhZ2Vyc1RvQXNzaWduXSldIH0gfSA6IHQpKTtcbiAgICAgICAgICAgIGVsc2Ugc2V0QWN0aXZlVGFza3MocHJldiA9PiBbLi4ucHJldiwgeyBpZDogdGFza0lkLCB0eXBlOiAnZ2F0aGVyJywgc3RhcnRUaW1lOiBEYXRlLm5vdygpLCBkdXJhdGlvbjogOTk5OTk5OTk5LCBwYXlsb2FkOiB7IHJlc291cmNlTm9kZUlkOiB0YXJnZXRJZCwgdmlsbGFnZXJJZHM6IHZpbGxhZ2Vyc1RvQXNzaWduIH0gfV0pO1xuICAgICAgICAgICAgc2V0VW5pdHMocHJldiA9PiAoey4uLnByZXYsIHZpbGxhZ2VyczogcHJldi52aWxsYWdlcnMubWFwKHYgPT4gdmlsbGFnZXJzVG9Bc3NpZ24uaW5jbHVkZXModi5pZCkgPyB7Li4udiwgY3VycmVudFRhc2s6IHRhc2tJZH0gOiB2KX0pKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRUb0xvZyhgJHtjYXBwZWRDb3VudH0gdmlsbGFnZXIocykgYXNzaWduZWQgdG8gZ2F0aGVyICR7dGFyZ2V0Tm9kZS50eXBlfS5gLCB0YXJnZXROb2RlLnR5cGUpO1xuICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgJHtjYXBwZWRDb3VudH0gdmlsbGFnZXIocykgYXJlIG5vdyBnYXRoZXJpbmcgJHt0YXJnZXROb2RlLnR5cGV9LmApO1xuICAgICAgICBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHRhcmdldElkOiBudWxsLCB0YXJnZXRUeXBlOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVSZWNhbGxWaWxsYWdlcnMgPSAodGFyZ2V0SWQ6IHN0cmluZywgY291bnQ6IG51bWJlciwgdHlwZTogJ3Jlc291cmNlJyB8ICdjb25zdHJ1Y3Rpb24nKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBhY3RpdmVUYXNrcy5maW5kKHQgPT4gdC5pZCA9PT0gdGFyZ2V0SWQpO1xuICAgICAgICBpZiAoIXRhc2sgfHwgKHRhc2sucGF5bG9hZD8udmlsbGFnZXJJZHM/Lmxlbmd0aCA/PyAwKSA8IGNvdW50KSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICBjb25zdCB2aWxsYWdlcnNUb1JlY2FsbCA9IHRhc2sucGF5bG9hZCEudmlsbGFnZXJJZHMhLnNsaWNlKHRhc2sucGF5bG9hZCEudmlsbGFnZXJJZHMhLmxlbmd0aCAtIGNvdW50KTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb25zdHJ1Y3Rpb24nICYmIHZpbGxhZ2Vyc1RvUmVjYWxsLmxlbmd0aCA9PT0gdGFzay5wYXlsb2FkIS52aWxsYWdlcklkcyEubGVuZ3RoKSB7IGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCByZWNhbGwgdGhlIGxhc3QgYnVpbGRlciBmcm9tIGEgcHJvamVjdC5cIik7IHJldHVybjsgfVxuXG4gICAgICAgIHNldFVuaXRzKHByZXYgPT4gKHsuLi5wcmV2LCB2aWxsYWdlcnM6IHByZXYudmlsbGFnZXJzLm1hcCh2ID0+IHZpbGxhZ2Vyc1RvUmVjYWxsLmluY2x1ZGVzKHYuaWQpID8gey4uLnYsIGN1cnJlbnRUYXNrOiBudWxsfSA6IHYpfSkpO1xuICAgICAgICBjb25zdCByZW1haW5pbmdWaWxsYWdlcnMgPSB0YXNrLnBheWxvYWQhLnZpbGxhZ2VySWRzIS5maWx0ZXIoaWQgPT4gIXZpbGxhZ2Vyc1RvUmVjYWxsLmluY2x1ZGVzKGlkKSk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVtYWluaW5nVmlsbGFnZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocHJldiA9PiBwcmV2LmZpbHRlcih0ID0+IHQuaWQgIT09IHRhcmdldElkKSk7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gcmVzb3VyY2VOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gdGFyZ2V0SWQpO1xuICAgICAgICAgICAgaWYobm9kZSkgYWRkVG9Mb2coYEFsbCB2aWxsYWdlcnMgcmVjYWxsZWQgZnJvbSBnYXRoZXJpbmcgJHtub2RlLnR5cGV9LmAsICd2aWxsYWdlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gYnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB0YXNrLnBheWxvYWQ/LmJ1aWxkaW5nVHlwZSkhO1xuICAgICAgICAgICAgY29uc3Qgd29ya0RvbmUgPSAoRGF0ZS5ub3coKSAtIHRhc2suc3RhcnRUaW1lKSAqIHRhc2sucGF5bG9hZCEudmlsbGFnZXJJZHMhLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG5ld1JlbWFpbmluZ0R1cmF0aW9uID0gKGJ1aWxkaW5nSW5mby5idWlsZFRpbWUgKiAxMDAwIC0gd29ya0RvbmUpIC8gcmVtYWluaW5nVmlsbGFnZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHNldEFjdGl2ZVRhc2tzKHByZXYgPT4gcHJldi5tYXAodCA9PiB0LmlkID09PSB0YXJnZXRJZCA/IHsgLi4udCwgc3RhcnRUaW1lOiBEYXRlLm5vdygpLCBkdXJhdGlvbjogbmV3UmVtYWluaW5nRHVyYXRpb24sIHBheWxvYWQ6IHsgLi4udC5wYXlsb2FkLCB2aWxsYWdlcklkczogcmVtYWluaW5nVmlsbGFnZXJzIH0gfSA6IHQpKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnY29uc3RydWN0aW9uJykgYWRkVG9Mb2coYCR7Y291bnR9IGJ1aWxkZXIocykgcmVjYWxsZWQuIENvbnN0cnVjdGlvbiB3aWxsIG5vdyBiZSBzbG93ZXIuYCwgJ3ZpbGxhZ2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0QXNzaWdubWVudFBhbmVsU3RhdGUoeyBpc09wZW46IGZhbHNlLCB0YXJnZXRJZDogbnVsbCwgdGFyZ2V0VHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlQWR2YW5jZUFnZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZVRhc2tzLnNvbWUodCA9PiB0LnR5cGUgPT09ICdhZHZhbmNlX2FnZScpKSB7IGFkZE5vdGlmaWNhdGlvbihcIkFkdmFuY2VtZW50IGFscmVhZHkgaW4gcHJvZ3Jlc3MuXCIpOyByZXR1cm47IH1cbiAgICAgICAgaWYgKCF1bmxpbWl0ZWRSZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmcgPSBbXTtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZXMuZm9vZCA8IDUwMCkgbWlzc2luZy5wdXNoKGAkezUwMCAtIHJlc291cmNlcy5mb29kfSBGb29kYCk7XG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzLmdvbGQgPCAyMDApIG1pc3NpbmcucHVzaChgJHsyMDAgLSByZXNvdXJjZXMuZ29sZH0gR29sZGApO1xuICAgICAgICAgICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkgeyBhZGROb3RpZmljYXRpb24oYFRvIGFkdmFuY2UsIHlvdSBuZWVkICR7bWlzc2luZy5qb2luKCcgYW5kICcpfS5gKTsgcmV0dXJuOyB9XG4gICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMoeyBmb29kOiAtNTAwLCBnb2xkOiAtMjAwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjdGl2ZUFnZXMgPSBtYXN0ZXJBZ2VMaXN0LmZpbHRlcihhID0+IGEuaXNBY3RpdmUpO1xuICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBhY3RpdmVBZ2VzLmZpbmRJbmRleChhZ2UgPT4gYWdlLm5hbWUgPT09IGN1cnJlbnRBZ2UpO1xuICAgICAgICBpZiAoY3VycmVudEluZGV4ID09PSAtMSB8fCBjdXJyZW50SW5kZXggKyAxID49IGFjdGl2ZUFnZXMubGVuZ3RoKSB7IGFkZE5vdGlmaWNhdGlvbihcIllvdSBoYXZlIHJlYWNoZWQgdGhlIGZpbmFsIGF2YWlsYWJsZSBhZ2UuXCIpOyByZXR1cm47IH1cblxuICAgICAgICBpZih1bmxpbWl0ZWRSZXNvdXJjZXMpIGhhbmRsZVRhc2tDb21wbGV0aW9uKHsgaWQ6ICdpbnN0YW50JywgdHlwZTogJ2FkdmFuY2VfYWdlJywgc3RhcnRUaW1lOiAwLCBkdXJhdGlvbjogMCwgcGF5bG9hZDoge30gfSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocHJldiA9PiBbLi4ucHJldiwgeyBpZDogYCR7RGF0ZS5ub3coKX0tYWR2YW5jZV9hZ2VgLCB0eXBlOiAnYWR2YW5jZV9hZ2UnLCBzdGFydFRpbWU6IERhdGUubm93KCksIGR1cmF0aW9uOiA2MDAwMCB9XSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgWW91ciBwZW9wbGUgYmVnaW4gdGhlIGxvbmcgam91cm5leSB0byBhIG5ldyBhZ2UuYCk7XG4gICAgICAgICAgICBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGluc3RhbmNlSWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IGhhbmRsZUV4aXRHYW1lID0gYXN5bmMgKCkgPT4geyBzZXRDdXJyZW50U2F2ZU5hbWUobnVsbCk7IGF3YWl0IGZldGNoU2F2ZXNBbmRDb25maWdzKCk7IHNldEdhbWVTdGF0ZShHYW1lU3RhdHVzLk1FTlUpOyB9O1xuICAgIGNvbnN0IGhhbmRsZURlbGV0ZUdhbWUgPSBhc3luYyAoc2F2ZU5hbWU6IHN0cmluZykgPT4geyBhd2FpdCBkZWxldGVHYW1lU3RhdGUoc2F2ZU5hbWUpOyBhd2FpdCBmZXRjaFNhdmVzQW5kQ29uZmlncygpOyBhZGROb3RpZmljYXRpb24oYERlbGV0ZWQgc2FnYTogXCIke3NhdmVOYW1lfVwiYCk7IH07XG5cbiAgICBjb25zdCBoYW5kbGVUb2dnbGVVbmxpbWl0ZWRSZXNvdXJjZXMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld01vZGUgPSAhdW5saW1pdGVkUmVzb3VyY2VzO1xuICAgICAgICBzZXRVbmxpbWl0ZWRSZXNvdXJjZXMobmV3TW9kZSk7XG4gICAgICAgIGlmIChuZXdNb2RlKSB7XG4gICAgICAgICAgICBzZXRSZXNvdXJjZXMoeyBmb29kOiA5OTk5OSwgd29vZDogOTk5OTksIGdvbGQ6IDk5OTk5LCBzdG9uZTogOTk5OTkgfSk7XG4gICAgICAgICAgICBhZGROb3RpZmljYXRpb24oXCJUZXN0IE1vZGU6IE9OIC0gQWxsIGFjdGl2ZSB0YXNrcyBjb21wbGV0ZWQuXCIpO1xuICAgICAgICAgICAgY29uc3QgZGVwbGV0ZWROb2RlSWRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICBhY3RpdmVUYXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0YXNrLnR5cGUgPT09ICdnYXRoZXInICYmIHRhc2sucGF5bG9hZD8ucmVzb3VyY2VOb2RlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVwbGV0ZWROb2RlSWRzLmFkZCh0YXNrLnBheWxvYWQucmVzb3VyY2VOb2RlSWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gcmVzb3VyY2VOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gdGFzay5wYXlsb2FkLnJlc291cmNlTm9kZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUpIGFkZFRvTG9nKGBJbnN0YW50bHkgZ2F0aGVyZWQgYWxsICR7bm9kZS50eXBlfSBmcm9tIGEgZGVwbGV0ZWQgc291cmNlLmAsIG5vZGUudHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhbmRsZVRhc2tDb21wbGV0aW9uKHRhc2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhbXSk7XG4gICAgICAgICAgICBpZiAoZGVwbGV0ZWROb2RlSWRzLnNpemUgPiAwKSBzZXRSZXNvdXJjZU5vZGVzKHByZXYgPT4gcHJldi5maWx0ZXIobiA9PiAhZGVwbGV0ZWROb2RlSWRzLmhhcyhuLmlkKSkpO1xuICAgICAgICB9IGVsc2UgYWRkTm90aWZpY2F0aW9uKFwiVGVzdCBNb2RlOiBPRkZcIik7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBoYW5kbGVVc2VJdGVtID0gKGl0ZW1JZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpbnZlbnRvcnkuZmluZChpID0+IGkuaWQgPT09IGl0ZW1JZCk7IGlmICghaXRlbSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBiYXNlSXRlbUlkID0gaXRlbS5pZC5zcGxpdCgnLScpWzBdO1xuICAgICAgICBjb25zdCBjb25zdHJ1Y3Rpb25UYXNrcyA9IGFjdGl2ZVRhc2tzLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ2J1aWxkJyk7XG4gICAgICAgIHN3aXRjaChiYXNlSXRlbUlkKSB7XG4gICAgICAgICAgICBjYXNlICdzY3JvbGxfb2ZfaGFzdGUnOiBjYXNlICdibHVlcHJpbnRfb2ZfdGhlX21hc3Rlcic6XG4gICAgICAgICAgICAgICAgaWYgKGNvbnN0cnVjdGlvblRhc2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFzayA9IGNvbnN0cnVjdGlvblRhc2tzLnNvcnQoKGEsYikgPT4gKGIuc3RhcnRUaW1lICsgYi5kdXJhdGlvbikgLSAoYS5zdGFydFRpbWUgKyBhLmR1cmF0aW9uKSlbMF07XG4gICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZVRhc2tzKHAgPT4gcC5tYXAodCA9PiB0LmlkID09PSB0YXNrLmlkID8geyAuLi50LCBkdXJhdGlvbjogTWF0aC5tYXgoMCwgdC5kdXJhdGlvbiAtIChiYXNlSXRlbUlkID09PSAnc2Nyb2xsX29mX2hhc3RlJyA/IDE1MDAwIDogNjAwMDApKSB9IDogdCkpO1xuICAgICAgICAgICAgICAgICAgICBhZGRUb0xvZyhgVXNlZCAke2l0ZW0ubmFtZX0gb24gdGhlICR7YnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB0YXNrLnBheWxvYWQ/LmJ1aWxkaW5nVHlwZSk/Lm5hbWV9LmAsICdpdGVtJyk7XG4gICAgICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hlYXJ0eV9tZWFsJzogdXBkYXRlUmVzb3VyY2VzKHsgZm9vZDogNzUgfSk7IGFkZFRvTG9nKGBVc2VkICR7aXRlbS5uYW1lfSB0byBnYWluIDc1IGZvb2QuYCwgJ2l0ZW0nKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdidWlsZGVyc19jaGFybSc6IHNldEFjdGl2ZUJ1ZmZzKHAgPT4gKHsuLi5wLCBidWlsZFRpbWVSZWR1Y3Rpb246IHsgcGVyY2VudGFnZTogMC4xLCB1c2VzOiAxIH19KSk7IGFkZFRvTG9nKGBVc2VkICR7aXRlbS5uYW1lfS4gTmV4dCBidWlsZGluZyBpcyAxMCUgZmFzdGVyLmAsICdpdGVtJyk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZHJpbGxtYXN0ZXJzX3doaXN0bGUnOiBzZXRBY3RpdmVCdWZmcyhwID0+ICh7Li4ucCwgdHJhaW5UaW1lUmVkdWN0aW9uOiB7IHBlcmNlbnRhZ2U6IDAuMjUsIHVzZXM6IDUgfX0pKTsgYWRkVG9Mb2coYFVzZWQgJHtpdGVtLm5hbWV9LiBOZXh0IDUgdW5pdHMgdHJhaW4gMjUlIGZhc3Rlci5gLCAnaXRlbScpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2dvbGRlbl9oYXJ2ZXN0Jzogc2V0QWN0aXZlQnVmZnMocCA9PiAoey4uLnAsIHJlc291cmNlQm9vc3Q6IFsuLi4ocC5yZXNvdXJjZUJvb3N0IHx8IFtdKSwgeyByZXNvdXJjZTogJ2Zvb2QnLCBtdWx0aXBsaWVyOiAxLjUsIGVuZFRpbWU6IERhdGUubm93KCkgKyA2MDAwMCB9XX0pKTsgYWRkVG9Mb2coYFVzZWQgJHtpdGVtLm5hbWV9LiBGb29kIGdhdGhlcmluZyBib29zdGVkIGJ5IDUwJSBmb3IgNjBzLmAsICdpdGVtJyk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2hhcmRfb2ZfdGhlX2FuY2llbnRzJzpcbiAgICAgICAgICAgICAgICBpZiAoY29uc3RydWN0aW9uVGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXNrID0gY29uc3RydWN0aW9uVGFza3Muc29ydCgoYSxiKSA9PiAoYi5zdGFydFRpbWUgKyBiLmR1cmF0aW9uKSAtIChhLnN0YXJ0VGltZSArIGEuZHVyYXRpb24pKVswXTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocCA9PiBwLmZpbHRlcih0ID0+IHQuaWQgIT09IHRhc2suaWQpKTsgaGFuZGxlVGFza0NvbXBsZXRpb24odGFzayk7XG4gICAgICAgICAgICAgICAgICAgIGFkZFRvTG9nKGBVc2VkICR7aXRlbS5uYW1lfSB0byBpbnN0YW50bHkgY29tcGxldGUgdGhlICR7YnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB0YXNrLnBheWxvYWQ/LmJ1aWxkaW5nVHlwZSk/Lm5hbWV9LmAsICdpdGVtJyk7XG4gICAgICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hlYXJ0X29mX3RoZV9tb3VudGFpbic6XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnVmZnMocCA9PiAoey4uLnAsIHJlc291cmNlQm9vc3Q6IFsuLi4ocC5yZXNvdXJjZUJvb3N0IHx8IFtdKSwgeyByZXNvdXJjZTogJ2dvbGQnLCBtdWx0aXBsaWVyOiAyLCBlbmRUaW1lOiBEYXRlLm5vdygpICsgMTIwMDAwIH0sIHsgcmVzb3VyY2U6ICdzdG9uZScsIG11bHRpcGxpZXI6IDIsIGVuZFRpbWU6IERhdGUubm93KCkgKyAxMjAwMDAgfV19KSk7XG4gICAgICAgICAgICAgICAgYWRkVG9Mb2coYFVzZWQgJHtpdGVtLm5hbWV9LiBHb2xkIGFuZCBTdG9uZSBnYXRoZXJpbmcgZG91YmxlZCBmb3IgMiBtaW51dGVzLmAsICdpdGVtJyk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmFubmVyX29mX2NvbW1hbmQnOlxuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJ1ZmZzKHAgPT4gKHsuLi5wLCBwZXJtYW5lbnRUcmFpblRpbWVSZWR1Y3Rpb246IChwLnBlcm1hbmVudFRyYWluVGltZVJlZHVjdGlvbiB8fCAwKSArIDAuMDV9KSk7XG4gICAgICAgICAgICAgICAgYWRkVG9Mb2coYFVzZWQgJHtpdGVtLm5hbWV9LiBNaWxpdGFyeSB1bml0cyB0cmFpbiA1JSBmYXN0ZXIsIHBlcm1hbmVudGx5LmAsICdpdGVtJyk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2hpc3Blcl9vZl90aGVfY3JlYXRvcic6XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza3MgPSBbLi4uYWN0aXZlVGFza3NdOyBzZXRBY3RpdmVUYXNrcyhbXSk7IHRhc2tzLmZvckVhY2goaGFuZGxlVGFza0NvbXBsZXRpb24pO1xuICAgICAgICAgICAgICAgIGFkZFRvTG9nKGBBIGRpdmluZSB3aGlzcGVyIGVjaG9lcywgYW5kIGFsbCB3b3JrIGlzIGluc3RhbnRseSBmaW5pc2hlZC5gLCAnaXRlbScpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnZlbnRvcnkocHJldiA9PiBwcmV2LmZpbHRlcihpID0+IGkuaWQgIT09IGl0ZW1JZCkpOyBzZXRJbnZlbnRvcnlQYW5lbFN0YXRlKHtpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsfSk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBidWlsZGluZ0NvdW50cyA9IGJ1aWxkaW5nTGlzdC5yZWR1Y2UoKGFjYywgYikgPT4geyBhY2NbYi5pZF0gPSBidWlsZGluZ3NbYi5pZCBhcyBzdHJpbmddPy5sZW5ndGggfHwgMDsgcmV0dXJuIGFjYzsgfSwge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPik7XG4gICAgY29uc3QgaWRsZVZpbGxhZ2VyQ291bnQgPSB1bml0cy52aWxsYWdlcnMuZmlsdGVyKHYgPT4gIXYuY3VycmVudFRhc2spLmxlbmd0aDtcbiAgICBjb25zdCBhc3NpZ25tZW50VGFyZ2V0ID0gYXNzaWdubWVudFBhbmVsU3RhdGUudGFyZ2V0VHlwZSA9PT0gJ3Jlc291cmNlJyA/IHJlc291cmNlTm9kZXMuZmluZChuID0+IG4uaWQgPT09IGFzc2lnbm1lbnRQYW5lbFN0YXRlLnRhcmdldElkKSA6IGFjdGl2ZVRhc2tzLmZpbmQodCA9PiB0LnR5cGUgPT09ICdidWlsZCcgJiYgdC5pZCA9PT0gYXNzaWdubWVudFBhbmVsU3RhdGUudGFyZ2V0SWQpO1xuICAgIFxuICAgIGNvbnN0IGN1cnJlbnRBZ2VJbmRleCA9IGFnZVByb2dyZXNzaW9uTGlzdC5maW5kSW5kZXgoYSA9PiBhLm5hbWUgPT09IGN1cnJlbnRBZ2UpO1xuICAgIGNvbnN0IGF2YWlsYWJsZUJ1aWxkaW5ncyA9IGJ1aWxkaW5nTGlzdC5maWx0ZXIoYiA9PiB7XG4gICAgICAgIGNvbnN0IHVubG9ja0FnZUluZGV4ID0gYWdlUHJvZ3Jlc3Npb25MaXN0LmZpbmRJbmRleChhID0+IGEubmFtZSA9PT0gYi51bmxvY2tlZEluQWdlKTtcbiAgICAgICAgcmV0dXJuIGIuaXNBY3RpdmUgJiYgIWIuaXNVcGdyYWRlT25seSAmJiB1bmxvY2tBZ2VJbmRleCAhPT0gLTEgJiYgdW5sb2NrQWdlSW5kZXggPD0gY3VycmVudEFnZUluZGV4O1xuICAgIH0pO1xuXG4gICAgY29uc3QgYWN0aXZlVW5pdHMgPSB1bml0TGlzdC5maWx0ZXIodSA9PiB1LmlzQWN0aXZlKTtcblxuICAgIGNvbnN0IGNsb3NlQWxsUGFuZWxzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBzZXRVbml0TWFuYWdlbWVudFBhbmVsKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgICAgICBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbChwID0+IHAuaXNPcGVuID8geyBpc09wZW46IGZhbHNlLCB0eXBlOiBudWxsLCBpbnN0YW5jZUlkOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0gOiBwKTtcbiAgICAgICAgc2V0QnVpbGRQYW5lbFN0YXRlKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIHZpbGxhZ2VySWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgICAgICBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZShwID0+IHAuaXNPcGVuID8geyBpc09wZW46IGZhbHNlLCB0YXJnZXRJZDogbnVsbCwgdGFyZ2V0VHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9IDogcCk7XG4gICAgICAgIHNldENpdlBhbmVsU3RhdGUocCA9PiBwLmlzT3BlbiA/IHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9IDogcCk7XG4gICAgICAgIHNldEFsbEJ1aWxkaW5nc1BhbmVsKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgICAgICBzZXRJbnZlbnRvcnlQYW5lbFN0YXRlKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGhhbmRsZU9wZW5CdWlsZGluZ1BhbmVsID0gdXNlQ2FsbGJhY2soKHR5cGU6IEJ1aWxkaW5nVHlwZSB8IHN0cmluZywgaW5zdGFuY2VJZDogc3RyaW5nLCByZWN0OiBET01SZWN0KSA9PiB7XG4gICAgICAgIGNsb3NlQWxsUGFuZWxzKCk7XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiB0cnVlLCB0eXBlLCBpbnN0YW5jZUlkLCBhbmNob3JSZWN0OiByZWN0IH0pO1xuICAgIH0sIFtjbG9zZUFsbFBhbmVsc10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgRWxlbWVudDtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0LmNsb3Nlc3QoJy5zY2ktZmktcGFuZWwtcG9wdXAsIFtkYXRhLXJhZGl4LXBvcHBlci1jb250ZW50LXdyYXBwZXJdJykpIGNsb3NlQWxsUGFuZWxzKCk7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZUNsaWNrT3V0c2lkZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVDbGlja091dHNpZGUpO1xuICAgIH0sIFtjbG9zZUFsbFBhbmVsc10pO1xuXG4gICAgY29uc3QgcmVuZGVyQ29udGVudCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGlzQXBwTG9hZGluZykge1xuICAgICAgICAgICAgcmV0dXJuIDxMb2FkaW5nU2NyZWVuIC8+O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnYW1lU3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZVN0YXR1cy5NRU5VOiByZXR1cm4gPFN0YXJ0U2NyZWVuIG9uTmV3R2FtZT17aGFuZGxlU3RhcnROZXdHYW1lfSBvblJlc3VtZUdhbWU9e2hhbmRsZVJlc3VtZUdhbWV9IHNhdmVkR2FtZXM9e2FsbFNhdmVzfSBvbkRlbGV0ZUdhbWU9e2hhbmRsZURlbGV0ZUdhbWV9IC8+O1xuICAgICAgICAgICAgY2FzZSBHYW1lU3RhdHVzLkxPQURJTkc6IHJldHVybiA8TG9hZGluZ1NjcmVlbiAvPjtcbiAgICAgICAgICAgIGNhc2UgR2FtZVN0YXR1cy5QTEFZSU5HOlxuICAgICAgICAgICAgICAgIGlmICghY2l2aWxpemF0aW9uKSByZXR1cm4gPExvYWRpbmdTY3JlZW4gLz47XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxHYW1lVUlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXZpbGl6YXRpb249e2NpdmlsaXphdGlvbn0gcmVzb3VyY2VzPXtyZXNvdXJjZXN9IHVuaXRzPXt1bml0c30gYnVpbGRpbmdzPXtidWlsZGluZ3N9IHBvcHVsYXRpb249e3BvcHVsYXRpb259IGN1cnJlbnRBZ2U9e2N1cnJlbnRBZ2V9IGdhbWVMb2c9e2dhbWVMb2d9IHJlc291cmNlRGVsdGFzPXtyZXNvdXJjZURlbHRhc30gYWN0aXZpdHlTdGF0dXM9e2FjdGl2aXR5U3RhdHVzfSB1bml0TGlzdD17YWN0aXZlVW5pdHN9IGJ1aWxkaW5nTGlzdD17YnVpbGRpbmdMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uT3BlblVuaXRQYW5lbD17KHR5cGUsIHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0VW5pdE1hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogdHJ1ZSwgdHlwZSwgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5CdWlsZGluZ1BhbmVsPXtoYW5kbGVPcGVuQnVpbGRpbmdQYW5lbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5BbGxCdWlsZGluZ3NQYW5lbD17KHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0QWxsQnVpbGRpbmdzUGFuZWwoeyBpc09wZW46IHRydWUsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyQWN0aW9uPXtwbGF5ZXJBY3Rpb259IG9uQ29uZmlybVBsYWNlbWVudD17aGFuZGxlQ29uZmlybVBsYWNlbWVudH0gb25DYW5jZWxQbGF5ZXJBY3Rpb249e2hhbmRsZUNhbmNlbFBsYXllckFjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkJ1aWxkaW5nQ2xpY2s9eyhidWlsZGluZywgcmVjdCkgPT4geyBjbG9zZUFsbFBhbmVscygpOyBjb25zdCB0eXBlID0gT2JqZWN0LmtleXMoYnVpbGRpbmdzKS5maW5kKGtleSA9PiBidWlsZGluZ3Nba2V5IGFzIHN0cmluZ10/LnNvbWUoYiA9PiBiLmlkID09PSBidWlsZGluZy5pZCkpOyBpZih0eXBlKSBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogdHJ1ZSwgdHlwZSwgaW5zdGFuY2VJZDogYnVpbGRpbmcuaWQsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGltZW5zaW9ucz17TUFQX0RJTUVOU0lPTlN9IGFjdGl2ZVRhc2tzPXthY3RpdmVUYXNrc30gb25FeGl0R2FtZT17aGFuZGxlRXhpdEdhbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25PcGVuQ2l2UGFuZWw9eyhyZWN0KSA9PiB7IGNsb3NlQWxsUGFuZWxzKCk7IHNldENpdlBhbmVsU3RhdGUoeyBpc09wZW46IHRydWUsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VOb2Rlcz17cmVzb3VyY2VOb2Rlc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5Bc3NpZ25tZW50UGFuZWw9eyhub2RlSWQsIHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0QXNzaWdubWVudFBhbmVsU3RhdGUoeyBpc09wZW46IHRydWUsIHRhcmdldElkOiBub2RlSWQsIHRhcmdldFR5cGU6ICdyZXNvdXJjZScsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25PcGVuQ29uc3RydWN0aW9uUGFuZWw9eyhjb25zdHJ1Y3Rpb25JZCwgcmVjdCkgPT4geyBjbG9zZUFsbFBhbmVscygpOyBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSh7IGlzT3BlbjogdHJ1ZSwgdGFyZ2V0SWQ6IGNvbnN0cnVjdGlvbklkLCB0YXJnZXRUeXBlOiAnY29uc3RydWN0aW9uJywgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXRoZXJJbmZvPXtHQVRIRVJfSU5GT30gY3VycmVudEV2ZW50PXtjdXJyZW50RXZlbnR9IG9uRXZlbnRDaG9pY2U9e2hhbmRsZUV2ZW50Q2hvaWNlfSBpbnZlbnRvcnk9e2ludmVudG9yeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5JbnZlbnRvcnlQYW5lbD17KHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0SW52ZW50b3J5UGFuZWxTdGF0ZSh7IGlzT3BlbjogdHJ1ZSwgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnVpbGRQYW5lbCBpc09wZW49e2J1aWxkUGFuZWxTdGF0ZS5pc09wZW59IG9uQ2xvc2U9eygpID0+IHNldEJ1aWxkUGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHZpbGxhZ2VySWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSl9IG9uU3RhcnRQbGFjZW1lbnQ9e2hhbmRsZVN0YXJ0UGxhY2VtZW50fSByZXNvdXJjZXM9e3Jlc291cmNlc30gYnVpbGRpbmdDb3VudHM9e2J1aWxkaW5nQ291bnRzfSBidWlsZGluZ0xpc3Q9e2F2YWlsYWJsZUJ1aWxkaW5nc30gYW5jaG9yUmVjdD17YnVpbGRQYW5lbFN0YXRlLmFuY2hvclJlY3R9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VW5pdE1hbmFnZW1lbnRQYW5lbCBpc09wZW49e3VuaXRNYW5hZ2VtZW50UGFuZWwuaXNPcGVufSBvbkNsb3NlPXsoKSA9PiBzZXRVbml0TWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KX0gdHlwZT17dW5pdE1hbmFnZW1lbnRQYW5lbC50eXBlfSB1bml0cz17dW5pdHN9IG9uVXBkYXRlVW5pdD17aGFuZGxlVXBkYXRlVW5pdH0gb25EaXNtaXNzVW5pdD17aGFuZGxlRGlzbWlzc1NwZWNpZmljVW5pdH0gb25Jbml0aWF0ZUJ1aWxkPXsodmlsbGFnZXJJZCwgcmVjdCkgPT4geyBjbG9zZUFsbFBhbmVscygpOyBoYW5kbGVJbml0aWF0ZUJ1aWxkKHZpbGxhZ2VySWQsIHJlY3QpOyB9fSBnZXRWaWxsYWdlclRhc2tEZXRhaWxzPXtnZXRWaWxsYWdlclRhc2tEZXRhaWxzfSBhbmNob3JSZWN0PXt1bml0TWFuYWdlbWVudFBhbmVsLmFuY2hvclJlY3R9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwgaXNPcGVuPXtidWlsZGluZ01hbmFnZW1lbnRQYW5lbC5pc09wZW59IG9uQ2xvc2U9eygpID0+IHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KX0gcGFuZWxTdGF0ZT17YnVpbGRpbmdNYW5hZ2VtZW50UGFuZWx9IGJ1aWxkaW5ncz17YnVpbGRpbmdzfSBidWlsZGluZ0xpc3Q9e2J1aWxkaW5nTGlzdH0gb25VcGRhdGVCdWlsZGluZz17aGFuZGxlVXBkYXRlQnVpbGRpbmd9IG9uRGVtb2xpc2hCdWlsZGluZz17aGFuZGxlRGVtb2xpc2hCdWlsZGluZ30gb25UcmFpblVuaXRzPXtoYW5kbGVUcmFpblVuaXRzfSBvblRyYWluVmlsbGFnZXJzPXtoYW5kbGVUcmFpblZpbGxhZ2Vyc30gb25VcGdyYWRlQnVpbGRpbmc9e2hhbmRsZVVwZ3JhZGVCdWlsZGluZ30gcmVzb3VyY2VzPXtyZXNvdXJjZXN9IHBvcHVsYXRpb249e3BvcHVsYXRpb259IHVuaXRMaXN0PXthY3RpdmVVbml0c30gb25BZHZhbmNlQWdlPXtoYW5kbGVBZHZhbmNlQWdlfSBhY3RpdmVUYXNrcz17YWN0aXZlVGFza3N9IGFuY2hvclJlY3Q9e2J1aWxkaW5nTWFuYWdlbWVudFBhbmVsLmFuY2hvclJlY3R9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UmVzb3VyY2VBc3NpZ25tZW50UGFuZWwgaXNPcGVuPXthc3NpZ25tZW50UGFuZWxTdGF0ZS5pc09wZW59IG9uQ2xvc2U9eygpID0+IHNldEFzc2lnbm1lbnRQYW5lbFN0YXRlKHsgaXNPcGVuOiBmYWxzZSwgdGFyZ2V0SWQ6IG51bGwsIHRhcmdldFR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSl9IGFzc2lnbm1lbnRUYXJnZXQ9e2Fzc2lnbm1lbnRUYXJnZXQgfHwgbnVsbH0gaWRsZVZpbGxhZ2VyQ291bnQ9e2lkbGVWaWxsYWdlckNvdW50fSBvbkFzc2lnblZpbGxhZ2Vycz17aGFuZGxlQXNzaWduVmlsbGFnZXJzfSBvblJlY2FsbFZpbGxhZ2Vycz17aGFuZGxlUmVjYWxsVmlsbGFnZXJzfSBnYXRoZXJJbmZvPXtHQVRIRVJfSU5GT30gYnVpbGRpbmdMaXN0PXtidWlsZGluZ0xpc3R9IHVuaXRzPXt1bml0c30gYW5jaG9yUmVjdD17YXNzaWdubWVudFBhbmVsU3RhdGUuYW5jaG9yUmVjdH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaXZpbGl6YXRpb25QYW5lbCBpc09wZW49e2NpdlBhbmVsU3RhdGUuaXNPcGVufSBvbkNsb3NlPXsoKSA9PiBzZXRDaXZQYW5lbFN0YXRlKHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9KX0gY2l2aWxpemF0aW9uPXtjaXZpbGl6YXRpb259IGFuY2hvclJlY3Q9e2NpdlBhbmVsU3RhdGUuYW5jaG9yUmVjdH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBbGxCdWlsZGluZ3NQYW5lbCBpc09wZW49e2FsbEJ1aWxkaW5nc1BhbmVsLmlzT3Blbn0gb25DbG9zZT17KCkgPT4gc2V0QWxsQnVpbGRpbmdzUGFuZWwoeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pfSBidWlsZGluZ0xpc3Q9e2J1aWxkaW5nTGlzdH0gYnVpbGRpbmdDb3VudHM9e2J1aWxkaW5nQ291bnRzfSBhY3RpdmVUYXNrcz17YWN0aXZlVGFza3N9IG9uT3BlbkJ1aWxkaW5nUGFuZWw9e2hhbmRsZU9wZW5CdWlsZGluZ1BhbmVsfSBhbmNob3JSZWN0PXthbGxCdWlsZGluZ3NQYW5lbC5hbmNob3JSZWN0fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEludmVudG9yeVBhbmVsIGlzT3Blbj17aW52ZW50b3J5UGFuZWxTdGF0ZS5pc09wZW59IG9uQ2xvc2U9eygpID0+IHNldEludmVudG9yeVBhbmVsU3RhdGUoeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pfSBpbnZlbnRvcnk9e2ludmVudG9yeX0gb25Vc2VJdGVtPXtoYW5kbGVVc2VJdGVtfSBhY3RpdmVUYXNrcz17YWN0aXZlVGFza3N9IGFjdGl2ZUJ1ZmZzPXthY3RpdmVCdWZmc30gYW5jaG9yUmVjdD17aW52ZW50b3J5UGFuZWxTdGF0ZS5hbmNob3JSZWN0fSAvPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDxTdGFydFNjcmVlbiBvbk5ld0dhbWU9e2hhbmRsZVN0YXJ0TmV3R2FtZX0gb25SZXN1bWVHYW1lPXtoYW5kbGVSZXN1bWVHYW1lfSBzYXZlZEdhbWVzPXthbGxTYXZlc30gb25EZWxldGVHYW1lPXtoYW5kbGVEZWxldGVHYW1lfSAvPjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBiZy1zdG9uZS1kYXJrIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNFwiPlxuICAgICAgICAgICAge2dhbWVTdGF0ZSA9PT0gR2FtZVN0YXR1cy5QTEFZSU5HICYmIChcbiAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVUb2dnbGVVbmxpbWl0ZWRSZXNvdXJjZXN9IGNsYXNzTmFtZT1cImZpeGVkIGJvdHRvbS00IGxlZnQtNCB6LVsxMDFdIGJnLWJyYW5kLWdvbGQgdGV4dC1zdG9uZS1kYXJrIGZvbnQtYm9sZCBweS0xIHB4LTMgcm91bmRlZC1mdWxsIHRleHQteHMgc2hhZG93LWxnIGhvdmVyOnNjYWxlLTEwNSB0cmFuc2l0aW9uLXRyYW5zZm9ybVwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgdW5saW1pdGVkIHJlc291cmNlcyB0ZXN0IG1vZGVcIj5UZXN0IE1vZGU6IHt1bmxpbWl0ZWRSZXNvdXJjZXMgPyAnT04nIDogJ09GRid9PC9idXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPE5vdGlmaWNhdGlvbk1hbmFnZXIgbm90aWZpY2F0aW9ucz17bm90aWZpY2F0aW9uc30gb25SZW1vdmVOb3RpZmljYXRpb249e3JlbW92ZU5vdGlmaWNhdGlvbn0gLz5cbiAgICAgICAgICAgIDxtYWluIGNsYXNzTmFtZT1cInctZnVsbCBtYXgtdy03eGwgbXgtYXV0b1wiPlxuICAgICAgICAgICAgICAgIHtyZW5kZXJDb250ZW50KCl9XG4gICAgICAgICAgICA8L21haW4+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHYW1lUGFnZTtcblxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZU1lbW8iLCJHYW1lU3RhdHVzIiwiZ2V0UHJlZGVmaW5lZENpdmlsaXphdGlvbiIsImdldFByZWRlZmluZWRHYW1lRXZlbnQiLCJzYXZlR2FtZVN0YXRlIiwibG9hZEdhbWVTdGF0ZSIsImdldEFsbFNhdmVOYW1lcyIsImRlbGV0ZUdhbWVTdGF0ZSIsImdldEFsbEFnZUNvbmZpZ3MiLCJnZXRBbGxCdWlsZGluZ0NvbmZpZ3MiLCJnZXRBbGxVbml0Q29uZmlncyIsInNhdmVBZ2VDb25maWciLCJzYXZlQnVpbGRpbmdDb25maWciLCJzYXZlVW5pdENvbmZpZyIsImdldFJhbmRvbU5hbWVzIiwiR0FNRV9JVEVNUyIsIklOSVRJQUxfQUdFUyIsIklOSVRJQUxfQlVJTERJTkdTIiwiSU5JVElBTF9VTklUUyIsIkdhbWVVSSIsIlN0YXJ0U2NyZWVuIiwiTG9hZGluZ1NjcmVlbiIsIkJ1aWxkUGFuZWwiLCJOb3RpZmljYXRpb25NYW5hZ2VyIiwiVW5pdE1hbmFnZW1lbnRQYW5lbCIsIkJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsIiwiUmVzb3VyY2VBc3NpZ25tZW50UGFuZWwiLCJDaXZpbGl6YXRpb25QYW5lbCIsIkFsbEJ1aWxkaW5nc1BhbmVsIiwiSW52ZW50b3J5UGFuZWwiLCJHQVRIRVJfSU5GTyIsImZvb2QiLCJyYXRlIiwid29vZCIsImdvbGQiLCJzdG9uZSIsImluaXRpYWxCdWlsZGluZ3NTdGF0ZSIsImhvdXNlcyIsImJhcnJhY2tzIiwiYXJjaGVyeVJhbmdlIiwic3RhYmxlIiwic2llZ2VXb3Jrc2hvcCIsImJsYWNrc21pdGgiLCJ3YXRjaFRvd2VyIiwidG93bkNlbnRlciIsIk1BUF9ESU1FTlNJT05TIiwid2lkdGgiLCJoZWlnaHQiLCJHYW1lUGFnZSIsImdhbWVTdGF0ZSIsInNldEdhbWVTdGF0ZSIsIkxPQURJTkciLCJjaXZpbGl6YXRpb24iLCJzZXRDaXZpbGl6YXRpb24iLCJyZXNvdXJjZXMiLCJzZXRSZXNvdXJjZXMiLCJ1bml0cyIsInNldFVuaXRzIiwidmlsbGFnZXJzIiwibWlsaXRhcnkiLCJidWlsZGluZ3MiLCJzZXRCdWlsZGluZ3MiLCJjdXJyZW50QWdlIiwic2V0Q3VycmVudEFnZSIsImdhbWVMb2ciLCJzZXRHYW1lTG9nIiwiY3VycmVudEV2ZW50Iiwic2V0Q3VycmVudEV2ZW50IiwicmVzb3VyY2VEZWx0YXMiLCJzZXRSZXNvdXJjZURlbHRhcyIsImFjdGl2aXR5U3RhdHVzIiwic2V0QWN0aXZpdHlTdGF0dXMiLCJub3RpZmljYXRpb25zIiwic2V0Tm90aWZpY2F0aW9ucyIsInVubGltaXRlZFJlc291cmNlcyIsInNldFVubGltaXRlZFJlc291cmNlcyIsImFsbFNhdmVzIiwic2V0QWxsU2F2ZXMiLCJjdXJyZW50U2F2ZU5hbWUiLCJzZXRDdXJyZW50U2F2ZU5hbWUiLCJwbGF5ZXJBY3Rpb24iLCJzZXRQbGF5ZXJBY3Rpb24iLCJhY3RpdmVUYXNrcyIsInNldEFjdGl2ZVRhc2tzIiwicmVzb3VyY2VOb2RlcyIsInNldFJlc291cmNlTm9kZXMiLCJpbnZlbnRvcnkiLCJzZXRJbnZlbnRvcnkiLCJhY3RpdmVCdWZmcyIsInNldEFjdGl2ZUJ1ZmZzIiwicmVzb3VyY2VCb29zdCIsIm1hc3RlckFnZUxpc3QiLCJzZXRNYXN0ZXJBZ2VMaXN0IiwibWFzdGVyQnVpbGRpbmdMaXN0Iiwic2V0TWFzdGVyQnVpbGRpbmdMaXN0IiwibWFzdGVyVW5pdExpc3QiLCJzZXRNYXN0ZXJVbml0TGlzdCIsImlzQXBwTG9hZGluZyIsInNldElzQXBwTG9hZGluZyIsImJ1aWxkUGFuZWxTdGF0ZSIsInNldEJ1aWxkUGFuZWxTdGF0ZSIsImlzT3BlbiIsInZpbGxhZ2VySWQiLCJhbmNob3JSZWN0IiwidW5pdE1hbmFnZW1lbnRQYW5lbCIsInNldFVuaXRNYW5hZ2VtZW50UGFuZWwiLCJ0eXBlIiwiYnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwiLCJzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCIsImluc3RhbmNlSWQiLCJhbGxCdWlsZGluZ3NQYW5lbCIsInNldEFsbEJ1aWxkaW5nc1BhbmVsIiwiYXNzaWdubWVudFBhbmVsU3RhdGUiLCJzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSIsInRhcmdldElkIiwidGFyZ2V0VHlwZSIsImNpdlBhbmVsU3RhdGUiLCJzZXRDaXZQYW5lbFN0YXRlIiwiaW52ZW50b3J5UGFuZWxTdGF0ZSIsInNldEludmVudG9yeVBhbmVsU3RhdGUiLCJkZWx0YVRpbWVvdXRSZWYiLCJldmVudFRpbWVyUmVmIiwibGFzdFRpY2tSZWYiLCJEYXRlIiwibm93IiwiYW5pbWF0aW9uRnJhbWVSZWYiLCJhZ2VQcm9ncmVzc2lvbkxpc3QiLCJmaWx0ZXIiLCJhZ2UiLCJpc0FjdGl2ZSIsImJ1aWxkaW5nTGlzdCIsInVuaXRMaXN0IiwicG9wdWxhdGlvbkNhcGFjaXR5IiwiY2FwYWNpdHkiLCJidWlsZGluZ1R5cGUiLCJidWlsZGluZ0luZm8iLCJmaW5kIiwiYiIsImlkIiwibGVuZ3RoIiwicG9wdWxhdGlvbiIsIm1pbGl0YXJ5UG9wIiwicmVkdWNlIiwiYWNjIiwidW5pdCIsInVuaXRJbmZvIiwidSIsInVuaXRUeXBlIiwicG9wdWxhdGlvbkNvc3QiLCJjdXJyZW50IiwiZmV0Y2hTYXZlc0FuZENvbmZpZ3MiLCJhbGxBZ2VDb25maWdzIiwibmFtZXMiLCJhZ2VNYXAiLCJNYXAiLCJtYXAiLCJpdGVtIiwiYWdlc05lZWRVcGRhdGUiLCJpbmRleCIsInBJdGVtIiwiZW50cmllcyIsImV4aXN0aW5nSXRlbSIsImdldCIsIm5hbWUiLCJuZXdJdGVtIiwiaXNQcmVkZWZpbmVkIiwib3JkZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiYWxsQnVpbGRpbmdDb25maWdzIiwiYnVpbGRpbmdNYXAiLCJidWlsZGluZ3NOZWVkVXBkYXRlIiwiZGVmYXVsdEFnZSIsInVubG9ja2VkSW5BZ2UiLCJhbGxVbml0Q29uZmlncyIsInVuaXRNYXAiLCJ1bml0c05lZWRVcGRhdGUiLCJpbml0aWFsVW5pdHNXaXRoSWRzIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwidHJlZUlkIiwiZXJyb3IiLCJjb25zb2xlIiwiYWdlcyIsImEiLCJpIiwiTUVOVSIsIlBMQVlJTkciLCJmdWxsU3RhdGUiLCJhZGROb3RpZmljYXRpb24iLCJtZXNzYWdlIiwiTWF0aCIsInJhbmRvbSIsInByZXYiLCJyZW1vdmVOb3RpZmljYXRpb24iLCJuIiwiYWRkVG9Mb2ciLCJpY29uIiwic2xpY2UiLCJ1cGRhdGVSZXNvdXJjZXMiLCJkZWx0YXMiLCJuZXdSZXNvdXJjZXMiLCJrZXkiLCJyZXNvdXJjZUtleSIsIm1heCIsIndpbmRvdyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJuZXdEZWx0YXMiLCJoYW5kbGVUYXNrQ29tcGxldGlvbiIsInRhc2siLCJwYXlsb2FkIiwidmlsbGFnZXJJZHMiLCJ2IiwiaW5jbHVkZXMiLCJjdXJyZW50VGFzayIsInBvc2l0aW9uIiwibmV3QnVpbGRpbmciLCJjdXJyZW50SHAiLCJocCIsInAiLCJjdXJyZW50QnVpbGRpbmdzIiwiaWNvbklkIiwib3JpZ2luYWxCdWlsZGluZ0lkIiwib3JpZ2luYWxCdWlsZGluZ1R5cGUiLCJ0YXJnZXRCdWlsZGluZ1R5cGUiLCJvcmlnaW5hbEJ1aWxkaW5nIiwidGFyZ2V0QnVpbGRpbmdJbmZvIiwibmV3QnVpbGRpbmdzIiwiY291bnQiLCJuZXdWaWxsYWdlck5hbWVzIiwibmV3VmlsbGFnZXJzIiwibmV3VW5pdE5hbWVzIiwibmV3VW5pdHMiLCJ0aXRsZSIsImFjdGl2ZUFnZXMiLCJjdXJyZW50SW5kZXgiLCJmaW5kSW5kZXgiLCJhZ2VSZXN1bHQiLCJkZXNjcmlwdGlvbiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZ2FtZUxvb3AiLCJkZWx0YVRpbWUiLCJjb21wbGV0ZWRUYXNrcyIsInJlc291cmNlRGVsdGFzVGhpc1RpY2siLCJPYmplY3QiLCJ2YWx1ZXMiLCJmbGF0IiwiZm9yRWFjaCIsImluc3RhbmNlIiwiY29uZmlnIiwia2V5cyIsInNvbWUiLCJiSW5zdCIsImdlbmVyYXRlc1Jlc291cmNlIiwiZ2VuZXJhdGlvblJhdGUiLCJhbW91bnRQZXJTZWNvbmQiLCJtYWludGVuYW5jZUNvc3QiLCJyZXMiLCJjb3N0IiwiY29zdFBlclNlY29uZCIsIm5ld1Jlc291cmNlQm9vc3RzIiwiZW5kVGltZSIsInRhc2tzSW5Qcm9ncmVzcyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicHVzaCIsIm5vZGUiLCJyZXNvdXJjZU5vZGVJZCIsInZpbGxhZ2VyQ291bnQiLCJiYXNlUmF0ZVBlclNlY29uZCIsImNpdkJvbnVzTXVsdGlwbGllciIsImJvbnVzIiwibWF0Y2giLCJwYXJzZUludCIsIml0ZW1Cb29zdE11bHRpcGxpZXIiLCJyZXNvdXJjZSIsIm11bHRpcGxpZXIiLCJmaW5hbFJhdGVQZXJTZWNvbmQiLCJCb29sZWFuIiwicHJldk5vZGVzIiwiYW1vdW50VG9EZWNyZW1lbnQiLCJuZXdBbW91bnQiLCJhbW91bnQiLCJ0YXNrSWQiLCJ0IiwiZmxvb3IiLCJmaW5hbEFjdGl2ZVRhc2tzIiwiY3QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJoYW5kbGVOZXdFdmVudCIsImV2ZW50Iiwic2NoZWR1bGVOZXh0RXZlbnQiLCJnZW5lcmF0ZVJlc291cmNlTm9kZXMiLCJleGlzdGluZ1Bvc2l0aW9ucyIsIm5vZGVzIiwidHlwZXMiLCJudW1Ob2RlcyIsInBvcyIsIngiLCJ5IiwiaGFzIiwiYWRkIiwiaGFuZGxlU3RhcnROZXdHYW1lIiwic2F2ZU5hbWUiLCJsb2NhbEFnZVByb2dyZXNzaW9uTGlzdCIsImNvbmZpZ3MiLCJjaXYiLCJpbml0aWFsVmlsbGFnZXJzIiwidGNQb3NpdGlvbiIsInRjSW5mbyIsImluaXRpYWxUQyIsIlNldCIsImlzVmlsbGFnZXJCdXN5IiwiZ2V0VmlsbGFnZXJUYXNrRGV0YWlscyIsInZpbGxhZ2VyIiwiaGFuZGxlUmVzdW1lR2FtZSIsInNhdmVkU3RhdGUiLCJtaWdyYXRlZFZpbGxhZ2VycyIsInVuZGVmaW5lZCIsIm1pZ3JhdGVkVGFza3MiLCJ2aWQiLCJjb25zdHJ1Y3Rpb25UYXNrcyIsIm9jY3VwaWVkQ2VsbHMiLCJmaW5hbEJ1aWxkaW5ncyIsImJUeXBlIiwiaW5mbyIsInRjUG9zIiwiaGFuZGxlRXZlbnRDaG9pY2UiLCJjaG9pY2UiLCJtaXNzaW5nIiwiam9pbiIsImsiLCJpc1N1Y2Nlc3MiLCJzdWNjZXNzQ2hhbmNlIiwiZWZmZWN0cyIsInN1Y2Nlc3NFZmZlY3RzIiwiZmFpbHVyZUVmZmVjdHMiLCJsb2dNZXNzYWdlIiwidGV4dCIsImxvZyIsInJld2FyZHMiLCJyZXdhcmQiLCJBcnJheSIsImlzQXJyYXkiLCJhYnMiLCJpdGVtSW5mbyIsIml0ZW1JZCIsIm5ld0l0ZW1zIiwiZnJvbSIsIl8iLCJidWlsZGluZ0lkIiwicGxhY2VkIiwiaGFuZGxlSW5pdGlhdGVCdWlsZCIsInJlY3QiLCJoYW5kbGVTdGFydFBsYWNlbWVudCIsImV4aXN0aW5nQ291bnQiLCJjb25zdHJ1Y3RpbmdDb3VudCIsInRvdGFsQ291bnQiLCJsaW1pdCIsImJ1aWxkTGltaXQiLCJtb2RlIiwiaGFuZGxlQ29uZmlybVBsYWNlbWVudCIsImJ1aWxkZXIiLCJidWlsZFRpbWUiLCJidWlsZFRpbWVSZWR1Y3Rpb24iLCJwZXJjZW50YWdlIiwidXNlcyIsInRhc2tQYXlsb2FkIiwiaGFuZGxlQ2FuY2VsUGxheWVyQWN0aW9uIiwiaGFuZGxlRGVtb2xpc2hCdWlsZGluZyIsImJ1aWxkaW5nSW5zdGFuY2UiLCJjYXBhY2l0eVdpdGhvdXRUaGlzQnVpbGRpbmciLCJyZWZ1bmQiLCJyIiwiaGFuZGxlVXBkYXRlQnVpbGRpbmciLCJoYW5kbGVVcGdyYWRlQnVpbGRpbmciLCJidWlsZGluZyIsInVwZ3JhZGVQYXRoIiwidGltZSIsImhhbmRsZVRyYWluVmlsbGFnZXJzIiwidG90YWxDb3N0IiwiaGFuZGxlVHJhaW5Vbml0cyIsInRvdGFsUG9wdWxhdGlvbkNvc3QiLCJ0cmFpbmluZ0J1aWxkaW5nIiwicmVxdWlyZWRCdWlsZGluZyIsInRyYWluVGltZSIsInBlcm1hbmVudFRyYWluVGltZVJlZHVjdGlvbiIsInRyYWluVGltZVJlZHVjdGlvbiIsImFwcGxpY2FibGUiLCJtaW4iLCJoYW5kbGVEaXNtaXNzU3BlY2lmaWNVbml0IiwidW5pdFR5cGVOYW1lIiwiaGFuZGxlVXBkYXRlVW5pdCIsImhhbmRsZUFzc2lnblZpbGxhZ2Vyc1RvQ29uc3RydWN0aW9uIiwiY29uc3RydWN0aW9uSWQiLCJpZGxlVmlsbGFnZXJzIiwiY2FwcGVkQ291bnQiLCJ2aWxsYWdlcnNUb0Fzc2lnbiIsIndvcmtEb25lIiwid29ya1JlbWFpbmluZyIsIm5ld1dvcmtlckNvdW50IiwibmV3UmVtYWluaW5nRHVyYXRpb24iLCJoYW5kbGVBc3NpZ25WaWxsYWdlcnMiLCJ0YXJnZXROb2RlIiwiZXhpc3RpbmdUYXNrIiwiaGFuZGxlUmVjYWxsVmlsbGFnZXJzIiwidmlsbGFnZXJzVG9SZWNhbGwiLCJyZW1haW5pbmdWaWxsYWdlcnMiLCJoYW5kbGVBZHZhbmNlQWdlIiwiaGFuZGxlRXhpdEdhbWUiLCJoYW5kbGVEZWxldGVHYW1lIiwiaGFuZGxlVG9nZ2xlVW5saW1pdGVkUmVzb3VyY2VzIiwibmV3TW9kZSIsImRlcGxldGVkTm9kZUlkcyIsInNpemUiLCJoYW5kbGVVc2VJdGVtIiwiYmFzZUl0ZW1JZCIsInNwbGl0Iiwic29ydCIsInRhc2tzIiwiYnVpbGRpbmdDb3VudHMiLCJpZGxlVmlsbGFnZXJDb3VudCIsImFzc2lnbm1lbnRUYXJnZXQiLCJjdXJyZW50QWdlSW5kZXgiLCJhdmFpbGFibGVCdWlsZGluZ3MiLCJ1bmxvY2tBZ2VJbmRleCIsImlzVXBncmFkZU9ubHkiLCJhY3RpdmVVbml0cyIsImNsb3NlQWxsUGFuZWxzIiwiaGFuZGxlT3BlbkJ1aWxkaW5nUGFuZWwiLCJoYW5kbGVDbGlja091dHNpZGUiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbmRlckNvbnRlbnQiLCJvbk5ld0dhbWUiLCJvblJlc3VtZUdhbWUiLCJzYXZlZEdhbWVzIiwib25EZWxldGVHYW1lIiwib25PcGVuVW5pdFBhbmVsIiwib25PcGVuQnVpbGRpbmdQYW5lbCIsIm9uT3BlbkFsbEJ1aWxkaW5nc1BhbmVsIiwib25Db25maXJtUGxhY2VtZW50Iiwib25DYW5jZWxQbGF5ZXJBY3Rpb24iLCJvbkJ1aWxkaW5nQ2xpY2siLCJtYXBEaW1lbnNpb25zIiwib25FeGl0R2FtZSIsIm9uT3BlbkNpdlBhbmVsIiwib25PcGVuQXNzaWdubWVudFBhbmVsIiwibm9kZUlkIiwib25PcGVuQ29uc3RydWN0aW9uUGFuZWwiLCJnYXRoZXJJbmZvIiwib25FdmVudENob2ljZSIsIm9uT3BlbkludmVudG9yeVBhbmVsIiwib25DbG9zZSIsIm9uU3RhcnRQbGFjZW1lbnQiLCJvblVwZGF0ZVVuaXQiLCJvbkRpc21pc3NVbml0Iiwib25Jbml0aWF0ZUJ1aWxkIiwicGFuZWxTdGF0ZSIsIm9uVXBkYXRlQnVpbGRpbmciLCJvbkRlbW9saXNoQnVpbGRpbmciLCJvblRyYWluVW5pdHMiLCJvblRyYWluVmlsbGFnZXJzIiwib25VcGdyYWRlQnVpbGRpbmciLCJvbkFkdmFuY2VBZ2UiLCJvbkFzc2lnblZpbGxhZ2VycyIsIm9uUmVjYWxsVmlsbGFnZXJzIiwib25Vc2VJdGVtIiwiZGl2IiwiY2xhc3NOYW1lIiwiYnV0dG9uIiwib25DbGljayIsImFyaWEtbGFiZWwiLCJvblJlbW92ZU5vdGlmaWNhdGlvbiIsIm1haW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ })

});