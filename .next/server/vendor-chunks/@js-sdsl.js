"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@js-sdsl";
exports.ids = ["vendor-chunks/@js-sdsl"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@js-sdsl/ordered-map/dist/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrderedMap: () => (/* binding */ OrderedMap)\n/* harmony export */ });\nvar extendStatics = function(e, r) {\n    extendStatics = Object.setPrototypeOf || {\n        __proto__: []\n    } instanceof Array && function(e, r) {\n        e.__proto__ = r;\n    } || function(e, r) {\n        for (var t in r) if (Object.prototype.hasOwnProperty.call(r, t)) e[t] = r[t];\n    };\n    return extendStatics(e, r);\n};\n\nfunction __extends(e, r) {\n    if (typeof r !== \"function\" && r !== null) throw new TypeError(\"Class extends value \" + String(r) + \" is not a constructor or null\");\n    extendStatics(e, r);\n    function __() {\n        this.constructor = e;\n    }\n    e.prototype = r === null ? Object.create(r) : (__.prototype = r.prototype, new __);\n}\n\nfunction __generator(e, r) {\n    var t = {\n        label: 0,\n        sent: function() {\n            if (s[0] & 1) throw s[1];\n            return s[1];\n        },\n        trys: [],\n        ops: []\n    }, i, n, s, h;\n    return h = {\n        next: verb(0),\n        throw: verb(1),\n        return: verb(2)\n    }, typeof Symbol === \"function\" && (h[Symbol.iterator] = function() {\n        return this;\n    }), h;\n    function verb(e) {\n        return function(r) {\n            return step([ e, r ]);\n        };\n    }\n    function step(a) {\n        if (i) throw new TypeError(\"Generator is already executing.\");\n        while (h && (h = 0, a[0] && (t = 0)), t) try {\n            if (i = 1, n && (s = a[0] & 2 ? n[\"return\"] : a[0] ? n[\"throw\"] || ((s = n[\"return\"]) && s.call(n), \n            0) : n.next) && !(s = s.call(n, a[1])).done) return s;\n            if (n = 0, s) a = [ a[0] & 2, s.value ];\n            switch (a[0]) {\n              case 0:\n              case 1:\n                s = a;\n                break;\n\n              case 4:\n                t.label++;\n                return {\n                    value: a[1],\n                    done: false\n                };\n\n              case 5:\n                t.label++;\n                n = a[1];\n                a = [ 0 ];\n                continue;\n\n              case 7:\n                a = t.ops.pop();\n                t.trys.pop();\n                continue;\n\n              default:\n                if (!(s = t.trys, s = s.length > 0 && s[s.length - 1]) && (a[0] === 6 || a[0] === 2)) {\n                    t = 0;\n                    continue;\n                }\n                if (a[0] === 3 && (!s || a[1] > s[0] && a[1] < s[3])) {\n                    t.label = a[1];\n                    break;\n                }\n                if (a[0] === 6 && t.label < s[1]) {\n                    t.label = s[1];\n                    s = a;\n                    break;\n                }\n                if (s && t.label < s[2]) {\n                    t.label = s[2];\n                    t.ops.push(a);\n                    break;\n                }\n                if (s[2]) t.ops.pop();\n                t.trys.pop();\n                continue;\n            }\n            a = r.call(e, t);\n        } catch (e) {\n            a = [ 6, e ];\n            n = 0;\n        } finally {\n            i = s = 0;\n        }\n        if (a[0] & 5) throw a[1];\n        return {\n            value: a[0] ? a[1] : void 0,\n            done: true\n        };\n    }\n}\n\ntypeof SuppressedError === \"function\" ? SuppressedError : function(e, r, t) {\n    var i = new Error(t);\n    return i.name = \"SuppressedError\", i.error = e, i.suppressed = r, i;\n};\n\nvar TreeNode = function() {\n    function TreeNode(e, r, t) {\n        if (t === void 0) {\n            t = 1;\n        }\n        this.t = undefined;\n        this.i = undefined;\n        this.h = undefined;\n        this.u = e;\n        this.o = r;\n        this.l = t;\n    }\n    TreeNode.prototype.v = function() {\n        var e = this;\n        var r = e.h.h === e;\n        if (r && e.l === 1) {\n            e = e.i;\n        } else if (e.t) {\n            e = e.t;\n            while (e.i) {\n                e = e.i;\n            }\n        } else {\n            if (r) {\n                return e.h;\n            }\n            var t = e.h;\n            while (t.t === e) {\n                e = t;\n                t = e.h;\n            }\n            e = t;\n        }\n        return e;\n    };\n    TreeNode.prototype.p = function() {\n        var e = this;\n        if (e.i) {\n            e = e.i;\n            while (e.t) {\n                e = e.t;\n            }\n            return e;\n        } else {\n            var r = e.h;\n            while (r.i === e) {\n                e = r;\n                r = e.h;\n            }\n            if (e.i !== r) {\n                return r;\n            } else return e;\n        }\n    };\n    TreeNode.prototype.T = function() {\n        var e = this.h;\n        var r = this.i;\n        var t = r.t;\n        if (e.h === this) e.h = r; else if (e.t === this) e.t = r; else e.i = r;\n        r.h = e;\n        r.t = this;\n        this.h = r;\n        this.i = t;\n        if (t) t.h = this;\n        return r;\n    };\n    TreeNode.prototype.I = function() {\n        var e = this.h;\n        var r = this.t;\n        var t = r.i;\n        if (e.h === this) e.h = r; else if (e.t === this) e.t = r; else e.i = r;\n        r.h = e;\n        r.i = this;\n        this.h = r;\n        this.t = t;\n        if (t) t.h = this;\n        return r;\n    };\n    return TreeNode;\n}();\n\nvar TreeNodeEnableIndex = function(e) {\n    __extends(TreeNodeEnableIndex, e);\n    function TreeNodeEnableIndex() {\n        var r = e !== null && e.apply(this, arguments) || this;\n        r.O = 1;\n        return r;\n    }\n    TreeNodeEnableIndex.prototype.T = function() {\n        var r = e.prototype.T.call(this);\n        this.M();\n        r.M();\n        return r;\n    };\n    TreeNodeEnableIndex.prototype.I = function() {\n        var r = e.prototype.I.call(this);\n        this.M();\n        r.M();\n        return r;\n    };\n    TreeNodeEnableIndex.prototype.M = function() {\n        this.O = 1;\n        if (this.t) {\n            this.O += this.t.O;\n        }\n        if (this.i) {\n            this.O += this.i.O;\n        }\n    };\n    return TreeNodeEnableIndex;\n}(TreeNode);\n\nvar ContainerIterator = function() {\n    function ContainerIterator(e) {\n        if (e === void 0) {\n            e = 0;\n        }\n        this.iteratorType = e;\n    }\n    ContainerIterator.prototype.equals = function(e) {\n        return this.C === e.C;\n    };\n    return ContainerIterator;\n}();\n\nvar Base = function() {\n    function Base() {\n        this._ = 0;\n    }\n    Object.defineProperty(Base.prototype, \"length\", {\n        get: function() {\n            return this._;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Base.prototype.size = function() {\n        return this._;\n    };\n    Base.prototype.empty = function() {\n        return this._ === 0;\n    };\n    return Base;\n}();\n\nvar Container = function(e) {\n    __extends(Container, e);\n    function Container() {\n        return e !== null && e.apply(this, arguments) || this;\n    }\n    return Container;\n}(Base);\n\nfunction throwIteratorAccessError() {\n    throw new RangeError(\"Iterator access denied!\");\n}\n\nvar TreeContainer = function(e) {\n    __extends(TreeContainer, e);\n    function TreeContainer(r, t) {\n        if (r === void 0) {\n            r = function(e, r) {\n                if (e < r) return -1;\n                if (e > r) return 1;\n                return 0;\n            };\n        }\n        if (t === void 0) {\n            t = false;\n        }\n        var i = e.call(this) || this;\n        i.N = undefined;\n        i.g = r;\n        i.enableIndex = t;\n        i.S = t ? TreeNodeEnableIndex : TreeNode;\n        i.A = new i.S;\n        return i;\n    }\n    TreeContainer.prototype.m = function(e, r) {\n        var t = this.A;\n        while (e) {\n            var i = this.g(e.u, r);\n            if (i < 0) {\n                e = e.i;\n            } else if (i > 0) {\n                t = e;\n                e = e.t;\n            } else return e;\n        }\n        return t;\n    };\n    TreeContainer.prototype.B = function(e, r) {\n        var t = this.A;\n        while (e) {\n            var i = this.g(e.u, r);\n            if (i <= 0) {\n                e = e.i;\n            } else {\n                t = e;\n                e = e.t;\n            }\n        }\n        return t;\n    };\n    TreeContainer.prototype.j = function(e, r) {\n        var t = this.A;\n        while (e) {\n            var i = this.g(e.u, r);\n            if (i < 0) {\n                t = e;\n                e = e.i;\n            } else if (i > 0) {\n                e = e.t;\n            } else return e;\n        }\n        return t;\n    };\n    TreeContainer.prototype.k = function(e, r) {\n        var t = this.A;\n        while (e) {\n            var i = this.g(e.u, r);\n            if (i < 0) {\n                t = e;\n                e = e.i;\n            } else {\n                e = e.t;\n            }\n        }\n        return t;\n    };\n    TreeContainer.prototype.R = function(e) {\n        while (true) {\n            var r = e.h;\n            if (r === this.A) return;\n            if (e.l === 1) {\n                e.l = 0;\n                return;\n            }\n            if (e === r.t) {\n                var t = r.i;\n                if (t.l === 1) {\n                    t.l = 0;\n                    r.l = 1;\n                    if (r === this.N) {\n                        this.N = r.T();\n                    } else r.T();\n                } else {\n                    if (t.i && t.i.l === 1) {\n                        t.l = r.l;\n                        r.l = 0;\n                        t.i.l = 0;\n                        if (r === this.N) {\n                            this.N = r.T();\n                        } else r.T();\n                        return;\n                    } else if (t.t && t.t.l === 1) {\n                        t.l = 1;\n                        t.t.l = 0;\n                        t.I();\n                    } else {\n                        t.l = 1;\n                        e = r;\n                    }\n                }\n            } else {\n                var t = r.t;\n                if (t.l === 1) {\n                    t.l = 0;\n                    r.l = 1;\n                    if (r === this.N) {\n                        this.N = r.I();\n                    } else r.I();\n                } else {\n                    if (t.t && t.t.l === 1) {\n                        t.l = r.l;\n                        r.l = 0;\n                        t.t.l = 0;\n                        if (r === this.N) {\n                            this.N = r.I();\n                        } else r.I();\n                        return;\n                    } else if (t.i && t.i.l === 1) {\n                        t.l = 1;\n                        t.i.l = 0;\n                        t.T();\n                    } else {\n                        t.l = 1;\n                        e = r;\n                    }\n                }\n            }\n        }\n    };\n    TreeContainer.prototype.G = function(e) {\n        if (this._ === 1) {\n            this.clear();\n            return;\n        }\n        var r = e;\n        while (r.t || r.i) {\n            if (r.i) {\n                r = r.i;\n                while (r.t) r = r.t;\n            } else {\n                r = r.t;\n            }\n            var t = e.u;\n            e.u = r.u;\n            r.u = t;\n            var i = e.o;\n            e.o = r.o;\n            r.o = i;\n            e = r;\n        }\n        if (this.A.t === r) {\n            this.A.t = r.h;\n        } else if (this.A.i === r) {\n            this.A.i = r.h;\n        }\n        this.R(r);\n        var n = r.h;\n        if (r === n.t) {\n            n.t = undefined;\n        } else n.i = undefined;\n        this._ -= 1;\n        this.N.l = 0;\n        if (this.enableIndex) {\n            while (n !== this.A) {\n                n.O -= 1;\n                n = n.h;\n            }\n        }\n    };\n    TreeContainer.prototype.P = function(e) {\n        var r = typeof e === \"number\" ? e : undefined;\n        var t = typeof e === \"function\" ? e : undefined;\n        var i = typeof e === \"undefined\" ? [] : undefined;\n        var n = 0;\n        var s = this.N;\n        var h = [];\n        while (h.length || s) {\n            if (s) {\n                h.push(s);\n                s = s.t;\n            } else {\n                s = h.pop();\n                if (n === r) return s;\n                i && i.push(s);\n                t && t(s, n, this);\n                n += 1;\n                s = s.i;\n            }\n        }\n        return i;\n    };\n    TreeContainer.prototype.q = function(e) {\n        while (true) {\n            var r = e.h;\n            if (r.l === 0) return;\n            var t = r.h;\n            if (r === t.t) {\n                var i = t.i;\n                if (i && i.l === 1) {\n                    i.l = r.l = 0;\n                    if (t === this.N) return;\n                    t.l = 1;\n                    e = t;\n                    continue;\n                } else if (e === r.i) {\n                    e.l = 0;\n                    if (e.t) {\n                        e.t.h = r;\n                    }\n                    if (e.i) {\n                        e.i.h = t;\n                    }\n                    r.i = e.t;\n                    t.t = e.i;\n                    e.t = r;\n                    e.i = t;\n                    if (t === this.N) {\n                        this.N = e;\n                        this.A.h = e;\n                    } else {\n                        var n = t.h;\n                        if (n.t === t) {\n                            n.t = e;\n                        } else n.i = e;\n                    }\n                    e.h = t.h;\n                    r.h = e;\n                    t.h = e;\n                    t.l = 1;\n                } else {\n                    r.l = 0;\n                    if (t === this.N) {\n                        this.N = t.I();\n                    } else t.I();\n                    t.l = 1;\n                    return;\n                }\n            } else {\n                var i = t.t;\n                if (i && i.l === 1) {\n                    i.l = r.l = 0;\n                    if (t === this.N) return;\n                    t.l = 1;\n                    e = t;\n                    continue;\n                } else if (e === r.t) {\n                    e.l = 0;\n                    if (e.t) {\n                        e.t.h = t;\n                    }\n                    if (e.i) {\n                        e.i.h = r;\n                    }\n                    t.i = e.t;\n                    r.t = e.i;\n                    e.t = t;\n                    e.i = r;\n                    if (t === this.N) {\n                        this.N = e;\n                        this.A.h = e;\n                    } else {\n                        var n = t.h;\n                        if (n.t === t) {\n                            n.t = e;\n                        } else n.i = e;\n                    }\n                    e.h = t.h;\n                    r.h = e;\n                    t.h = e;\n                    t.l = 1;\n                } else {\n                    r.l = 0;\n                    if (t === this.N) {\n                        this.N = t.T();\n                    } else t.T();\n                    t.l = 1;\n                    return;\n                }\n            }\n            if (this.enableIndex) {\n                r.M();\n                t.M();\n                e.M();\n            }\n            return;\n        }\n    };\n    TreeContainer.prototype.D = function(e, r, t) {\n        if (this.N === undefined) {\n            this._ += 1;\n            this.N = new this.S(e, r, 0);\n            this.N.h = this.A;\n            this.A.h = this.A.t = this.A.i = this.N;\n            return this._;\n        }\n        var i;\n        var n = this.A.t;\n        var s = this.g(n.u, e);\n        if (s === 0) {\n            n.o = r;\n            return this._;\n        } else if (s > 0) {\n            n.t = new this.S(e, r);\n            n.t.h = n;\n            i = n.t;\n            this.A.t = i;\n        } else {\n            var h = this.A.i;\n            var a = this.g(h.u, e);\n            if (a === 0) {\n                h.o = r;\n                return this._;\n            } else if (a < 0) {\n                h.i = new this.S(e, r);\n                h.i.h = h;\n                i = h.i;\n                this.A.i = i;\n            } else {\n                if (t !== undefined) {\n                    var u = t.C;\n                    if (u !== this.A) {\n                        var f = this.g(u.u, e);\n                        if (f === 0) {\n                            u.o = r;\n                            return this._;\n                        } else if (f > 0) {\n                            var o = u.v();\n                            var d = this.g(o.u, e);\n                            if (d === 0) {\n                                o.o = r;\n                                return this._;\n                            } else if (d < 0) {\n                                i = new this.S(e, r);\n                                if (o.i === undefined) {\n                                    o.i = i;\n                                    i.h = o;\n                                } else {\n                                    u.t = i;\n                                    i.h = u;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (i === undefined) {\n                    i = this.N;\n                    while (true) {\n                        var c = this.g(i.u, e);\n                        if (c > 0) {\n                            if (i.t === undefined) {\n                                i.t = new this.S(e, r);\n                                i.t.h = i;\n                                i = i.t;\n                                break;\n                            }\n                            i = i.t;\n                        } else if (c < 0) {\n                            if (i.i === undefined) {\n                                i.i = new this.S(e, r);\n                                i.i.h = i;\n                                i = i.i;\n                                break;\n                            }\n                            i = i.i;\n                        } else {\n                            i.o = r;\n                            return this._;\n                        }\n                    }\n                }\n            }\n        }\n        if (this.enableIndex) {\n            var l = i.h;\n            while (l !== this.A) {\n                l.O += 1;\n                l = l.h;\n            }\n        }\n        this.q(i);\n        this._ += 1;\n        return this._;\n    };\n    TreeContainer.prototype.F = function(e, r) {\n        while (e) {\n            var t = this.g(e.u, r);\n            if (t < 0) {\n                e = e.i;\n            } else if (t > 0) {\n                e = e.t;\n            } else return e;\n        }\n        return e || this.A;\n    };\n    TreeContainer.prototype.clear = function() {\n        this._ = 0;\n        this.N = undefined;\n        this.A.h = undefined;\n        this.A.t = this.A.i = undefined;\n    };\n    TreeContainer.prototype.updateKeyByIterator = function(e, r) {\n        var t = e.C;\n        if (t === this.A) {\n            throwIteratorAccessError();\n        }\n        if (this._ === 1) {\n            t.u = r;\n            return true;\n        }\n        var i = t.p().u;\n        if (t === this.A.t) {\n            if (this.g(i, r) > 0) {\n                t.u = r;\n                return true;\n            }\n            return false;\n        }\n        var n = t.v().u;\n        if (t === this.A.i) {\n            if (this.g(n, r) < 0) {\n                t.u = r;\n                return true;\n            }\n            return false;\n        }\n        if (this.g(n, r) >= 0 || this.g(i, r) <= 0) return false;\n        t.u = r;\n        return true;\n    };\n    TreeContainer.prototype.eraseElementByPos = function(e) {\n        if (e < 0 || e > this._ - 1) {\n            throw new RangeError;\n        }\n        var r = this.P(e);\n        this.G(r);\n        return this._;\n    };\n    TreeContainer.prototype.eraseElementByKey = function(e) {\n        if (this._ === 0) return false;\n        var r = this.F(this.N, e);\n        if (r === this.A) return false;\n        this.G(r);\n        return true;\n    };\n    TreeContainer.prototype.eraseElementByIterator = function(e) {\n        var r = e.C;\n        if (r === this.A) {\n            throwIteratorAccessError();\n        }\n        var t = r.i === undefined;\n        var i = e.iteratorType === 0;\n        if (i) {\n            if (t) e.next();\n        } else {\n            if (!t || r.t === undefined) e.next();\n        }\n        this.G(r);\n        return e;\n    };\n    TreeContainer.prototype.getHeight = function() {\n        if (this._ === 0) return 0;\n        function traversal(e) {\n            if (!e) return 0;\n            return Math.max(traversal(e.t), traversal(e.i)) + 1;\n        }\n        return traversal(this.N);\n    };\n    return TreeContainer;\n}(Container);\n\nvar TreeIterator = function(e) {\n    __extends(TreeIterator, e);\n    function TreeIterator(r, t, i) {\n        var n = e.call(this, i) || this;\n        n.C = r;\n        n.A = t;\n        if (n.iteratorType === 0) {\n            n.pre = function() {\n                if (this.C === this.A.t) {\n                    throwIteratorAccessError();\n                }\n                this.C = this.C.v();\n                return this;\n            };\n            n.next = function() {\n                if (this.C === this.A) {\n                    throwIteratorAccessError();\n                }\n                this.C = this.C.p();\n                return this;\n            };\n        } else {\n            n.pre = function() {\n                if (this.C === this.A.i) {\n                    throwIteratorAccessError();\n                }\n                this.C = this.C.p();\n                return this;\n            };\n            n.next = function() {\n                if (this.C === this.A) {\n                    throwIteratorAccessError();\n                }\n                this.C = this.C.v();\n                return this;\n            };\n        }\n        return n;\n    }\n    Object.defineProperty(TreeIterator.prototype, \"index\", {\n        get: function() {\n            var e = this.C;\n            var r = this.A.h;\n            if (e === this.A) {\n                if (r) {\n                    return r.O - 1;\n                }\n                return 0;\n            }\n            var t = 0;\n            if (e.t) {\n                t += e.t.O;\n            }\n            while (e !== r) {\n                var i = e.h;\n                if (e === i.i) {\n                    t += 1;\n                    if (i.t) {\n                        t += i.t.O;\n                    }\n                }\n                e = i;\n            }\n            return t;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TreeIterator.prototype.isAccessible = function() {\n        return this.C !== this.A;\n    };\n    return TreeIterator;\n}(ContainerIterator);\n\nvar OrderedMapIterator = function(e) {\n    __extends(OrderedMapIterator, e);\n    function OrderedMapIterator(r, t, i, n) {\n        var s = e.call(this, r, t, n) || this;\n        s.container = i;\n        return s;\n    }\n    Object.defineProperty(OrderedMapIterator.prototype, \"pointer\", {\n        get: function() {\n            if (this.C === this.A) {\n                throwIteratorAccessError();\n            }\n            var e = this;\n            return new Proxy([], {\n                get: function(r, t) {\n                    if (t === \"0\") return e.C.u; else if (t === \"1\") return e.C.o;\n                    r[0] = e.C.u;\n                    r[1] = e.C.o;\n                    return r[t];\n                },\n                set: function(r, t, i) {\n                    if (t !== \"1\") {\n                        throw new TypeError(\"prop must be 1\");\n                    }\n                    e.C.o = i;\n                    return true;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    OrderedMapIterator.prototype.copy = function() {\n        return new OrderedMapIterator(this.C, this.A, this.container, this.iteratorType);\n    };\n    return OrderedMapIterator;\n}(TreeIterator);\n\nvar OrderedMap = function(e) {\n    __extends(OrderedMap, e);\n    function OrderedMap(r, t, i) {\n        if (r === void 0) {\n            r = [];\n        }\n        var n = e.call(this, t, i) || this;\n        var s = n;\n        r.forEach((function(e) {\n            s.setElement(e[0], e[1]);\n        }));\n        return n;\n    }\n    OrderedMap.prototype.begin = function() {\n        return new OrderedMapIterator(this.A.t || this.A, this.A, this);\n    };\n    OrderedMap.prototype.end = function() {\n        return new OrderedMapIterator(this.A, this.A, this);\n    };\n    OrderedMap.prototype.rBegin = function() {\n        return new OrderedMapIterator(this.A.i || this.A, this.A, this, 1);\n    };\n    OrderedMap.prototype.rEnd = function() {\n        return new OrderedMapIterator(this.A, this.A, this, 1);\n    };\n    OrderedMap.prototype.front = function() {\n        if (this._ === 0) return;\n        var e = this.A.t;\n        return [ e.u, e.o ];\n    };\n    OrderedMap.prototype.back = function() {\n        if (this._ === 0) return;\n        var e = this.A.i;\n        return [ e.u, e.o ];\n    };\n    OrderedMap.prototype.lowerBound = function(e) {\n        var r = this.m(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.upperBound = function(e) {\n        var r = this.B(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.reverseLowerBound = function(e) {\n        var r = this.j(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.reverseUpperBound = function(e) {\n        var r = this.k(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.forEach = function(e) {\n        this.P((function(r, t, i) {\n            e([ r.u, r.o ], t, i);\n        }));\n    };\n    OrderedMap.prototype.setElement = function(e, r, t) {\n        return this.D(e, r, t);\n    };\n    OrderedMap.prototype.getElementByPos = function(e) {\n        if (e < 0 || e > this._ - 1) {\n            throw new RangeError;\n        }\n        var r = this.P(e);\n        return [ r.u, r.o ];\n    };\n    OrderedMap.prototype.find = function(e) {\n        var r = this.F(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.getElementByKey = function(e) {\n        var r = this.F(this.N, e);\n        return r.o;\n    };\n    OrderedMap.prototype.union = function(e) {\n        var r = this;\n        e.forEach((function(e) {\n            r.setElement(e[0], e[1]);\n        }));\n        return this._;\n    };\n    OrderedMap.prototype[Symbol.iterator] = function() {\n        var e, r, t, i;\n        return __generator(this, (function(n) {\n            switch (n.label) {\n              case 0:\n                e = this._;\n                r = this.P();\n                t = 0;\n                n.label = 1;\n\n              case 1:\n                if (!(t < e)) return [ 3, 4 ];\n                i = r[t];\n                return [ 4, [ i.u, i.o ] ];\n\n              case 2:\n                n.sent();\n                n.label = 3;\n\n              case 3:\n                ++t;\n                return [ 3, 1 ];\n\n              case 4:\n                return [ 2 ];\n            }\n        }));\n    };\n    return OrderedMap;\n}(TreeContainer);\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AanMtc2RzbC9vcmRlcmVkLW1hcC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZ0NBQWdDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZ0NBQWdDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7O0FBRXFCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2VtaW5pLWVtcGlyZXMvLi9ub2RlX21vZHVsZXMvQGpzLXNkc2wvb3JkZXJlZC1tYXAvZGlzdC9lc20vaW5kZXguanM/MDQ0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHtcbiAgICAgICAgX19wcm90b19fOiBbXVxuICAgIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbihlLCByKSB7XG4gICAgICAgIGUuX19wcm90b19fID0gcjtcbiAgICB9IHx8IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgICAgZm9yICh2YXIgdCBpbiByKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsIHQpKSBlW3RdID0gclt0XTtcbiAgICB9O1xuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGUsIHIpO1xufTtcblxuZnVuY3Rpb24gX19leHRlbmRzKGUsIHIpIHtcbiAgICBpZiAodHlwZW9mIHIgIT09IFwiZnVuY3Rpb25cIiAmJiByICE9PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhyKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgZXh0ZW5kU3RhdGljcyhlLCByKTtcbiAgICBmdW5jdGlvbiBfXygpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGU7XG4gICAgfVxuICAgIGUucHJvdG90eXBlID0gciA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUocikgOiAoX18ucHJvdG90eXBlID0gci5wcm90b3R5cGUsIG5ldyBfXyk7XG59XG5cbmZ1bmN0aW9uIF9fZ2VuZXJhdG9yKGUsIHIpIHtcbiAgICB2YXIgdCA9IHtcbiAgICAgICAgbGFiZWw6IDAsXG4gICAgICAgIHNlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHNbMF0gJiAxKSB0aHJvdyBzWzFdO1xuICAgICAgICAgICAgcmV0dXJuIHNbMV07XG4gICAgICAgIH0sXG4gICAgICAgIHRyeXM6IFtdLFxuICAgICAgICBvcHM6IFtdXG4gICAgfSwgaSwgbiwgcywgaDtcbiAgICByZXR1cm4gaCA9IHtcbiAgICAgICAgbmV4dDogdmVyYigwKSxcbiAgICAgICAgdGhyb3c6IHZlcmIoMSksXG4gICAgICAgIHJldHVybjogdmVyYigyKVxuICAgIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoaFtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pLCBoO1xuICAgIGZ1bmN0aW9uIHZlcmIoZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXAoWyBlLCByIF0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGVwKGEpIHtcbiAgICAgICAgaWYgKGkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoaCAmJiAoaCA9IDAsIGFbMF0gJiYgKHQgPSAwKSksIHQpIHRyeSB7XG4gICAgICAgICAgICBpZiAoaSA9IDEsIG4gJiYgKHMgPSBhWzBdICYgMiA/IG5bXCJyZXR1cm5cIl0gOiBhWzBdID8gbltcInRocm93XCJdIHx8ICgocyA9IG5bXCJyZXR1cm5cIl0pICYmIHMuY2FsbChuKSwgXG4gICAgICAgICAgICAwKSA6IG4ubmV4dCkgJiYgIShzID0gcy5jYWxsKG4sIGFbMV0pKS5kb25lKSByZXR1cm4gcztcbiAgICAgICAgICAgIGlmIChuID0gMCwgcykgYSA9IFsgYVswXSAmIDIsIHMudmFsdWUgXTtcbiAgICAgICAgICAgIHN3aXRjaCAoYVswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBzID0gYTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgdC5sYWJlbCsrO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhWzFdLFxuICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHQubGFiZWwrKztcbiAgICAgICAgICAgICAgICBuID0gYVsxXTtcbiAgICAgICAgICAgICAgICBhID0gWyAwIF07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGEgPSB0Lm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB0LnRyeXMucG9wKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoIShzID0gdC50cnlzLCBzID0gcy5sZW5ndGggPiAwICYmIHNbcy5sZW5ndGggLSAxXSkgJiYgKGFbMF0gPT09IDYgfHwgYVswXSA9PT0gMikpIHtcbiAgICAgICAgICAgICAgICAgICAgdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYVswXSA9PT0gMyAmJiAoIXMgfHwgYVsxXSA+IHNbMF0gJiYgYVsxXSA8IHNbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgIHQubGFiZWwgPSBhWzFdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFbMF0gPT09IDYgJiYgdC5sYWJlbCA8IHNbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdC5sYWJlbCA9IHNbMV07XG4gICAgICAgICAgICAgICAgICAgIHMgPSBhO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMgJiYgdC5sYWJlbCA8IHNbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgdC5sYWJlbCA9IHNbMl07XG4gICAgICAgICAgICAgICAgICAgIHQub3BzLnB1c2goYSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc1syXSkgdC5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgdC50cnlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYSA9IHIuY2FsbChlLCB0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYSA9IFsgNiwgZSBdO1xuICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpID0gcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFbMF0gJiA1KSB0aHJvdyBhWzFdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGFbMF0gPyBhWzFdIDogdm9pZCAwLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxudHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24oZSwgciwgdCkge1xuICAgIHZhciBpID0gbmV3IEVycm9yKHQpO1xuICAgIHJldHVybiBpLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBpLmVycm9yID0gZSwgaS5zdXBwcmVzc2VkID0gciwgaTtcbn07XG5cbnZhciBUcmVlTm9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFRyZWVOb2RlKGUsIHIsIHQpIHtcbiAgICAgICAgaWYgKHQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy51ID0gZTtcbiAgICAgICAgdGhpcy5vID0gcjtcbiAgICAgICAgdGhpcy5sID0gdDtcbiAgICB9XG4gICAgVHJlZU5vZGUucHJvdG90eXBlLnYgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICB2YXIgciA9IGUuaC5oID09PSBlO1xuICAgICAgICBpZiAociAmJiBlLmwgPT09IDEpIHtcbiAgICAgICAgICAgIGUgPSBlLmk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS50KSB7XG4gICAgICAgICAgICBlID0gZS50O1xuICAgICAgICAgICAgd2hpbGUgKGUuaSkge1xuICAgICAgICAgICAgICAgIGUgPSBlLmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdCA9IGUuaDtcbiAgICAgICAgICAgIHdoaWxlICh0LnQgPT09IGUpIHtcbiAgICAgICAgICAgICAgICBlID0gdDtcbiAgICAgICAgICAgICAgICB0ID0gZS5oO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZSA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfTtcbiAgICBUcmVlTm9kZS5wcm90b3R5cGUucCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIGlmIChlLmkpIHtcbiAgICAgICAgICAgIGUgPSBlLmk7XG4gICAgICAgICAgICB3aGlsZSAoZS50KSB7XG4gICAgICAgICAgICAgICAgZSA9IGUudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHIgPSBlLmg7XG4gICAgICAgICAgICB3aGlsZSAoci5pID09PSBlKSB7XG4gICAgICAgICAgICAgICAgZSA9IHI7XG4gICAgICAgICAgICAgICAgciA9IGUuaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLmkgIT09IHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVHJlZU5vZGUucHJvdG90eXBlLlQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmg7XG4gICAgICAgIHZhciByID0gdGhpcy5pO1xuICAgICAgICB2YXIgdCA9IHIudDtcbiAgICAgICAgaWYgKGUuaCA9PT0gdGhpcykgZS5oID0gcjsgZWxzZSBpZiAoZS50ID09PSB0aGlzKSBlLnQgPSByOyBlbHNlIGUuaSA9IHI7XG4gICAgICAgIHIuaCA9IGU7XG4gICAgICAgIHIudCA9IHRoaXM7XG4gICAgICAgIHRoaXMuaCA9IHI7XG4gICAgICAgIHRoaXMuaSA9IHQ7XG4gICAgICAgIGlmICh0KSB0LmggPSB0aGlzO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIFRyZWVOb2RlLnByb3RvdHlwZS5JID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5oO1xuICAgICAgICB2YXIgciA9IHRoaXMudDtcbiAgICAgICAgdmFyIHQgPSByLmk7XG4gICAgICAgIGlmIChlLmggPT09IHRoaXMpIGUuaCA9IHI7IGVsc2UgaWYgKGUudCA9PT0gdGhpcykgZS50ID0gcjsgZWxzZSBlLmkgPSByO1xuICAgICAgICByLmggPSBlO1xuICAgICAgICByLmkgPSB0aGlzO1xuICAgICAgICB0aGlzLmggPSByO1xuICAgICAgICB0aGlzLnQgPSB0O1xuICAgICAgICBpZiAodCkgdC5oID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICByZXR1cm4gVHJlZU5vZGU7XG59KCk7XG5cbnZhciBUcmVlTm9kZUVuYWJsZUluZGV4ID0gZnVuY3Rpb24oZSkge1xuICAgIF9fZXh0ZW5kcyhUcmVlTm9kZUVuYWJsZUluZGV4LCBlKTtcbiAgICBmdW5jdGlvbiBUcmVlTm9kZUVuYWJsZUluZGV4KCkge1xuICAgICAgICB2YXIgciA9IGUgIT09IG51bGwgJiYgZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIHIuTyA9IDE7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbiAgICBUcmVlTm9kZUVuYWJsZUluZGV4LnByb3RvdHlwZS5UID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByID0gZS5wcm90b3R5cGUuVC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLk0oKTtcbiAgICAgICAgci5NKCk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG4gICAgVHJlZU5vZGVFbmFibGVJbmRleC5wcm90b3R5cGUuSSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgciA9IGUucHJvdG90eXBlLkkuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5NKCk7XG4gICAgICAgIHIuTSgpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xuICAgIFRyZWVOb2RlRW5hYmxlSW5kZXgucHJvdG90eXBlLk0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5PID0gMTtcbiAgICAgICAgaWYgKHRoaXMudCkge1xuICAgICAgICAgICAgdGhpcy5PICs9IHRoaXMudC5PO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmkpIHtcbiAgICAgICAgICAgIHRoaXMuTyArPSB0aGlzLmkuTztcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRyZWVOb2RlRW5hYmxlSW5kZXg7XG59KFRyZWVOb2RlKTtcblxudmFyIENvbnRhaW5lckl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVySXRlcmF0b3IoZSkge1xuICAgICAgICBpZiAoZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBlID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLml0ZXJhdG9yVHlwZSA9IGU7XG4gICAgfVxuICAgIENvbnRhaW5lckl0ZXJhdG9yLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkMgPT09IGUuQztcbiAgICB9O1xuICAgIHJldHVybiBDb250YWluZXJJdGVyYXRvcjtcbn0oKTtcblxudmFyIEJhc2UgPSBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBCYXNlKCkge1xuICAgICAgICB0aGlzLl8gPSAwO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZS5wcm90b3R5cGUsIFwibGVuZ3RoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl87XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCYXNlLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl87XG4gICAgfTtcbiAgICBCYXNlLnByb3RvdHlwZS5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fID09PSAwO1xuICAgIH07XG4gICAgcmV0dXJuIEJhc2U7XG59KCk7XG5cbnZhciBDb250YWluZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgX19leHRlbmRzKENvbnRhaW5lciwgZSk7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVyKCkge1xuICAgICAgICByZXR1cm4gZSAhPT0gbnVsbCAmJiBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIENvbnRhaW5lcjtcbn0oQmFzZSk7XG5cbmZ1bmN0aW9uIHRocm93SXRlcmF0b3JBY2Nlc3NFcnJvcigpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkl0ZXJhdG9yIGFjY2VzcyBkZW5pZWQhXCIpO1xufVxuXG52YXIgVHJlZUNvbnRhaW5lciA9IGZ1bmN0aW9uKGUpIHtcbiAgICBfX2V4dGVuZHMoVHJlZUNvbnRhaW5lciwgZSk7XG4gICAgZnVuY3Rpb24gVHJlZUNvbnRhaW5lcihyLCB0KSB7XG4gICAgICAgIGlmIChyID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHIgPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgPCByKSByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgaWYgKGUgPiByKSByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gZS5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIGkuTiA9IHVuZGVmaW5lZDtcbiAgICAgICAgaS5nID0gcjtcbiAgICAgICAgaS5lbmFibGVJbmRleCA9IHQ7XG4gICAgICAgIGkuUyA9IHQgPyBUcmVlTm9kZUVuYWJsZUluZGV4IDogVHJlZU5vZGU7XG4gICAgICAgIGkuQSA9IG5ldyBpLlM7XG4gICAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBUcmVlQ29udGFpbmVyLnByb3RvdHlwZS5tID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgICB2YXIgdCA9IHRoaXMuQTtcbiAgICAgICAgd2hpbGUgKGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5nKGUudSwgcik7XG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICBlID0gZS5pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgIHQgPSBlO1xuICAgICAgICAgICAgICAgIGUgPSBlLnQ7XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICBUcmVlQ29udGFpbmVyLnByb3RvdHlwZS5CID0gZnVuY3Rpb24oZSwgcikge1xuICAgICAgICB2YXIgdCA9IHRoaXMuQTtcbiAgICAgICAgd2hpbGUgKGUpIHtcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5nKGUudSwgcik7XG4gICAgICAgICAgICBpZiAoaSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgZSA9IGUuaTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdCA9IGU7XG4gICAgICAgICAgICAgICAgZSA9IGUudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIFRyZWVDb250YWluZXIucHJvdG90eXBlLmogPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5BO1xuICAgICAgICB3aGlsZSAoZSkge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmcoZS51LCByKTtcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHQgPSBlO1xuICAgICAgICAgICAgICAgIGUgPSBlLmk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgZSA9IGUudDtcbiAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIFRyZWVDb250YWluZXIucHJvdG90eXBlLmsgPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5BO1xuICAgICAgICB3aGlsZSAoZSkge1xuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmcoZS51LCByKTtcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHQgPSBlO1xuICAgICAgICAgICAgICAgIGUgPSBlLmk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUgPSBlLnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICBUcmVlQ29udGFpbmVyLnByb3RvdHlwZS5SID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdmFyIHIgPSBlLmg7XG4gICAgICAgICAgICBpZiAociA9PT0gdGhpcy5BKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoZS5sID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZS5sID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZSA9PT0gci50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLmk7XG4gICAgICAgICAgICAgICAgaWYgKHQubCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0LmwgPSAwO1xuICAgICAgICAgICAgICAgICAgICByLmwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAociA9PT0gdGhpcy5OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLk4gPSByLlQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHIuVCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmkgJiYgdC5pLmwgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubCA9IHIubDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIubCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmkubCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAociA9PT0gdGhpcy5OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5OID0gci5UKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugci5UKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC50ICYmIHQudC5sID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmwgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdC50LmwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5JKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmwgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci50O1xuICAgICAgICAgICAgICAgIGlmICh0LmwgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdC5sID0gMDtcbiAgICAgICAgICAgICAgICAgICAgci5sID0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgPT09IHRoaXMuTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5OID0gci5JKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSByLkkoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodC50ICYmIHQudC5sID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmwgPSByLmw7XG4gICAgICAgICAgICAgICAgICAgICAgICByLmwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdC50LmwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgPT09IHRoaXMuTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuTiA9IHIuSSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHIuSSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQuaSAmJiB0LmkubCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5sID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuaS5sID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuVCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5sID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSByO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUcmVlQ29udGFpbmVyLnByb3RvdHlwZS5HID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAodGhpcy5fID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIgPSBlO1xuICAgICAgICB3aGlsZSAoci50IHx8IHIuaSkge1xuICAgICAgICAgICAgaWYgKHIuaSkge1xuICAgICAgICAgICAgICAgIHIgPSByLmk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHIudCkgciA9IHIudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgciA9IHIudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0ID0gZS51O1xuICAgICAgICAgICAgZS51ID0gci51O1xuICAgICAgICAgICAgci51ID0gdDtcbiAgICAgICAgICAgIHZhciBpID0gZS5vO1xuICAgICAgICAgICAgZS5vID0gci5vO1xuICAgICAgICAgICAgci5vID0gaTtcbiAgICAgICAgICAgIGUgPSByO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLkEudCA9PT0gcikge1xuICAgICAgICAgICAgdGhpcy5BLnQgPSByLmg7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5BLmkgPT09IHIpIHtcbiAgICAgICAgICAgIHRoaXMuQS5pID0gci5oO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuUihyKTtcbiAgICAgICAgdmFyIG4gPSByLmg7XG4gICAgICAgIGlmIChyID09PSBuLnQpIHtcbiAgICAgICAgICAgIG4udCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIG4uaSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fIC09IDE7XG4gICAgICAgIHRoaXMuTi5sID0gMDtcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlSW5kZXgpIHtcbiAgICAgICAgICAgIHdoaWxlIChuICE9PSB0aGlzLkEpIHtcbiAgICAgICAgICAgICAgICBuLk8gLT0gMTtcbiAgICAgICAgICAgICAgICBuID0gbi5oO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUcmVlQ29udGFpbmVyLnByb3RvdHlwZS5QID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgciA9IHR5cGVvZiBlID09PSBcIm51bWJlclwiID8gZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHQgPSB0eXBlb2YgZSA9PT0gXCJmdW5jdGlvblwiID8gZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGkgPSB0eXBlb2YgZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFtdIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgIHZhciBzID0gdGhpcy5OO1xuICAgICAgICB2YXIgaCA9IFtdO1xuICAgICAgICB3aGlsZSAoaC5sZW5ndGggfHwgcykge1xuICAgICAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgICAgICBoLnB1c2gocyk7XG4gICAgICAgICAgICAgICAgcyA9IHMudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcyA9IGgucG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKG4gPT09IHIpIHJldHVybiBzO1xuICAgICAgICAgICAgICAgIGkgJiYgaS5wdXNoKHMpO1xuICAgICAgICAgICAgICAgIHQgJiYgdChzLCBuLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBuICs9IDE7XG4gICAgICAgICAgICAgICAgcyA9IHMuaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaTtcbiAgICB9O1xuICAgIFRyZWVDb250YWluZXIucHJvdG90eXBlLnEgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgciA9IGUuaDtcbiAgICAgICAgICAgIGlmIChyLmwgPT09IDApIHJldHVybjtcbiAgICAgICAgICAgIHZhciB0ID0gci5oO1xuICAgICAgICAgICAgaWYgKHIgPT09IHQudCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdC5pO1xuICAgICAgICAgICAgICAgIGlmIChpICYmIGkubCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpLmwgPSByLmwgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gdGhpcy5OKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHQubCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGUgPSB0O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUgPT09IHIuaSkge1xuICAgICAgICAgICAgICAgICAgICBlLmwgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnQuaCA9IHI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5pLmggPSB0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHIuaSA9IGUudDtcbiAgICAgICAgICAgICAgICAgICAgdC50ID0gZS5pO1xuICAgICAgICAgICAgICAgICAgICBlLnQgPSByO1xuICAgICAgICAgICAgICAgICAgICBlLmkgPSB0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gdGhpcy5OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLk4gPSBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5BLmggPSBlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0Lmg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobi50ID09PSB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi50ID0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBuLmkgPSBlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGUuaCA9IHQuaDtcbiAgICAgICAgICAgICAgICAgICAgci5oID0gZTtcbiAgICAgICAgICAgICAgICAgICAgdC5oID0gZTtcbiAgICAgICAgICAgICAgICAgICAgdC5sID0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByLmwgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gdGhpcy5OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLk4gPSB0LkkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHQuSSgpO1xuICAgICAgICAgICAgICAgICAgICB0LmwgPSAxO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHQudDtcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiBpLmwgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaS5sID0gci5sID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IHRoaXMuTikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB0LmwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBlID0gdDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlID09PSByLnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5sID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS50LmggPSB0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaS5oID0gcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0LmkgPSBlLnQ7XG4gICAgICAgICAgICAgICAgICAgIHIudCA9IGUuaTtcbiAgICAgICAgICAgICAgICAgICAgZS50ID0gdDtcbiAgICAgICAgICAgICAgICAgICAgZS5pID0gcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IHRoaXMuTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5OID0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuQS5oID0gZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdC5oO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4udCA9PT0gdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4udCA9IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugbi5pID0gZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlLmggPSB0Lmg7XG4gICAgICAgICAgICAgICAgICAgIHIuaCA9IGU7XG4gICAgICAgICAgICAgICAgICAgIHQuaCA9IGU7XG4gICAgICAgICAgICAgICAgICAgIHQubCA9IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgci5sID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IHRoaXMuTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5OID0gdC5UKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0LlQoKTtcbiAgICAgICAgICAgICAgICAgICAgdC5sID0gMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgci5NKCk7XG4gICAgICAgICAgICAgICAgdC5NKCk7XG4gICAgICAgICAgICAgICAgZS5NKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRyZWVDb250YWluZXIucHJvdG90eXBlLkQgPSBmdW5jdGlvbihlLCByLCB0KSB7XG4gICAgICAgIGlmICh0aGlzLk4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fICs9IDE7XG4gICAgICAgICAgICB0aGlzLk4gPSBuZXcgdGhpcy5TKGUsIHIsIDApO1xuICAgICAgICAgICAgdGhpcy5OLmggPSB0aGlzLkE7XG4gICAgICAgICAgICB0aGlzLkEuaCA9IHRoaXMuQS50ID0gdGhpcy5BLmkgPSB0aGlzLk47XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbiA9IHRoaXMuQS50O1xuICAgICAgICB2YXIgcyA9IHRoaXMuZyhuLnUsIGUpO1xuICAgICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICAgICAgbi5vID0gcjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl87XG4gICAgICAgIH0gZWxzZSBpZiAocyA+IDApIHtcbiAgICAgICAgICAgIG4udCA9IG5ldyB0aGlzLlMoZSwgcik7XG4gICAgICAgICAgICBuLnQuaCA9IG47XG4gICAgICAgICAgICBpID0gbi50O1xuICAgICAgICAgICAgdGhpcy5BLnQgPSBpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGggPSB0aGlzLkEuaTtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy5nKGgudSwgZSk7XG4gICAgICAgICAgICBpZiAoYSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGgubyA9IHI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYSA8IDApIHtcbiAgICAgICAgICAgICAgICBoLmkgPSBuZXcgdGhpcy5TKGUsIHIpO1xuICAgICAgICAgICAgICAgIGguaS5oID0gaDtcbiAgICAgICAgICAgICAgICBpID0gaC5pO1xuICAgICAgICAgICAgICAgIHRoaXMuQS5pID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHQuQztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT09IHRoaXMuQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzLmcodS51LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdS5vID0gcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gdS52KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSB0aGlzLmcoby51LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLm8gPSByO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IG5ldyB0aGlzLlMoZSwgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5pID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaCA9IG87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LnQgPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5oID0gdTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLk47XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHRoaXMuZyhpLnUsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudCA9IG5ldyB0aGlzLlMoZSwgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudC5oID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkuaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaSA9IG5ldyB0aGlzLlMoZSwgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaS5oID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkuaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLmk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkubyA9IHI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbmFibGVJbmRleCkge1xuICAgICAgICAgICAgdmFyIGwgPSBpLmg7XG4gICAgICAgICAgICB3aGlsZSAobCAhPT0gdGhpcy5BKSB7XG4gICAgICAgICAgICAgICAgbC5PICs9IDE7XG4gICAgICAgICAgICAgICAgbCA9IGwuaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnEoaSk7XG4gICAgICAgIHRoaXMuXyArPSAxO1xuICAgICAgICByZXR1cm4gdGhpcy5fO1xuICAgIH07XG4gICAgVHJlZUNvbnRhaW5lci5wcm90b3R5cGUuRiA9IGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgICAgd2hpbGUgKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5nKGUudSwgcik7XG4gICAgICAgICAgICBpZiAodCA8IDApIHtcbiAgICAgICAgICAgICAgICBlID0gZS5pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0ID4gMCkge1xuICAgICAgICAgICAgICAgIGUgPSBlLnQ7XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUgfHwgdGhpcy5BO1xuICAgIH07XG4gICAgVHJlZUNvbnRhaW5lci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fID0gMDtcbiAgICAgICAgdGhpcy5OID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLkEuaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5BLnQgPSB0aGlzLkEuaSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFRyZWVDb250YWluZXIucHJvdG90eXBlLnVwZGF0ZUtleUJ5SXRlcmF0b3IgPSBmdW5jdGlvbihlLCByKSB7XG4gICAgICAgIHZhciB0ID0gZS5DO1xuICAgICAgICBpZiAodCA9PT0gdGhpcy5BKSB7XG4gICAgICAgICAgICB0aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fID09PSAxKSB7XG4gICAgICAgICAgICB0LnUgPSByO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGkgPSB0LnAoKS51O1xuICAgICAgICBpZiAodCA9PT0gdGhpcy5BLnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmcoaSwgcikgPiAwKSB7XG4gICAgICAgICAgICAgICAgdC51ID0gcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IHQudigpLnU7XG4gICAgICAgIGlmICh0ID09PSB0aGlzLkEuaSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZyhuLCByKSA8IDApIHtcbiAgICAgICAgICAgICAgICB0LnUgPSByO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmcobiwgcikgPj0gMCB8fCB0aGlzLmcoaSwgcikgPD0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0LnUgPSByO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFRyZWVDb250YWluZXIucHJvdG90eXBlLmVyYXNlRWxlbWVudEJ5UG9zID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZSA8IDAgfHwgZSA+IHRoaXMuXyAtIDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHZhciByID0gdGhpcy5QKGUpO1xuICAgICAgICB0aGlzLkcocik7XG4gICAgICAgIHJldHVybiB0aGlzLl87XG4gICAgfTtcbiAgICBUcmVlQ29udGFpbmVyLnByb3RvdHlwZS5lcmFzZUVsZW1lbnRCeUtleSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuXyA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgciA9IHRoaXMuRih0aGlzLk4sIGUpO1xuICAgICAgICBpZiAociA9PT0gdGhpcy5BKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuRyhyKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBUcmVlQ29udGFpbmVyLnByb3RvdHlwZS5lcmFzZUVsZW1lbnRCeUl0ZXJhdG9yID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgciA9IGUuQztcbiAgICAgICAgaWYgKHIgPT09IHRoaXMuQSkge1xuICAgICAgICAgICAgdGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHQgPSByLmkgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGkgPSBlLml0ZXJhdG9yVHlwZSA9PT0gMDtcbiAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgIGlmICh0KSBlLm5leHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdCB8fCByLnQgPT09IHVuZGVmaW5lZCkgZS5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5HKHIpO1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9O1xuICAgIFRyZWVDb250YWluZXIucHJvdG90eXBlLmdldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fID09PSAwKSByZXR1cm4gMDtcbiAgICAgICAgZnVuY3Rpb24gdHJhdmVyc2FsKGUpIHtcbiAgICAgICAgICAgIGlmICghZSkgcmV0dXJuIDA7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgodHJhdmVyc2FsKGUudCksIHRyYXZlcnNhbChlLmkpKSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYXZlcnNhbCh0aGlzLk4pO1xuICAgIH07XG4gICAgcmV0dXJuIFRyZWVDb250YWluZXI7XG59KENvbnRhaW5lcik7XG5cbnZhciBUcmVlSXRlcmF0b3IgPSBmdW5jdGlvbihlKSB7XG4gICAgX19leHRlbmRzKFRyZWVJdGVyYXRvciwgZSk7XG4gICAgZnVuY3Rpb24gVHJlZUl0ZXJhdG9yKHIsIHQsIGkpIHtcbiAgICAgICAgdmFyIG4gPSBlLmNhbGwodGhpcywgaSkgfHwgdGhpcztcbiAgICAgICAgbi5DID0gcjtcbiAgICAgICAgbi5BID0gdDtcbiAgICAgICAgaWYgKG4uaXRlcmF0b3JUeXBlID09PSAwKSB7XG4gICAgICAgICAgICBuLnByZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLkMgPT09IHRoaXMuQS50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93SXRlcmF0b3JBY2Nlc3NFcnJvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLkMgPSB0aGlzLkMudigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG4ubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLkMgPT09IHRoaXMuQSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5DID0gdGhpcy5DLnAoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuLnByZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLkMgPT09IHRoaXMuQS5pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93SXRlcmF0b3JBY2Nlc3NFcnJvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLkMgPSB0aGlzLkMucCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG4ubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLkMgPT09IHRoaXMuQSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5DID0gdGhpcy5DLnYoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmVlSXRlcmF0b3IucHJvdG90eXBlLCBcImluZGV4XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5DO1xuICAgICAgICAgICAgdmFyIHIgPSB0aGlzLkEuaDtcbiAgICAgICAgICAgIGlmIChlID09PSB0aGlzLkEpIHtcbiAgICAgICAgICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5PIC0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdCA9IDA7XG4gICAgICAgICAgICBpZiAoZS50KSB7XG4gICAgICAgICAgICAgICAgdCArPSBlLnQuTztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChlICE9PSByKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlLmg7XG4gICAgICAgICAgICAgICAgaWYgKGUgPT09IGkuaSkge1xuICAgICAgICAgICAgICAgICAgICB0ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpLnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gaS50Lk87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFRyZWVJdGVyYXRvci5wcm90b3R5cGUuaXNBY2Nlc3NpYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkMgIT09IHRoaXMuQTtcbiAgICB9O1xuICAgIHJldHVybiBUcmVlSXRlcmF0b3I7XG59KENvbnRhaW5lckl0ZXJhdG9yKTtcblxudmFyIE9yZGVyZWRNYXBJdGVyYXRvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICBfX2V4dGVuZHMoT3JkZXJlZE1hcEl0ZXJhdG9yLCBlKTtcbiAgICBmdW5jdGlvbiBPcmRlcmVkTWFwSXRlcmF0b3IociwgdCwgaSwgbikge1xuICAgICAgICB2YXIgcyA9IGUuY2FsbCh0aGlzLCByLCB0LCBuKSB8fCB0aGlzO1xuICAgICAgICBzLmNvbnRhaW5lciA9IGk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT3JkZXJlZE1hcEl0ZXJhdG9yLnByb3RvdHlwZSwgXCJwb2ludGVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLkMgPT09IHRoaXMuQSkge1xuICAgICAgICAgICAgICAgIHRocm93SXRlcmF0b3JBY2Nlc3NFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm94eShbXSwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24ociwgdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gXCIwXCIpIHJldHVybiBlLkMudTsgZWxzZSBpZiAodCA9PT0gXCIxXCIpIHJldHVybiBlLkMubztcbiAgICAgICAgICAgICAgICAgICAgclswXSA9IGUuQy51O1xuICAgICAgICAgICAgICAgICAgICByWzFdID0gZS5DLm87XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByW3RdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihyLCB0LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICE9PSBcIjFcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInByb3AgbXVzdCBiZSAxXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGUuQy5vID0gaTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPcmRlcmVkTWFwSXRlcmF0b3IucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwSXRlcmF0b3IodGhpcy5DLCB0aGlzLkEsIHRoaXMuY29udGFpbmVyLCB0aGlzLml0ZXJhdG9yVHlwZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT3JkZXJlZE1hcEl0ZXJhdG9yO1xufShUcmVlSXRlcmF0b3IpO1xuXG52YXIgT3JkZXJlZE1hcCA9IGZ1bmN0aW9uKGUpIHtcbiAgICBfX2V4dGVuZHMoT3JkZXJlZE1hcCwgZSk7XG4gICAgZnVuY3Rpb24gT3JkZXJlZE1hcChyLCB0LCBpKSB7XG4gICAgICAgIGlmIChyID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHIgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IGUuY2FsbCh0aGlzLCB0LCBpKSB8fCB0aGlzO1xuICAgICAgICB2YXIgcyA9IG47XG4gICAgICAgIHIuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcy5zZXRFbGVtZW50KGVbMF0sIGVbMV0pO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5iZWdpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXBJdGVyYXRvcih0aGlzLkEudCB8fCB0aGlzLkEsIHRoaXMuQSwgdGhpcyk7XG4gICAgfTtcbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwSXRlcmF0b3IodGhpcy5BLCB0aGlzLkEsIHRoaXMpO1xuICAgIH07XG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuckJlZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgT3JkZXJlZE1hcEl0ZXJhdG9yKHRoaXMuQS5pIHx8IHRoaXMuQSwgdGhpcy5BLCB0aGlzLCAxKTtcbiAgICB9O1xuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnJFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwSXRlcmF0b3IodGhpcy5BLCB0aGlzLkEsIHRoaXMsIDEpO1xuICAgIH07XG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuZnJvbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuXyA9PT0gMCkgcmV0dXJuO1xuICAgICAgICB2YXIgZSA9IHRoaXMuQS50O1xuICAgICAgICByZXR1cm4gWyBlLnUsIGUubyBdO1xuICAgIH07XG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fID09PSAwKSByZXR1cm47XG4gICAgICAgIHZhciBlID0gdGhpcy5BLmk7XG4gICAgICAgIHJldHVybiBbIGUudSwgZS5vIF07XG4gICAgfTtcbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5sb3dlckJvdW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgciA9IHRoaXMubSh0aGlzLk4sIGUpO1xuICAgICAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXBJdGVyYXRvcihyLCB0aGlzLkEsIHRoaXMpO1xuICAgIH07XG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUudXBwZXJCb3VuZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLkIodGhpcy5OLCBlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwSXRlcmF0b3IociwgdGhpcy5BLCB0aGlzKTtcbiAgICB9O1xuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnJldmVyc2VMb3dlckJvdW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgciA9IHRoaXMuaih0aGlzLk4sIGUpO1xuICAgICAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXBJdGVyYXRvcihyLCB0aGlzLkEsIHRoaXMpO1xuICAgIH07XG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUucmV2ZXJzZVVwcGVyQm91bmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5rKHRoaXMuTiwgZSk7XG4gICAgICAgIHJldHVybiBuZXcgT3JkZXJlZE1hcEl0ZXJhdG9yKHIsIHRoaXMuQSwgdGhpcyk7XG4gICAgfTtcbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oZSkge1xuICAgICAgICB0aGlzLlAoKGZ1bmN0aW9uKHIsIHQsIGkpIHtcbiAgICAgICAgICAgIGUoWyByLnUsIHIubyBdLCB0LCBpKTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuc2V0RWxlbWVudCA9IGZ1bmN0aW9uKGUsIHIsIHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRChlLCByLCB0KTtcbiAgICB9O1xuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLmdldEVsZW1lbnRCeVBvcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUgPCAwIHx8IGUgPiB0aGlzLl8gLSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IHRoaXMuUChlKTtcbiAgICAgICAgcmV0dXJuIFsgci51LCByLm8gXTtcbiAgICB9O1xuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5GKHRoaXMuTiwgZSk7XG4gICAgICAgIHJldHVybiBuZXcgT3JkZXJlZE1hcEl0ZXJhdG9yKHIsIHRoaXMuQSwgdGhpcyk7XG4gICAgfTtcbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5nZXRFbGVtZW50QnlLZXkgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5GKHRoaXMuTiwgZSk7XG4gICAgICAgIHJldHVybiByLm87XG4gICAgfTtcbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS51bmlvbiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgICBlLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHIuc2V0RWxlbWVudChlWzBdLCBlWzFdKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fO1xuICAgIH07XG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgciwgdCwgaTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG4ubGFiZWwpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGUgPSB0aGlzLl87XG4gICAgICAgICAgICAgICAgciA9IHRoaXMuUCgpO1xuICAgICAgICAgICAgICAgIHQgPSAwO1xuICAgICAgICAgICAgICAgIG4ubGFiZWwgPSAxO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoISh0IDwgZSkpIHJldHVybiBbIDMsIDQgXTtcbiAgICAgICAgICAgICAgICBpID0gclt0XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWyA0LCBbIGkudSwgaS5vIF0gXTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbi5zZW50KCk7XG4gICAgICAgICAgICAgICAgbi5sYWJlbCA9IDM7XG5cbiAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICsrdDtcbiAgICAgICAgICAgICAgICByZXR1cm4gWyAzLCAxIF07XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBbIDIgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIE9yZGVyZWRNYXA7XG59KFRyZWVDb250YWluZXIpO1xuXG5leHBvcnQgeyBPcmRlcmVkTWFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js\n");

/***/ })

};
;