"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./types.ts":
/*!******************!*\
  !*** ./types.ts ***!
  \******************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameStatus: function() { return /* binding */ GameStatus; }\n/* harmony export */ });\nvar GameStatus;\n(function(GameStatus) {\n    GameStatus[GameStatus[\"MENU\"] = 0] = \"MENU\";\n    GameStatus[GameStatus[\"LOADING\"] = 1] = \"LOADING\";\n    GameStatus[GameStatus[\"PLAYING\"] = 2] = \"PLAYING\";\n    GameStatus[GameStatus[\"GAME_OVER\"] = 3] = \"GAME_OVER\";\n})(GameStatus || (GameStatus = {}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3R5cGVzLnRzIiwibWFwcGluZ3MiOiI7Ozs7O1VBQ1lBOzs7OztHQUFBQSxlQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi90eXBlcy50cz81NjUyIl0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGVudW0gR2FtZVN0YXR1cyB7XG4gICAgTUVOVSxcbiAgICBMT0FESU5HLFxuICAgIFBMQVlJTkcsXG4gICAgR0FNRV9PVkVSLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENpdmlsaXphdGlvbiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGxvcmU6IHN0cmluZztcbiAgICBib251czogc3RyaW5nO1xuICAgIHVuaXF1ZVVuaXQ6IHtcbiAgICAgICAgbmFtZTpzdHJpbmc7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgfTtcbiAgICBiYW5uZXJVcmw6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgUmVzb3VyY2VzID0gUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbmV4cG9ydCB0eXBlIFJlc291cmNlRGVsdGFzID0gUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcblxuZXhwb3J0IGludGVyZmFjZSBWaWxsYWdlciB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY3VycmVudFRhc2s6IHN0cmluZyB8IG51bGw7IC8vIG51bGwgaWYgaWRsZSwgb3RoZXJ3aXNlIHRoZSBJRCBvZiB0aGUgR2FtZVRhc2tcbn1cblxuZXhwb3J0IHR5cGUgTWlsaXRhcnlVbml0VHlwZSA9ICdzd29yZHNtYW4nIHwgJ2FyY2hlcicgfCAna25pZ2h0JyB8ICdjYXRhcHVsdCcgfCBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWlsaXRhcnlVbml0IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHVuaXRUeXBlOiBNaWxpdGFyeVVuaXRUeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuaXRzIHtcbiAgICB2aWxsYWdlcnM6IFZpbGxhZ2VyW107XG4gICAgbWlsaXRhcnk6IE1pbGl0YXJ5VW5pdFtdO1xufVxuXG5leHBvcnQgdHlwZSBCdWlsZGluZ1R5cGUgPSAnaG91c2VzJyB8ICdiYXJyYWNrcycgfCAnYXJjaGVyeVJhbmdlJyB8ICdzdGFibGUnIHwgJ3NpZWdlV29ya3Nob3AnIHwgJ2JsYWNrc21pdGgnIHwgJ3dhdGNoVG93ZXInIHwgJ3Rvd25DZW50ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkaW5nSW5zdGFuY2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHBvc2l0aW9uOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9O1xuICAgIGN1cnJlbnRIcDogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBCdWlsZGluZ3MgPSBSZWNvcmQ8c3RyaW5nLCBCdWlsZGluZ0luc3RhbmNlW10+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdhbWVTdGF0ZVBheWxvYWQge1xuICAgIGNpdjogQ2l2aWxpemF0aW9uO1xuICAgIGFnZTogc3RyaW5nO1xuICAgIHJlczogUmVzb3VyY2VzO1xuICAgIHVuaXRzOiB7XG4gICAgICAgIHZpbGxhZ2VyczogbnVtYmVyO1xuICAgICAgICBzd29yZHNtZW46IG51bWJlcjtcbiAgICAgICAgYXJjaGVyczogbnVtYmVyO1xuICAgICAgICBrbmlnaHRzOiBudW1iZXI7XG4gICAgICAgIGNhdGFwdWx0czogbnVtYmVyO1xuICAgIH07XG4gICAgYnVpbGRpbmdzOiB7IFtrZXkgaW4gQnVpbGRpbmdUeXBlXT86IG51bWJlciB9O1xufVxuXG5leHBvcnQgdHlwZSBCdWlsZGluZ0Nvc3RzID0gUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcblxuZXhwb3J0IHR5cGUgSXRlbVJhcml0eSA9ICdDb21tb24nIHwgJ0VwaWMnIHwgJ0xlZ2VuZGFyeScgfCAnU3Bpcml0dWFsJztcblxuZXhwb3J0IGludGVyZmFjZSBHYW1lSXRlbSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICByYXJpdHk6IEl0ZW1SYXJpdHk7XG59XG5cbmV4cG9ydCB0eXBlIFJld2FyZCA9IFxuICAgIHsgdHlwZTogJ3Jlc291cmNlJywgcmVzb3VyY2U6IHN0cmluZywgYW1vdW50OiBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdIH0gfFxuICAgIHsgdHlwZTogJ2l0ZW0nLCBpdGVtSWQ6IHN0cmluZywgYW1vdW50OiBudW1iZXIgfSB8XG4gICAgeyB0eXBlOiAndW5pdCcsIHVuaXRUeXBlOiAndmlsbGFnZXInLCBhbW91bnQ6IG51bWJlciB9IHxcbiAgICB7IHR5cGU6ICdidWlsZGluZycsIGJ1aWxkaW5nSWQ6IHN0cmluZywgYW1vdW50OiBudW1iZXIgfTtcblxuZXhwb3J0IGludGVyZmFjZSBHYW1lRXZlbnRDaG9pY2Uge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBjb3N0PzogQnVpbGRpbmdDb3N0cztcbiAgICBzdWNjZXNzQ2hhbmNlPzogbnVtYmVyOyAvLyAwLTEsIHVuZGVmaW5lZCBtZWFucyAxMDAlXG4gICAgc3VjY2Vzc0VmZmVjdHM6IHsgcmV3YXJkczogUmV3YXJkW10sIGxvZzogc3RyaW5nIH07XG4gICAgZmFpbHVyZUVmZmVjdHM/OiB7IHJld2FyZHM6IFJld2FyZFtdLCBsb2c6IHN0cmluZyB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdhbWVFdmVudCB7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGNob2ljZXM6IEdhbWVFdmVudENob2ljZVtdO1xufVxuXG5leHBvcnQgdHlwZSBMb2dJY29uVHlwZSA9IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBHYW1lTG9nRW50cnkge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGljb246IExvZ0ljb25UeXBlO1xufVxuXG5leHBvcnQgdHlwZSBVbml0Q2xhc3NpZmljYXRpb24gPSAnaW5mYW50cnknIHwgJ2NhdmFscnknIHwgJ2FyY2hlcicgfCAnc2llZ2UnIHwgJ3NoaXAnIHwgJ3N1cHBvcnQnIHwgJ215dGhpY2FsJztcbmV4cG9ydCB0eXBlIEFybW9yQ2xhc3NpZmljYXRpb24gPSAnbWVsZWUnIHwgJ3BpZXJjZScgfCAnc2llZ2UnIHwgJ21hZ2ljJyB8ICdlbGVtZW50YWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFybW9yVmFsdWUge1xuICAgIHR5cGU6IEFybW9yQ2xhc3NpZmljYXRpb247XG4gICAgdmFsdWU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdHRhY2tCb251cyB7XG4gICAgdGFyZ2V0VHlwZTogVW5pdENsYXNzaWZpY2F0aW9uO1xuICAgIGJvbnVzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGFtYWdlVHlwZSB7XG4gICAgdHlwZTogc3RyaW5nOyAvLyBlLmcuLCAnc2xhc2gnLCAncGllcmNlJywgJ2ZpcmUnLCAnbWFnaWMnXG4gICAgdmFsdWU6IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgVGVycmFpbk1vZGlmaWVyIHtcbiAgICB0ZXJyYWluVHlwZTogc3RyaW5nOyAvLyBlLmcuLCAnZm9yZXN0JywgJ2Rlc2VydCcsICdwbGFpbnMnXG4gICAgc3BlZWRCb251czogbnVtYmVyOyAvLyBwZXJjZW50YWdlLCBjYW4gYmUgbmVnYXRpdmVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVbml0VXBncmFkZVBhdGgge1xuICAgIHRhcmdldFVuaXRJZDogc3RyaW5nO1xuICAgIGNvc3Q6IEJ1aWxkaW5nQ29zdHM7XG4gICAgdGltZTogbnVtYmVyO1xuICAgIHJlc2VhcmNoUmVxdWlyZWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pdENvbmZpZyB7XG4gICAgaWQ6IE1pbGl0YXJ5VW5pdFR5cGU7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgY29zdDogQnVpbGRpbmdDb3N0cztcbiAgICB0cmFpblRpbWU6IG51bWJlcjsgLy8gaW4gc2Vjb25kc1xuICAgIGhwOiBudW1iZXI7XG4gICAgaWNvbklkOiBzdHJpbmc7XG4gICAgcmVxdWlyZWRCdWlsZGluZzogc3RyaW5nO1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIGlzUHJlZGVmaW5lZDogYm9vbGVhbjtcbiAgICBvcmRlcjogbnVtYmVyO1xuXG4gICAgLy8gLS0tIENvcmUgQ29tYmF0IC0tLVxuICAgIGF0dGFjaz86IG51bWJlcjsgLy8gTWFpbiBhdHRhY2sgdmFsdWUsIGNhbiBiZSBvdmVycmlkZGVuIGJ5IGRhbWFnZVR5cGVzXG4gICAgYXR0YWNrUmF0ZT86IG51bWJlcjsgLy8gYXR0YWNrcyBwZXIgc2Vjb25kXG4gICAgYXR0YWNrUmFuZ2U/OiBudW1iZXI7IC8vIGluIGdyaWQgY2VsbHNcbiAgICBkYW1hZ2VUeXBlcz86IERhbWFnZVR5cGVbXTtcbiAgICBhcm1vclZhbHVlcz86IEFybW9yVmFsdWVbXTtcbiAgICBhcm1vclBlbmV0cmF0aW9uPzogbnVtYmVyOyAvLyBwZXJjZW50YWdlXG4gICAgY3JpdGljYWxDaGFuY2U/OiBudW1iZXI7IC8vIHBlcmNlbnRhZ2VcbiAgICBcbiAgICAvLyAtLS0gTW9iaWxpdHkgLS0tXG4gICAgbW92ZW1lbnRTcGVlZD86IG51bWJlcjsgLy8gaW4gZ3JpZCBjZWxscyBwZXIgc2Vjb25kXG4gICAgdGVycmFpbk1vZGlmaWVycz86IFRlcnJhaW5Nb2RpZmllcltdO1xuICAgIHN0YW1pbmE/OiBudW1iZXI7XG4gICAgXG4gICAgLy8gLS0tIFVuaXQgQ2xhc3NpZmljYXRpb24gJiBDb3VudGVycyAtLS1cbiAgICB1bml0VHlwZT86IFVuaXRDbGFzc2lmaWNhdGlvbjtcbiAgICBhdHRhY2tCb251c2VzPzogQXR0YWNrQm9udXNbXTtcbiAgICBcbiAgICAvLyAtLS0gRWNvbm9teSAmIE1ldGEgLS0tXG4gICAgcG9wdWxhdGlvbkNvc3Q/OiBudW1iZXI7XG4gICAgbWFpbnRlbmFuY2VDb3N0PzogQnVpbGRpbmdDb3N0cztcbiAgICBzZWFzb25hbEF2YWlsYWJpbGl0eT86IHN0cmluZ1tdOyAvLyBlLmcuLCBbJ1N1bW1lcicsICdXaW50ZXInXSBvciBldmVudCBuYW1lc1xuICAgIG1vZFRhZ3M/OiBzdHJpbmdbXTtcblxuICAgIC8vIC0tLSBVcGdyYWRlcyAmIFRlY2ggVHJlZSAtLS1cbiAgICB0cmVlSWQ/OiBzdHJpbmc7XG4gICAgdXBncmFkZXNUbz86IFVuaXRVcGdyYWRlUGF0aFtdO1xuICAgIGlzVXBncmFkZU9ubHk/OiBib29sZWFuO1xuICAgIHJlcXVpcmVkQnVpbGRpbmdJZHM/OiBzdHJpbmdbXTsgLy8gQWRkaXRpb25hbCBidWlsZGluZ3MgdGhhdCBtdXN0IGV4aXN0IHRvIGVuYWJsZSB0cmFpbmluZ1xuICAgIHJlcXVpcmVkUmVzZWFyY2hJZHM/OiBzdHJpbmdbXTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFVJTm90aWZpY2F0aW9uIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZU5vZGUge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7IC8vIE5vdyBhIHN0cmluZyB0byBiZSBkeW5hbWljXG4gIHBvc2l0aW9uOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9O1xuICBhbW91bnQ6IG51bWJlcjtcbiAgcmljaG5lc3M/OiBudW1iZXI7IC8vIGUuZy4sIDEgZm9yIG5vcm1hbCwgMiBmb3IgcmljaFxufVxuXG5leHBvcnQgdHlwZSBUYXNrVHlwZSA9ICdnYXRoZXInIHwgJ2J1aWxkJyB8ICd0cmFpbl92aWxsYWdlcicgfCAndHJhaW5fbWlsaXRhcnknIHwgJ2FkdmFuY2VfYWdlJyB8ICd1cGdyYWRlX2J1aWxkaW5nJyB8ICdyZXNlYXJjaCc7XG5cbmV4cG9ydCB0eXBlIFBsYXllckFjdGlvblN0YXRlID0ge1xuICAgIG1vZGU6ICdidWlsZCc7XG4gICAgYnVpbGRpbmdUeXBlOiBCdWlsZGluZ1R5cGUgfCBzdHJpbmc7XG4gICAgdmlsbGFnZXJJZDogc3RyaW5nO1xufSB8IG51bGw7XG5cblxuZXhwb3J0IGludGVyZmFjZSBHYW1lVGFzayB7XG4gICAgaWQ6IHN0cmluZztcbiAgICB0eXBlOiBUYXNrVHlwZTtcbiAgICBzdGFydFRpbWU6IG51bWJlcjtcbiAgICBkdXJhdGlvbjogbnVtYmVyOyAvLyBpbiBtaWxsaXNlY29uZHNcbiAgICBwYXlsb2FkPzoge1xuICAgICAgICAvLyBTaGFyZWRcbiAgICAgICAgYnVpbGRpbmdJZD86IHN0cmluZzsgLy8gSUQgb2YgdGhlIGJ1aWxkaW5nIHBlcmZvcm1pbmcgdGhlIGFjdGlvbiAoZS5nLiBUQyBmb3IgdHJhaW5pbmcpXG4gICAgICAgIHZpbGxhZ2VySWRzPzogc3RyaW5nW107XG4gICAgICAgIGNvdW50PzogbnVtYmVyO1xuICAgICAgICBcbiAgICAgICAgLy8gQnVpbGQgdGFza1xuICAgICAgICBidWlsZGluZ1R5cGU/OiBCdWlsZGluZ1R5cGUgfCBzdHJpbmc7XG4gICAgICAgIHBvc2l0aW9uPzogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9O1xuICAgICAgICBcbiAgICAgICAgLy8gVHJhaW4gbWlsaXRhcnkgdGFza1xuICAgICAgICB1bml0VHlwZT86IE1pbGl0YXJ5VW5pdFR5cGU7XG4gICAgICAgIFxuICAgICAgICAvLyBHYXRoZXIgdGFza1xuICAgICAgICByZXNvdXJjZU5vZGVJZD86IHN0cmluZztcblxuICAgICAgICAvLyBVcGdyYWRlIFRhc2tcbiAgICAgICAgb3JpZ2luYWxCdWlsZGluZ0lkPzogc3RyaW5nO1xuICAgICAgICBvcmlnaW5hbEJ1aWxkaW5nVHlwZT86IHN0cmluZztcbiAgICAgICAgdGFyZ2V0QnVpbGRpbmdUeXBlPzogc3RyaW5nO1xuXG4gICAgICAgIC8vIFJlc2VhcmNoIFRhc2tcbiAgICAgICAgcmVzZWFyY2hJZD86IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2ZUJ1ZmZzIHtcbiAgICBidWlsZFRpbWVSZWR1Y3Rpb24/OiB7IHBlcmNlbnRhZ2U6IG51bWJlcjsgdXNlczogbnVtYmVyIH07XG4gICAgdHJhaW5UaW1lUmVkdWN0aW9uPzogeyBwZXJjZW50YWdlOiBudW1iZXI7IHVzZXM6IG51bWJlciB9O1xuICAgIHJlc291cmNlQm9vc3Q/OiB7XG4gICAgICAgIHJlc291cmNlOiBzdHJpbmc7XG4gICAgICAgIG11bHRpcGxpZXI6IG51bWJlcjtcbiAgICAgICAgZW5kVGltZTogbnVtYmVyO1xuICAgIH1bXTtcbiAgICBwZXJtYW5lbnRUcmFpblRpbWVSZWR1Y3Rpb24/OiBudW1iZXI7IC8vIHBlcmNlbnRhZ2Vcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZ2VDb25maWcge1xuICAgIGlkOiBzdHJpbmc7IC8vIEZvciBjdXN0b20gYWdlcywgYGN1c3RvbS0ke3RpbWVzdGFtcH1gLiBGb3IgcHJlZGVmaW5lZCwganVzdCB0aGUgbmFtZS5cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICBpc1ByZWRlZmluZWQ6IGJvb2xlYW47XG4gICAgb3JkZXI6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdWlsZGluZ1VwZ3JhZGVQYXRoIHtcbiAgICBpZDogc3RyaW5nOyAvLyBUaGUgSUQgb2YgdGhlIGJ1aWxkaW5nIHRoaXMgb25lIHVwZ3JhZGVzIHRvXG4gICAgY29zdDogQnVpbGRpbmdDb3N0cztcbiAgICB0aW1lOiBudW1iZXI7IC8vIGluIHNlY29uZHNcbiAgICByZXNlYXJjaFJlcXVpcmVkPzogc3RyaW5nOyAvLyBGdXR1cmUgdXNlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVpbGRpbmdDb25maWcge1xuICAgIGlkOiBCdWlsZGluZ1R5cGUgfCBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgY29zdDogQnVpbGRpbmdDb3N0cztcbiAgICBpc1VuaXF1ZTogYm9vbGVhbjtcbiAgICBidWlsZExpbWl0PzogbnVtYmVyO1xuICAgIGJ1aWxkVGltZTogbnVtYmVyOyAvLyBpbiBzZWNvbmRzXG4gICAgaHA6IG51bWJlcjtcbiAgICB1bmxvY2tlZEluQWdlOiBzdHJpbmc7IC8vIG5hbWUgb2YgdGhlIGFnZVxuICAgIGljb25JZDogc3RyaW5nOyAvLyBrZXkgZnJvbSBidWlsZGluZ0ljb25NYXBcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICBpc1ByZWRlZmluZWQ6IGJvb2xlYW47XG4gICAgb3JkZXI6IG51bWJlcjtcbiAgICBjYW5UcmFpblVuaXRzOiBib29sZWFuO1xuICAgIGNhblJlc2VhcmNoPzogYm9vbGVhbjsgLy8gTmV3IGZsYWcgZm9yIHJlc2VhcmNoIGJ1aWxkaW5nc1xuICAgIGlzVXBncmFkZU9ubHk/OiBib29sZWFuO1xuICAgIHVwZ3JhZGVzVG8/OiBCdWlsZGluZ1VwZ3JhZGVQYXRoW107XG4gICAgdHJlZUlkPzogc3RyaW5nOyAvLyBVbmlxdWUgSUQgZm9yIGFuIHVwZ3JhZGUgZmFtaWx5IG9mIGJ1aWxkaW5ncy5cbiAgICBcbiAgICAvLyBDb21wcmVoZW5zaXZlIEF0dHJpYnV0ZXNcbiAgICBwb3B1bGF0aW9uQ2FwYWNpdHk/OiBudW1iZXI7XG4gICAgZ2Fycmlzb25DYXBhY2l0eT86IG51bWJlcjtcbiAgICBnZW5lcmF0ZXNSZXNvdXJjZT86IHN0cmluZyB8ICdub25lJztcbiAgICBnZW5lcmF0aW9uUmF0ZT86IG51bWJlcjsgLy8gcGVyIG1pbnV0ZVxuICAgIGF0dGFjaz86IG51bWJlcjtcbiAgICBhdHRhY2tSYXRlPzogbnVtYmVyOyAvLyBhdHRhY2tzIHBlciBzZWNvbmRcbiAgICBhdHRhY2tSYW5nZT86IG51bWJlcjtcbiAgICBoZWFsUmF0ZT86IG51bWJlcjsgLy8gaHAgcGVyIHNlY29uZCBmb3IgZ2Fycmlzb25lZCB1bml0c1xuICAgIHZpc2lvblJhbmdlPzogbnVtYmVyO1xuICAgIHJlcXVpcmVkQnVpbGRpbmdJZD86IHN0cmluZztcbiAgICBcbiAgICAvLyBGdXR1cmUtUHJvb2ZpbmcgQXR0cmlidXRlc1xuICAgIHJlc2VhcmNoQ29zdD86IEJ1aWxkaW5nQ29zdHM7XG4gICAgcmVzZWFyY2hUaW1lPzogbnVtYmVyOyAvLyBpbiBzZWNvbmRzXG4gICAgdW5sb2Nrc1Jlc2VhcmNoSWRzPzogc3RyaW5nW107XG4gICAgcmVxdWlyZXNSZXNlYXJjaD86IGJvb2xlYW47XG5cbiAgICBhd2FyZFBvaW50cz86IG51bWJlcjtcbiAgICBhd2FyZFRpZXI/OiAnQnJvbnplJyB8ICdTaWx2ZXInIHwgJ0dvbGQnO1xuICAgIFxuICAgIGN1c3RvbU1vZGVsSWQ/OiBzdHJpbmc7XG4gICAgcGxhY2VtZW50UmFkaXVzPzogbnVtYmVyOyAvLyBtaW5pbXVtIGRpc3RhbmNlIGZyb20gYW5vdGhlciBidWlsZGluZyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgXG4gICAgc2Vhc29uYWxWYXJpYW50SWRzPzogc3RyaW5nW107XG4gICAgbWFpbnRlbmFuY2VDb3N0PzogQnVpbGRpbmdDb3N0czsgLy8gcGVyIG1pbnV0ZVxuICAgIGRlY2F5UmF0ZT86IG51bWJlcjsgLy8gaHAgbG9zcyBwZXIgbWludXRlXG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBGdWxsR2FtZVN0YXRlIHtcbiAgICBjaXZpbGl6YXRpb246IENpdmlsaXphdGlvbjtcbiAgICByZXNvdXJjZXM6IFJlc291cmNlcztcbiAgICB1bml0czogVW5pdHM7XG4gICAgYnVpbGRpbmdzOiBCdWlsZGluZ3M7XG4gICAgY3VycmVudEFnZTogc3RyaW5nO1xuICAgIGdhbWVMb2c6IEdhbWVMb2dFbnRyeVtdO1xuICAgIGFjdGl2ZVRhc2tzOiBHYW1lVGFza1tdO1xuICAgIHJlc291cmNlTm9kZXM6IFJlc291cmNlTm9kZVtdO1xuICAgIGludmVudG9yeTogR2FtZUl0ZW1bXTtcbiAgICBhY3RpdmVCdWZmczogQWN0aXZlQnVmZnM7XG4gICAgY29tcGxldGVkUmVzZWFyY2g6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgdHlwZSBSZXNvdXJjZVJhcml0eSA9ICdBYnVuZGFudCcgfCAnQ29tbW9uJyB8ICdVbmNvbW1vbicgfCAnUmFyZScgfCAnU3RyYXRlZ2ljJztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZUNvbmZpZyB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBpY29uSWQ6IHN0cmluZztcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICBpc1ByZWRlZmluZWQ6IGJvb2xlYW47XG4gICAgb3JkZXI6IG51bWJlcjtcblxuICAgIC8vIC0tLSBFY29ub215ICYgU3Bhd25pbmcgLS0tXG4gICAgcmFyaXR5OiBSZXNvdXJjZVJhcml0eTtcbiAgICBpbml0aWFsQW1vdW50OiBudW1iZXI7XG4gICAgYmFzZUdhdGhlclJhdGU6IG51bWJlcjtcbiAgICBzcGF3bkluU2FmZVpvbmU6IGJvb2xlYW47XG4gICAgaXNUcmFkYWJsZTogYm9vbGVhbjtcblxuICAgIC8vIC0tLSBBZHZhbmNlZCBNZWNoYW5pY3MgKEZ1dHVyZS1Qcm9vZmluZykgLS0tXG4gICAgZGVjYXlzT3ZlclRpbWU/OiBib29sZWFuO1xuICAgIGRlY2F5UmF0ZT86IG51bWJlcjsgLy8gcGVyY2VudGFnZSBwZXIgbWludXRlXG4gICAgc3RvcmFnZUJ1aWxkaW5nSWQ/OiBzdHJpbmc7IC8vIElEIG9mIGJ1aWxkaW5nIHRoYXQgaW5jcmVhc2VzIGNhcGFjaXR5XG59XG5cbmV4cG9ydCB0eXBlIFJlc2VhcmNoRWZmZWN0VHlwZSA9ICdzdGF0X2Jvb3N0JyB8ICd1bmxvY2tfdW5pdCcgfCAndW5sb2NrX2J1aWxkaW5nJztcbmV4cG9ydCB0eXBlIFJlc2VhcmNoVGFyZ2V0VHlwZSA9ICd1bml0X3R5cGUnIHwgJ3VuaXRfY2xhc3MnIHwgJ2J1aWxkaW5nX3R5cGUnO1xuZXhwb3J0IHR5cGUgUmVzZWFyY2hPcGVyYXRpb24gPSAnYWRkJyB8ICdtdWx0aXBseSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzZWFyY2hFZmZlY3Qge1xuICAgIHR5cGU6IFJlc2VhcmNoRWZmZWN0VHlwZTtcbiAgICB0YXJnZXRUeXBlOiBSZXNlYXJjaFRhcmdldFR5cGU7XG4gICAgdGFyZ2V0SWQ6IHN0cmluZzsgLy8gZS5nLiwgJ3N3b3Jkc21hbicsICdpbmZhbnRyeScsICdiYXJyYWNrcydcbiAgICBzdGF0OiBzdHJpbmc7IC8vIGUuZy4sICdocCcsICdhdHRhY2snLCAnbWVsZWVBcm1vcidcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIG9wZXJhdGlvbjogUmVzZWFyY2hPcGVyYXRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzZWFyY2hDb25maWcge1xuICAgIGlkOiBzdHJpbmc7IC8vIFVuaXF1ZSBrZXkgZm9yIHRoZSB0ZWNobm9sb2d5IG5vZGVcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBpY29uSWQ6IHN0cmluZztcbiAgICBjb3N0OiBCdWlsZGluZ0Nvc3RzO1xuICAgIHJlc2VhcmNoVGltZTogbnVtYmVyOyAvLyBpbiBzZWNvbmRzXG4gICAgcHJlcmVxdWlzaXRlczogc3RyaW5nW107IC8vIEFycmF5IG9mIHRlY2ggSURzIHJlcXVpcmVkIGJlZm9yZSB0aGlzIG9uZVxuICAgIGVmZmVjdHM6IFJlc2VhcmNoRWZmZWN0W107IC8vIFN0cnVjdHVyZWQgbGlzdCBvZiBpbi1nYW1lIGVmZmVjdHNcbiAgICBcbiAgICAvLyBBZG1pbiAmIFRyZWUgTWFuYWdlbWVudFxuICAgIHRyZWVJZDogc3RyaW5nOyAvLyBJRCBmb3IgdGhlIHRyZWUgdGhpcyB0ZWNoIGJlbG9uZ3MgdG8gKGUuZy4sICdtaWxpdGFyeScsICdlY29ub215JylcbiAgICB0cmVlTmFtZTogc3RyaW5nOyAvLyBEaXNwbGF5IG5hbWUgZm9yIHRoZSB0cmVlXG4gICAgY29sb3JUaGVtZT86IHN0cmluZzsgLy8gSGV4IGNvbG9yIGZvciB0aGUgdHJlZSdzIFVJIHRoZW1lXG5cbiAgICByZXF1aXJlZEJ1aWxkaW5nSWQ6IHN0cmluZztcbiAgICBhZ2VSZXF1aXJlbWVudDogc3RyaW5nO1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIGlzUHJlZGVmaW5lZDogYm9vbGVhbjtcbiAgICBvcmRlcjogbnVtYmVyOyAvLyBEaXNwbGF5IG9yZGVyIHdpdGhpbiBpdHMgdHJlZVxuICAgIHJlcGVhdGFibGU/OiBib29sZWFuO1xufVxuIl0sIm5hbWVzIjpbIkdhbWVTdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./types.ts\n"));

/***/ })

});