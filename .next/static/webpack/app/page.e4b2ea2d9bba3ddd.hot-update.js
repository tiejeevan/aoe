"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./types.ts\");\n/* harmony import */ var _services_geminiService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/geminiService */ \"(app-pages-browser)/./services/geminiService.ts\");\n/* harmony import */ var _services_dbService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/dbService */ \"(app-pages-browser)/./services/dbService.ts\");\n/* harmony import */ var _services_nameService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/nameService */ \"(app-pages-browser)/./services/nameService.ts\");\n/* harmony import */ var _data_itemContent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/data/itemContent */ \"(app-pages-browser)/./data/itemContent.ts\");\n/* harmony import */ var _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/data/ageInfo */ \"(app-pages-browser)/./data/ageInfo.ts\");\n/* harmony import */ var _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/data/buildingInfo */ \"(app-pages-browser)/./data/buildingInfo.ts\");\n/* harmony import */ var _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/data/unitInfo */ \"(app-pages-browser)/./data/unitInfo.ts\");\n/* harmony import */ var _components_GameUI__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/GameUI */ \"(app-pages-browser)/./components/GameUI.tsx\");\n/* harmony import */ var _components_StartScreen__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/StartScreen */ \"(app-pages-browser)/./components/StartScreen.tsx\");\n/* harmony import */ var _components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/LoadingScreen */ \"(app-pages-browser)/./components/LoadingScreen.tsx\");\n/* harmony import */ var _components_BuildPanel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/components/BuildPanel */ \"(app-pages-browser)/./components/BuildPanel.tsx\");\n/* harmony import */ var _components_NotificationManager__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/components/NotificationManager */ \"(app-pages-browser)/./components/NotificationManager.tsx\");\n/* harmony import */ var _components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/components/UnitManagementPanel */ \"(app-pages-browser)/./components/UnitManagementPanel.tsx\");\n/* harmony import */ var _components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/components/BuildingManagementPanel */ \"(app-pages-browser)/./components/BuildingManagementPanel.tsx\");\n/* harmony import */ var _components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @/components/ResourceAssignmentPanel */ \"(app-pages-browser)/./components/ResourceAssignmentPanel.tsx\");\n/* harmony import */ var _components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @/components/CivilizationPanel */ \"(app-pages-browser)/./components/CivilizationPanel.tsx\");\n/* harmony import */ var _components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @/components/AllBuildingsPanel */ \"(app-pages-browser)/./components/AllBuildingsPanel.tsx\");\n/* harmony import */ var _components_InventoryPanel__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @/components/InventoryPanel */ \"(app-pages-browser)/./components/InventoryPanel.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst GATHER_INFO = {\n    food: {\n        rate: 10\n    },\n    wood: {\n        rate: 8\n    },\n    gold: {\n        rate: 5\n    },\n    stone: {\n        rate: 6\n    }\n};\nconst initialBuildingsState = {\n    houses: [],\n    barracks: [],\n    archeryRange: [],\n    stable: [],\n    siegeWorkshop: [],\n    blacksmith: [],\n    watchTower: [],\n    townCenter: []\n};\nconst MAP_DIMENSIONS = {\n    width: 25,\n    height: 18\n};\nconst GamePage = ()=>{\n    _s();\n    // Core Game State\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n    const [civilization, setCivilization] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resources, setResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        food: 200,\n        wood: 150,\n        gold: 50,\n        stone: 100\n    });\n    const [units, setUnits] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        villagers: [],\n        military: []\n    });\n    const [buildings, setBuildings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialBuildingsState);\n    const [currentAge, setCurrentAge] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Nomadic Age\");\n    const [gameLog, setGameLog] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentEvent, setCurrentEvent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resourceDeltas, setResourceDeltas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [activityStatus, setActivityStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Your story begins...\");\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [unlimitedResources, setUnlimitedResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [allSaves, setAllSaves] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentSaveName, setCurrentSaveName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [playerAction, setPlayerAction] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeTasks, setActiveTasks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [resourceNodes, setResourceNodes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [inventory, setInventory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [activeBuffs, setActiveBuffs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        resourceBoost: []\n    });\n    // Master lists of all configurations from DB\n    const [masterAgeList, setMasterAgeList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [masterBuildingList, setMasterBuildingList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [masterUnitList, setMasterUnitList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // App Loading State\n    const [isAppLoading, setIsAppLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Panel States\n    const [buildPanelState, setBuildPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        villagerId: null,\n        anchorRect: null\n    });\n    const [unitManagementPanel, setUnitManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        anchorRect: null\n    });\n    const [buildingManagementPanel, setBuildingManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        instanceId: null,\n        anchorRect: null\n    });\n    const [allBuildingsPanel, setAllBuildingsPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [assignmentPanelState, setAssignmentPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        targetId: null,\n        targetType: null,\n        anchorRect: null\n    });\n    const [civPanelState, setCivPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [inventoryPanelState, setInventoryPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const deltaTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const eventTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastTickRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(Date.now());\n    const animationFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    // Derived state for active game configurations\n    const ageProgressionList = masterAgeList.filter((age)=>age.isActive);\n    const buildingList = masterBuildingList; // Keep all for lookups, filter on use\n    const unitList = masterUnitList; // Keep all for lookups, filter on use\n    const populationCapacity = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        let capacity = 0;\n        for(const buildingType in buildings){\n            const buildingInfo = masterBuildingList.find((b)=>b.id === buildingType);\n            if (buildingInfo && buildingInfo.populationCapacity) {\n                capacity += buildings[buildingType].length * buildingInfo.populationCapacity;\n            }\n        }\n        return capacity;\n    }, [\n        buildings,\n        masterBuildingList\n    ]);\n    const population = {\n        current: units.villagers.length + units.military.length,\n        capacity: populationCapacity\n    };\n    const fetchSavesAndConfigs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        setIsAppLoading(true);\n        try {\n            var _allAgeConfigs_;\n            const names = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllSaveNames)();\n            setAllSaves(names);\n            // --- Smart Seeding/Updating for Ages ---\n            let allAgeConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllAgeConfigs)();\n            let ageMap = new Map(allAgeConfigs.map((item)=>[\n                    item.id,\n                    item\n                ]));\n            let agesNeedUpdate = false;\n            for (const [index, pItem] of _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES.entries()){\n                const existingItem = ageMap.get(pItem.name);\n                var _existingItem_isActive, _existingItem_order;\n                const newItem = {\n                    ...existingItem || {},\n                    ...pItem,\n                    id: pItem.name,\n                    isPredefined: true,\n                    isActive: (_existingItem_isActive = existingItem === null || existingItem === void 0 ? void 0 : existingItem.isActive) !== null && _existingItem_isActive !== void 0 ? _existingItem_isActive : true,\n                    order: (_existingItem_order = existingItem === null || existingItem === void 0 ? void 0 : existingItem.order) !== null && _existingItem_order !== void 0 ? _existingItem_order : index\n                };\n                if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveAgeConfig)(newItem);\n                    agesNeedUpdate = true;\n                }\n            }\n            if (agesNeedUpdate) allAgeConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllAgeConfigs)();\n            setMasterAgeList(allAgeConfigs);\n            // --- Smart Seeding/Updating for Buildings ---\n            let allBuildingConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllBuildingConfigs)();\n            let buildingMap = new Map(allBuildingConfigs.map((item)=>[\n                    item.id,\n                    item\n                ]));\n            let buildingsNeedUpdate = false;\n            const defaultAge = ((_allAgeConfigs_ = allAgeConfigs[0]) === null || _allAgeConfigs_ === void 0 ? void 0 : _allAgeConfigs_.name) || _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES[0].name;\n            for (const [index, pItem] of _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__.INITIAL_BUILDINGS.entries()){\n                const existingItem = buildingMap.get(pItem.id);\n                var _existingItem_isActive1, _existingItem_order1;\n                const newItem = {\n                    ...existingItem || {},\n                    ...pItem,\n                    id: pItem.id,\n                    isPredefined: true,\n                    unlockedInAge: (existingItem === null || existingItem === void 0 ? void 0 : existingItem.unlockedInAge) || (pItem.id === \"townCenter\" ? _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES[0].name : defaultAge),\n                    isActive: (_existingItem_isActive1 = existingItem === null || existingItem === void 0 ? void 0 : existingItem.isActive) !== null && _existingItem_isActive1 !== void 0 ? _existingItem_isActive1 : true,\n                    order: (_existingItem_order1 = existingItem === null || existingItem === void 0 ? void 0 : existingItem.order) !== null && _existingItem_order1 !== void 0 ? _existingItem_order1 : index\n                };\n                if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveBuildingConfig)(newItem);\n                    buildingsNeedUpdate = true;\n                }\n            }\n            if (buildingsNeedUpdate) allBuildingConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllBuildingConfigs)();\n            setMasterBuildingList(allBuildingConfigs);\n            // --- Smart Seeding/Updating for Units ---\n            let allUnitConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllUnitConfigs)();\n            let unitMap = new Map(allUnitConfigs.map((item)=>[\n                    item.id,\n                    item\n                ]));\n            let unitsNeedUpdate = false;\n            for (const [index, pItem] of _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__.INITIAL_UNITS.entries()){\n                const existingItem = unitMap.get(pItem.id);\n                var _existingItem_isActive2, _existingItem_order2;\n                const newItem = {\n                    ...existingItem || {},\n                    ...pItem,\n                    id: pItem.id,\n                    isPredefined: true,\n                    isActive: (_existingItem_isActive2 = existingItem === null || existingItem === void 0 ? void 0 : existingItem.isActive) !== null && _existingItem_isActive2 !== void 0 ? _existingItem_isActive2 : true,\n                    order: (_existingItem_order2 = existingItem === null || existingItem === void 0 ? void 0 : existingItem.order) !== null && _existingItem_order2 !== void 0 ? _existingItem_order2 : index\n                };\n                if (JSON.stringify(existingItem) !== JSON.stringify(newItem)) {\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveUnitConfig)(newItem);\n                    unitsNeedUpdate = true;\n                }\n            }\n            if (unitsNeedUpdate) allUnitConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllUnitConfigs)();\n            setMasterUnitList(allUnitConfigs);\n            return {\n                allAgeConfigs,\n                allBuildingConfigs,\n                allUnitConfigs\n            };\n        } catch (error) {\n            console.error(\"Error during initial config fetch:\", error);\n            const ages = _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES.map((a, i)=>({\n                    ...a,\n                    id: a.name,\n                    isActive: true,\n                    isPredefined: true,\n                    order: i\n                }));\n            const buildings = _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__.INITIAL_BUILDINGS.map((b, i)=>({\n                    ...b,\n                    isActive: true,\n                    isPredefined: true,\n                    order: i,\n                    unlockedInAge: \"Nomadic Age\"\n                }));\n            const units = _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__.INITIAL_UNITS.map((u, i)=>({\n                    ...u,\n                    isActive: true,\n                    isPredefined: true,\n                    order: i\n                }));\n            setMasterAgeList(ages);\n            setMasterBuildingList(buildings);\n            setMasterUnitList(units);\n            return {\n                allAgeConfigs: ages,\n                allBuildingConfigs: buildings,\n                allUnitConfigs: units\n            };\n        } finally{\n            setIsAppLoading(false);\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchSavesAndConfigs();\n    }, [\n        fetchSavesAndConfigs\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && civilization && currentSaveName) {\n            const fullState = {\n                civilization,\n                resources,\n                units,\n                buildings,\n                currentAge,\n                gameLog,\n                activeTasks,\n                resourceNodes,\n                inventory,\n                activeBuffs\n            };\n            (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveGameState)(currentSaveName, fullState);\n        }\n    }, [\n        civilization,\n        resources,\n        units,\n        buildings,\n        currentAge,\n        gameLog,\n        gameState,\n        currentSaveName,\n        activeTasks,\n        resourceNodes,\n        inventory,\n        activeBuffs\n    ]);\n    const addNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n        const id = \"\".concat(Date.now(), \"-\").concat(Math.random());\n        setNotifications((prev)=>[\n                {\n                    id,\n                    message\n                }\n            ]);\n    }, []);\n    const removeNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{\n        setNotifications((prev)=>prev.filter((n)=>n.id !== id));\n    }, []);\n    const addToLog = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message, icon)=>{\n        setGameLog((prev)=>[\n                {\n                    id: \"\".concat(Date.now(), \"-\").concat(Math.random()),\n                    message,\n                    icon\n                },\n                ...prev.slice(0, 19)\n            ]);\n    }, []);\n    const updateResources = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((deltas)=>{\n        setResources((prev)=>{\n            const newResources = {\n                ...prev\n            };\n            for(const key in deltas){\n                const resourceKey = key;\n                var _deltas_resourceKey;\n                newResources[resourceKey] = Math.max(0, newResources[resourceKey] + ((_deltas_resourceKey = deltas[resourceKey]) !== null && _deltas_resourceKey !== void 0 ? _deltas_resourceKey : 0));\n            }\n            return newResources;\n        });\n        setResourceDeltas((prev)=>({\n                ...prev,\n                ...deltas\n            }));\n        for(const key in deltas){\n            const resourceKey = key;\n            if (deltaTimeoutRef.current[resourceKey]) {\n                window.clearTimeout(deltaTimeoutRef.current[resourceKey]);\n            }\n            deltaTimeoutRef.current[resourceKey] = window.setTimeout(()=>{\n                setResourceDeltas((prev)=>{\n                    const newDeltas = {\n                        ...prev\n                    };\n                    delete newDeltas[resourceKey];\n                    return newDeltas;\n                });\n            }, 1500);\n        }\n    }, []);\n    const handleTaskCompletion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((task)=>{\n        var _task_payload;\n        if (((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.villagerIds) && task.payload.villagerIds.length > 0) {\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>task.payload.villagerIds.includes(v.id) ? {\n                            ...v,\n                            currentTask: null\n                        } : v)\n                }));\n        }\n        switch(task.type){\n            case \"build\":\n                {\n                    const { buildingType, position } = task.payload;\n                    const buildingInfo = buildingList.find((b)=>b.id === buildingType);\n                    const [name] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                    const newBuilding = {\n                        id: task.id,\n                        name,\n                        position: position,\n                        currentHp: buildingInfo.hp\n                    };\n                    setBuildings((p)=>{\n                        const currentBuildings = p[buildingType] || [];\n                        return {\n                            ...p,\n                            [buildingType]: [\n                                ...currentBuildings,\n                                newBuilding\n                            ]\n                        };\n                    });\n                    addToLog(\"\".concat(task.payload.villagerIds.length, \" builder(s) have constructed \").concat(name, \", a new \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n                    setActivityStatus(\"Construction of \".concat(name, \" is complete.\"));\n                    break;\n                }\n            case \"upgrade_building\":\n                {\n                    var _buildings_originalBuildingType;\n                    const { originalBuildingId, originalBuildingType, targetBuildingType } = task.payload;\n                    const originalBuilding = (_buildings_originalBuildingType = buildings[originalBuildingType]) === null || _buildings_originalBuildingType === void 0 ? void 0 : _buildings_originalBuildingType.find((b)=>b.id === originalBuildingId);\n                    const targetBuildingInfo = buildingList.find((b)=>b.id === targetBuildingType);\n                    if (originalBuilding && targetBuildingInfo) {\n                        const newBuilding = {\n                            id: originalBuilding.id,\n                            name: originalBuilding.name,\n                            position: originalBuilding.position,\n                            currentHp: targetBuildingInfo.hp\n                        };\n                        setBuildings((p)=>{\n                            const newBuildings = {\n                                ...p\n                            };\n                            newBuildings[originalBuildingType] = (newBuildings[originalBuildingType] || []).filter((b)=>b.id !== originalBuildingId);\n                            newBuildings[targetBuildingType] = [\n                                ...newBuildings[targetBuildingType] || [],\n                                newBuilding\n                            ];\n                            return newBuildings;\n                        });\n                        addToLog(\"\".concat(originalBuilding.name, \" has been upgraded to a \").concat(targetBuildingInfo.name, \"!\"), targetBuildingInfo.iconId);\n                        setActivityStatus(\"Upgrade to \".concat(targetBuildingInfo.name, \" complete.\"));\n                    }\n                    break;\n                }\n            case \"gather\":\n                break;\n            case \"train_villager\":\n                {\n                    const { count } = task.payload;\n                    const newVillagerNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", count);\n                    const newVillagers = newVillagerNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(name),\n                            name,\n                            currentTask: null\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            villagers: [\n                                ...p.villagers,\n                                ...newVillagers\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" new villager(s) have joined your settlement.\"), \"villager\");\n                    setActivityStatus(\"\".concat(count, \" new villager(s) are ready to work.\"));\n                    break;\n                }\n            case \"train_military\":\n                {\n                    const { unitType, count } = task.payload;\n                    const unitInfo = unitList.find((u)=>u.id === unitType);\n                    const newUnitNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"soldier\", count);\n                    const newUnits = newUnitNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(unitType, \"-\").concat(name),\n                            name,\n                            title: \"\",\n                            unitType: unitType\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            military: [\n                                ...p.military,\n                                ...newUnits\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" \").concat(unitInfo.name, \"(s) have been trained.\"), unitType);\n                    setActivityStatus(\"\".concat(count, \" new \").concat(unitInfo.name, \"(s) are ready for battle.\"));\n                    break;\n                }\n            case \"advance_age\":\n                {\n                    const activeAges = masterAgeList.filter((a)=>a.isActive);\n                    const currentIndex = activeAges.findIndex((age)=>age.name === currentAge);\n                    const ageResult = activeAges[currentIndex + 1] || {\n                        name: \"Age of Legends\",\n                        description: \"Your civilization transcends history and becomes a legend.\"\n                    };\n                    setCurrentAge(ageResult.name);\n                    addToLog(\"You have advanced to the \".concat(ageResult.name, \"!\"), \"age\");\n                    addToLog(ageResult.description, \"age\");\n                    setActivityStatus(\"Welcome to the \".concat(ageResult.name, \"!\"));\n                    break;\n                }\n        }\n    }, [\n        currentAge,\n        addToLog,\n        buildingList,\n        unitList,\n        masterAgeList,\n        buildings\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState !== _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING) {\n            if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n            return;\n        }\n        const gameLoop = ()=>{\n            const now = Date.now();\n            const deltaTime = now - lastTickRef.current;\n            lastTickRef.current = now;\n            let completedTasks = [];\n            let resourceDeltasThisTick = {};\n            // --- Passive Generation and Maintenance ---\n            Object.values(buildings).flat().forEach((instance)=>{\n                const config = masterBuildingList.find((b)=>b.id === Object.keys(buildings).find((key)=>buildings[key].some((bInst)=>bInst.id === instance.id)));\n                if (!config) return;\n                // Passive Generation\n                if (config.generatesResource && config.generatesResource !== \"none\" && config.generationRate) {\n                    const amountPerSecond = config.generationRate / 60;\n                    resourceDeltasThisTick[config.generatesResource] = (resourceDeltasThisTick[config.generatesResource] || 0) + amountPerSecond / 1000 * deltaTime;\n                }\n                // Maintenance Costs\n                if (config.maintenanceCost) {\n                    Object.entries(config.maintenanceCost).forEach((param)=>{\n                        let [res, cost] = param;\n                        const costPerSecond = (cost || 0) / 60;\n                        resourceDeltasThisTick[res] = (resourceDeltasThisTick[res] || 0) - costPerSecond / 1000 * deltaTime;\n                    });\n                }\n            });\n            setActiveBuffs((prev)=>{\n                var _prev_resourceBoost, _prev_resourceBoost1;\n                const newResourceBoosts = (_prev_resourceBoost = prev.resourceBoost) === null || _prev_resourceBoost === void 0 ? void 0 : _prev_resourceBoost.filter((b)=>b.endTime > now);\n                if ((newResourceBoosts === null || newResourceBoosts === void 0 ? void 0 : newResourceBoosts.length) !== ((_prev_resourceBoost1 = prev.resourceBoost) === null || _prev_resourceBoost1 === void 0 ? void 0 : _prev_resourceBoost1.length)) {\n                    addToLog(\"A resource gathering bonus has expired.\", \"system\");\n                }\n                return {\n                    ...prev,\n                    resourceBoost: newResourceBoosts\n                };\n            });\n            const tasksInProgress = activeTasks.map((task)=>{\n                if (now >= task.startTime + task.duration) {\n                    completedTasks.push(task);\n                    return null;\n                }\n                if (task.type === \"gather\") {\n                    var _task_payload_villagerIds, _task_payload, _activeBuffs_resourceBoost_find, _activeBuffs_resourceBoost;\n                    const node = resourceNodes.find((n)=>{\n                        var _task_payload;\n                        return n.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.resourceNodeId);\n                    });\n                    const villagerCount = ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 0;\n                    if (!node || villagerCount === 0) {\n                        completedTasks.push(task);\n                        return null;\n                    }\n                    const baseRatePerSecond = GATHER_INFO[node.type].rate;\n                    let civBonusMultiplier = 1;\n                    if (civilization === null || civilization === void 0 ? void 0 : civilization.bonus.toLowerCase().includes(node.type.toLowerCase())) {\n                        const match = civilization.bonus.match(/(\\d+)%/);\n                        if (match === null || match === void 0 ? void 0 : match[1]) civBonusMultiplier = 1 + parseInt(match[1], 10) / 100;\n                    }\n                    const itemBoostMultiplier = ((_activeBuffs_resourceBoost = activeBuffs.resourceBoost) === null || _activeBuffs_resourceBoost === void 0 ? void 0 : (_activeBuffs_resourceBoost_find = _activeBuffs_resourceBoost.find((b)=>b.resource === node.type)) === null || _activeBuffs_resourceBoost_find === void 0 ? void 0 : _activeBuffs_resourceBoost_find.multiplier) || 1;\n                    const finalRatePerSecond = baseRatePerSecond * civBonusMultiplier * itemBoostMultiplier;\n                    resourceDeltasThisTick[node.type] = (resourceDeltasThisTick[node.type] || 0) + finalRatePerSecond / 1000 * deltaTime * villagerCount;\n                }\n                return task;\n            }).filter(Boolean);\n            if (Object.keys(resourceDeltasThisTick).length > 0) {\n                updateResources(resourceDeltasThisTick);\n                setResourceNodes((prevNodes)=>prevNodes.map((node)=>{\n                        const amountToDecrement = resourceDeltasThisTick[node.type];\n                        if (!amountToDecrement) return node;\n                        const newAmount = node.amount - amountToDecrement;\n                        if (newAmount <= 0) {\n                            const taskId = \"gather-\".concat(node.id);\n                            const task = tasksInProgress.find((t)=>t.id === taskId);\n                            if (task) {\n                                var _task_payload_villagerIds, _task_payload;\n                                addToLog(\"\".concat(((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 0, \" villager(s) depleted a \").concat(node.type, \" source, gaining \").concat(Math.floor(node.amount), \" \").concat(node.type, \".\"), node.type);\n                                setActivityStatus(\"A \".concat(node.type, \" source has been fully depleted.\"));\n                                completedTasks.push(task);\n                            }\n                            return null;\n                        }\n                        return {\n                            ...node,\n                            amount: newAmount\n                        };\n                    }).filter(Boolean));\n            }\n            const finalActiveTasks = tasksInProgress.filter((t)=>!completedTasks.some((ct)=>ct.id === t.id));\n            setActiveTasks(finalActiveTasks);\n            if (completedTasks.length > 0) completedTasks.forEach(handleTaskCompletion);\n            animationFrameRef.current = requestAnimationFrame(gameLoop);\n        };\n        animationFrameRef.current = requestAnimationFrame(gameLoop);\n        return ()=>{\n            if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n        };\n    }, [\n        gameState,\n        activeTasks,\n        resourceNodes,\n        handleTaskCompletion,\n        addToLog,\n        updateResources,\n        units.villagers,\n        civilization,\n        activeBuffs,\n        buildings,\n        masterBuildingList\n    ]);\n    const handleNewEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!civilization || currentEvent) return;\n        const event = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedGameEvent)();\n        setCurrentEvent(event);\n        setActivityStatus(\"A new event requires your attention!\");\n    }, [\n        civilization,\n        currentEvent\n    ]);\n    const scheduleNextEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        eventTimerRef.current = setTimeout(()=>handleNewEvent(), (10 + Math.random() * 15) * 1000);\n    }, [\n        handleNewEvent\n    ]);\n    const generateResourceNodes = (existingPositions)=>{\n        const nodes = [];\n        const types = [\n            \"food\",\n            \"wood\",\n            \"gold\",\n            \"stone\"\n        ];\n        const numNodes = 20 + Math.floor(Math.random() * 10);\n        for(let i = 0; i < numNodes; i++){\n            let pos;\n            do {\n                pos = {\n                    x: Math.floor(Math.random() * MAP_DIMENSIONS.width),\n                    y: Math.floor(Math.random() * MAP_DIMENSIONS.height)\n                };\n            }while (existingPositions.has(\"\".concat(pos.x, \",\").concat(pos.y)));\n            existingPositions.add(\"\".concat(pos.x, \",\").concat(pos.y));\n            const type = types[Math.floor(Math.random() * types.length)];\n            nodes.push({\n                id: \"\".concat(Date.now(), \"-node-\").concat(i),\n                type,\n                position: pos,\n                amount: Math.floor(Math.random() * 2001) + 500\n            });\n        }\n        return nodes;\n    };\n    const handleStartNewGame = async (saveName)=>{\n        var _localAgeProgressionList_;\n        if (allSaves.includes(saveName)) {\n            addNotification('A saga named \"'.concat(saveName, '\" already exists.'));\n            return;\n        }\n        const configs = await fetchSavesAndConfigs();\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n        setCurrentSaveName(saveName);\n        const localAgeProgressionList = configs.allAgeConfigs.filter((a)=>a.isActive);\n        const civ = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedCivilization)();\n        setCivilization(civ);\n        setResources({\n            food: 200,\n            wood: 150,\n            gold: 50,\n            stone: 100\n        });\n        const initialVillagers = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", 3).map((name)=>({\n                id: \"\".concat(Date.now(), \"-\").concat(name),\n                name,\n                currentTask: null\n            }));\n        setUnits({\n            villagers: initialVillagers,\n            military: []\n        });\n        const tcPosition = {\n            x: Math.floor(MAP_DIMENSIONS.width / 2),\n            y: Math.floor(MAP_DIMENSIONS.height / 2)\n        };\n        const tcInfo = configs.allBuildingConfigs.find((b)=>b.id === \"townCenter\");\n        const initialTC = {\n            id: \"\".concat(Date.now(), \"-tc\"),\n            name: (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1)[0],\n            position: tcPosition,\n            currentHp: tcInfo.hp\n        };\n        setBuildings({\n            ...initialBuildingsState,\n            townCenter: [\n                initialTC\n            ]\n        });\n        setResourceNodes(generateResourceNodes(new Set([\n            \"\".concat(tcPosition.x, \",\").concat(tcPosition.y)\n        ])));\n        setCurrentAge(((_localAgeProgressionList_ = localAgeProgressionList[0]) === null || _localAgeProgressionList_ === void 0 ? void 0 : _localAgeProgressionList_.name) || _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES[0].name);\n        setGameLog([]);\n        setCurrentEvent(null);\n        setUnlimitedResources(false);\n        setActiveTasks([]);\n        setInventory([]);\n        setActiveBuffs({\n            resourceBoost: []\n        });\n        addToLog(\"\".concat(civ.name, \" has been founded!\"), \"system\");\n        addToLog(\"Your story begins...\", \"system\");\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        setActivityStatus(\"Your settlement awaits your command.\");\n    };\n    const isVillagerBusy = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        var _units_villagers_find;\n        return !!((_units_villagers_find = units.villagers.find((v)=>v.id === villagerId)) === null || _units_villagers_find === void 0 ? void 0 : _units_villagers_find.currentTask);\n    }, [\n        units.villagers\n    ]);\n    const getVillagerTaskDetails = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        var _buildingList_find, _resourceNodes_find;\n        const villager = units.villagers.find((v)=>v.id === villagerId);\n        if (!(villager === null || villager === void 0 ? void 0 : villager.currentTask)) return \"Idle\";\n        const task = activeTasks.find((t)=>t.id === villager.currentTask);\n        if (!task) return \"Idle (Finalizing Task)\";\n        if (task.type === \"build\") return \"Busy: Constructing \".concat(((_buildingList_find = buildingList.find((b)=>b.id === task.payload.buildingType)) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name) || \"a building\");\n        if (task.type === \"gather\") return \"Busy: Gathering \".concat(((_resourceNodes_find = resourceNodes.find((n)=>n.id === task.payload.resourceNodeId)) === null || _resourceNodes_find === void 0 ? void 0 : _resourceNodes_find.type) || \"resources\");\n        return \"Idle\";\n    }, [\n        activeTasks,\n        resourceNodes,\n        units.villagers,\n        buildingList\n    ]);\n    const handleResumeGame = async (saveName)=>{\n        const configs = await fetchSavesAndConfigs();\n        const savedState = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.loadGameState)(saveName);\n        if (savedState) {\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n            setCurrentSaveName(saveName);\n            setCivilization(savedState.civilization);\n            setResources(savedState.resources);\n            const migratedVillagers = (savedState.units.villagers || []).map((v)=>({\n                    ...v,\n                    currentTask: v.currentTask !== undefined ? v.currentTask : null\n                }));\n            const migratedTasks = (savedState.activeTasks || []).map((t)=>{\n                var _t_payload;\n                return t.type === \"build\" && !((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.villagerIds) ? {\n                    ...t,\n                    payload: {\n                        ...t.payload,\n                        villagerIds: []\n                    }\n                } : t;\n            });\n            migratedTasks.forEach((task)=>{\n                var _task_payload_villagerIds, _task_payload;\n                return (_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.forEach((vid)=>{\n                    const v = migratedVillagers.find((v)=>v.id === vid);\n                    if (v) v.currentTask = task.id;\n                });\n            });\n            setUnits({\n                ...savedState.units,\n                villagers: migratedVillagers\n            });\n            const constructionTasks = migratedTasks.filter((t)=>t.type === \"build\");\n            const occupiedCells = new Set([\n                ...Object.values(savedState.buildings || {}).flat().map((b)=>\"\".concat(b.position.x, \",\").concat(b.position.y)),\n                ...constructionTasks.map((t)=>\"\".concat(t.payload.position.x, \",\").concat(t.payload.position.y))\n            ]);\n            let finalBuildings = {\n                ...initialBuildingsState,\n                ...savedState.buildings || {}\n            };\n            Object.keys(finalBuildings).forEach((bType)=>{\n                const info = configs.allBuildingConfigs.find((b)=>b.id === bType);\n                if (info) finalBuildings[bType] = finalBuildings[bType].map((b)=>({\n                        ...b,\n                        currentHp: b.currentHp === undefined ? info.hp : b.currentHp\n                    }));\n            });\n            if (!finalBuildings.townCenter || finalBuildings.townCenter.length === 0) {\n                let tcPos = {\n                    x: 10,\n                    y: 5\n                };\n                while(occupiedCells.has(\"\".concat(tcPos.x, \",\").concat(tcPos.y))){\n                    tcPos.x++;\n                }\n                const tcInfo = configs.allBuildingConfigs.find((b)=>b.id === \"townCenter\");\n                finalBuildings.townCenter = [\n                    {\n                        id: \"\".concat(Date.now(), \"-tc\"),\n                        name: (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1)[0],\n                        position: tcPos,\n                        currentHp: tcInfo.hp\n                    }\n                ];\n                occupiedCells.add(\"\".concat(tcPos.x, \",\").concat(tcPos.y));\n            }\n            setBuildings(finalBuildings);\n            setResourceNodes((savedState.resourceNodes || []).length === 0 ? generateResourceNodes(occupiedCells) : savedState.resourceNodes || []);\n            setCurrentAge(savedState.currentAge);\n            setGameLog(savedState.gameLog);\n            setActiveTasks(migratedTasks);\n            setInventory(savedState.inventory || []);\n            setActiveBuffs(savedState.activeBuffs || {\n                resourceBoost: []\n            });\n            setCurrentEvent(null);\n            setActivityStatus(\"Welcome back to your saga.\");\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        } else {\n            addNotification('Could not find a saved game named \"'.concat(saveName, '\".'));\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState !== _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING) return;\n        if (!currentEvent) scheduleNextEvent();\n        else if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        return ()=>{\n            if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        };\n    }, [\n        gameState,\n        currentEvent,\n        scheduleNextEvent\n    ]);\n    const handleEventChoice = (choice)=>{\n        if (choice.cost) {\n            const missing = Object.keys(choice.cost).filter((res)=>resources[res] < (choice.cost[res] || 0));\n            if (missing.length > 0) {\n                addNotification(\"You lack the required resources: \".concat(missing.join(\", \"), \".\"));\n                return;\n            }\n            updateResources(Object.entries(choice.cost).reduce((acc, param)=>{\n                let [k, v] = param;\n                return {\n                    ...acc,\n                    [k]: -v\n                };\n            }, {}));\n        }\n        const isSuccess = choice.successChance === undefined || Math.random() < choice.successChance;\n        const effects = isSuccess ? choice.successEffects : choice.failureEffects;\n        if (!effects) {\n            setCurrentEvent(null);\n            scheduleNextEvent();\n            return;\n        }\n        let logMessage = 'Decision: \"'.concat(choice.text, '\". Outcome: ').concat(isSuccess ? \"Success\" : \"Failure\", \". \").concat(effects.log);\n        effects.rewards.forEach((reward)=>{\n            if (reward.type === \"resource\") {\n                const amount = Array.isArray(reward.amount) ? Math.floor(Math.random() * (reward.amount[1] - reward.amount[0] + 1)) + reward.amount[0] : reward.amount;\n                if (amount !== 0) {\n                    updateResources({\n                        [reward.resource]: amount\n                    });\n                    logMessage += \" You \".concat(amount > 0 ? \"gained\" : \"lost\", \" \").concat(Math.abs(amount), \" \").concat(reward.resource, \".\");\n                }\n            } else if (reward.type === \"item\") {\n                const itemInfo = _data_itemContent__WEBPACK_IMPORTED_MODULE_6__.GAME_ITEMS[reward.itemId];\n                if (itemInfo) {\n                    const newItems = Array.from({\n                        length: reward.amount\n                    }, (_, i)=>({\n                            ...itemInfo,\n                            id: \"\".concat(reward.itemId, \"-\").concat(Date.now(), \"-\").concat(i)\n                        }));\n                    setInventory((prev)=>[\n                            ...prev,\n                            ...newItems\n                        ]);\n                    logMessage += \" You received \".concat(reward.amount, \"x \").concat(itemInfo.name, \"!\");\n                }\n            } else if (reward.type === \"unit\" && reward.unitType === \"villager\") {\n                const newVillagers = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", reward.amount).map((name)=>({\n                        id: \"\".concat(Date.now(), \"-\").concat(name),\n                        name,\n                        currentTask: null\n                    }));\n                setUnits((p)=>({\n                        ...p,\n                        villagers: [\n                            ...p.villagers,\n                            ...newVillagers\n                        ]\n                    }));\n                logMessage += \" You gained \".concat(reward.amount, \" villager(s).\");\n            } else if (reward.type === \"building\") {\n                const buildingInfo = buildingList.find((b)=>b.id === reward.buildingId);\n                if (buildingInfo) {\n                    const occupiedCells = new Set();\n                    Object.values(buildings).flat().forEach((b)=>occupiedCells.add(\"\".concat(b.position.x, \",\").concat(b.position.y)));\n                    activeTasks.filter((t)=>t.type === \"build\").forEach((t)=>{\n                        var _t_payload;\n                        return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.position) && occupiedCells.add(\"\".concat(t.payload.position.x, \",\").concat(t.payload.position.y));\n                    });\n                    resourceNodes.forEach((n)=>occupiedCells.add(\"\".concat(n.position.x, \",\").concat(n.position.y)));\n                    let placed = false;\n                    for(let i = 0; i < MAP_DIMENSIONS.width * MAP_DIMENSIONS.height; i++){\n                        const x = Math.floor(Math.random() * MAP_DIMENSIONS.width);\n                        const y = Math.floor(Math.random() * MAP_DIMENSIONS.height);\n                        if (!occupiedCells.has(\"\".concat(x, \",\").concat(y))) {\n                            const [name] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                            const newBuilding = {\n                                id: \"reward-\".concat(Date.now()),\n                                name,\n                                position: {\n                                    x,\n                                    y\n                                },\n                                currentHp: buildingInfo.hp\n                            };\n                            setBuildings((p)=>({\n                                    ...p,\n                                    [reward.buildingId]: [\n                                        ...p[reward.buildingId] || [],\n                                        newBuilding\n                                    ]\n                                }));\n                            logMessage += \" You were gifted a new \".concat(buildingInfo.name, \"!\");\n                            placed = true;\n                            break;\n                        }\n                    }\n                    if (!placed) logMessage += \" You were to be gifted a \".concat(buildingInfo.name, \", but there was no room to build it!\");\n                }\n            }\n        });\n        addToLog(logMessage, \"event\");\n        setActivityStatus(effects.log);\n        setCurrentEvent(null);\n        scheduleNextEvent();\n    };\n    const handleInitiateBuild = (villagerId, rect)=>{\n        if (isVillagerBusy(villagerId)) {\n            addNotification(\"This villager is already busy.\");\n            return;\n        }\n        setBuildPanelState({\n            isOpen: true,\n            villagerId,\n            anchorRect: rect\n        });\n        setUnitManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleStartPlacement = (buildingId)=>{\n        var _buildings_buildingInfo_id;\n        const villagerId = buildPanelState.villagerId;\n        if (!villagerId) return;\n        const buildingInfo = buildingList.find((b)=>b.id === buildingId);\n        if (!buildingInfo) return;\n        const existingCount = ((_buildings_buildingInfo_id = buildings[buildingInfo.id]) === null || _buildings_buildingInfo_id === void 0 ? void 0 : _buildings_buildingInfo_id.length) || 0;\n        const constructingCount = activeTasks.filter((t)=>{\n            var _t_payload;\n            return t.type === \"build\" && ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.buildingType) === buildingInfo.id;\n        }).length;\n        const totalCount = existingCount + constructingCount;\n        const limit = buildingInfo.buildLimit || 0;\n        if (limit > 0 && totalCount >= limit) {\n            addNotification(\"You have reached the build limit for \".concat(buildingInfo.name, \" (\").concat(limit, \").\"));\n            return;\n        }\n        const missing = unlimitedResources ? [] : Object.keys(buildingInfo.cost).filter((res)=>resources[res] < (buildingInfo.cost[res] || 0));\n        if (missing.length > 0) {\n            addNotification(\"Need more \".concat(missing.join(\", \"), \".\"));\n            return;\n        }\n        setPlayerAction({\n            mode: \"build\",\n            buildingType: buildingId,\n            villagerId\n        });\n        setBuildPanelState({\n            isOpen: false,\n            villagerId: null,\n            anchorRect: null\n        });\n        setActivityStatus(\"Select a location to build a \".concat(buildingInfo.name, \". Right-click to cancel.\"));\n    };\n    const handleConfirmPlacement = (position)=>{\n        if ((playerAction === null || playerAction === void 0 ? void 0 : playerAction.mode) !== \"build\") return;\n        const { buildingType, villagerId } = playerAction;\n        const buildingInfo = buildingList.find((b)=>b.id === buildingType);\n        const builder = units.villagers.find((v)=>v.id === villagerId);\n        if (!buildingInfo || !builder) return;\n        if (!unlimitedResources) updateResources(Object.entries(buildingInfo.cost).reduce((acc, param)=>{\n            let [k, v] = param;\n            return {\n                ...acc,\n                [k]: -v\n            };\n        }, {}));\n        let buildTime = buildingInfo.buildTime * 1000;\n        if (activeBuffs.buildTimeReduction) {\n            buildTime *= 1 - activeBuffs.buildTimeReduction.percentage;\n            addToLog(\"A Builder's Charm reduced construction time by \".concat(activeBuffs.buildTimeReduction.percentage * 100, \"%!\"), \"item\");\n            setActiveBuffs((prev)=>({\n                    ...prev,\n                    buildTimeReduction: prev.buildTimeReduction.uses - 1 > 0 ? {\n                        ...prev.buildTimeReduction,\n                        uses: prev.buildTimeReduction.uses - 1\n                    } : undefined\n                }));\n        }\n        const taskId = \"\".concat(Date.now(), \"-build-\").concat(buildingType);\n        const taskPayload = {\n            buildingType,\n            villagerIds: [\n                villagerId\n            ],\n            position\n        };\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: taskId,\n                type: \"build\",\n                startTime: 0,\n                duration: 0,\n                payload: {\n                    ...taskPayload,\n                    position\n                }\n            });\n        } else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: taskId,\n                        type: \"build\",\n                        startTime: Date.now(),\n                        duration: buildTime,\n                        payload: taskPayload\n                    }\n                ]);\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>v.id === villagerId ? {\n                            ...v,\n                            currentTask: taskId\n                        } : v)\n                }));\n            setActivityStatus(\"\".concat(builder.name, \" has started constructing a \").concat(buildingInfo.name, \".\"));\n            addToLog(\"\".concat(builder.name, \" began construction of a new \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n        }\n        setPlayerAction(null);\n    };\n    const handleCancelPlayerAction = ()=>{\n        setPlayerAction(null);\n        setActivityStatus(\"Command cancelled.\");\n    };\n    const handleDemolishBuilding = (type, id)=>{\n        if (type === \"townCenter\") {\n            addNotification(\"The Town Center is the heart of your civilization and cannot be demolished.\");\n            return;\n        }\n        // Expanded check for active tasks related to this building\n        if (activeTasks.some((task)=>{\n            var _task_payload, _task_payload1;\n            return ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingId) === id || task.type === \"upgrade_building\" && ((_task_payload1 = task.payload) === null || _task_payload1 === void 0 ? void 0 : _task_payload1.originalBuildingId) === id;\n        })) {\n            addNotification(\"Cannot demolish a building with an active task (e.g., training or upgrading).\");\n            return;\n        }\n        const buildingInfo = buildingList.find((b)=>b.id === type);\n        const buildingInstance = buildings[type].find((b)=>b.id === id);\n        if (!buildingInfo || !buildingInstance) return;\n        const capacityWithoutThisBuilding = populationCapacity - (buildingInfo.populationCapacity || 0);\n        // Corrected population check\n        if ((buildingInfo.populationCapacity || 0) > 0 && population.current > capacityWithoutThisBuilding) {\n            addNotification(\"Cannot demolish this building, your people would be homeless.\");\n            return;\n        }\n        const refund = Object.entries(buildingInfo.cost).reduce((acc, param)=>{\n            let [res, cost] = param;\n            const amount = Math.floor((cost || 0) * 0.5);\n            if (amount > 0) acc[res] = amount;\n            return acc;\n        }, {});\n        if (Object.keys(refund).length > 0) {\n            updateResources(refund);\n            addNotification(\"Salvaged \".concat(Object.entries(refund).map((param)=>{\n                let [r, a] = param;\n                return \"\".concat(a, \" \").concat(r);\n            }).join(\", \"), \".\"));\n        }\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((b)=>b.id !== id)\n            }));\n        addToLog(\"\".concat(buildingInstance.name, \" (\").concat(buildingInfo.name, \") was demolished.\"), buildingInfo.iconId);\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleUpdateBuilding = (type, id, name)=>{\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].map((b)=>b.id === id ? {\n                        ...b,\n                        name\n                    } : b)\n            }));\n        addNotification(\"Building renamed.\");\n    };\n    const handleUpgradeBuilding = (building, upgradePath)=>{\n        if (!unlimitedResources) {\n            const missing = Object.keys(upgradePath.cost).filter((res)=>resources[res] < (upgradePath.cost[res] || 0));\n            if (missing.length > 0) {\n                addNotification(\"Need more \".concat(missing.join(\", \"), \".\"));\n                return;\n            }\n            updateResources(Object.entries(upgradePath.cost).reduce((acc, param)=>{\n                let [k, v] = param;\n                return {\n                    ...acc,\n                    [k]: -(v || 0)\n                };\n            }, {}));\n        }\n        const originalBuildingType = Object.keys(buildings).find((type)=>buildings[type].some((b)=>b.id === building.id));\n        const taskPayload = {\n            originalBuildingId: building.id,\n            originalBuildingType,\n            targetBuildingType: upgradePath.id\n        };\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"instant\",\n                type: \"upgrade_building\",\n                startTime: 0,\n                duration: 0,\n                payload: taskPayload\n            });\n        } else {\n            var _buildingList_find;\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-upgrade-\").concat(building.id),\n                        type: \"upgrade_building\",\n                        startTime: Date.now(),\n                        duration: upgradePath.time * 1000,\n                        payload: taskPayload\n                    }\n                ]);\n            addToLog(\"Upgrading \".concat(building.name, \" to a \").concat((_buildingList_find = buildingList.find((b)=>b.id === upgradePath.id)) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name, \".\"), \"system\");\n            setActivityStatus(\"Upgrading \".concat(building.name, \"...\"));\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleTrainVillagers = (count)=>{\n        var _buildings_townCenter;\n        if (activeTasks.some((t)=>t.type === \"train_villager\") || count <= 0) return;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more villagers.\"));\n            return;\n        }\n        if (!((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter[0])) {\n            addNotification(\"No Town Center to train villagers.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            const totalCost = 50 * count;\n            if (resources.food < totalCost) {\n                addNotification(\"Need \".concat(totalCost - resources.food, \" more Food.\"));\n                return;\n            }\n            updateResources({\n                food: -totalCost\n            });\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"train_villager\",\n            startTime: 0,\n            duration: 0,\n            payload: {\n                count\n            }\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-train-villager\"),\n                        type: \"train_villager\",\n                        startTime: Date.now(),\n                        duration: 10000 * count,\n                        payload: {\n                            count,\n                            buildingId: buildings.townCenter[0].id\n                        }\n                    }\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" villager(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new villager(s).\"), \"villager\");\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleTrainUnits = (unitType, count)=>{\n        var _buildings_unitInfo_requiredBuilding;\n        const unitInfo = unitList.find((u)=>u.id === unitType);\n        if (!unitInfo || activeTasks.some((t)=>{\n            var _t_payload;\n            return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.unitType) === unitType;\n        }) || count <= 0) return;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more units.\"));\n            return;\n        }\n        const trainingBuilding = (_buildings_unitInfo_requiredBuilding = buildings[unitInfo.requiredBuilding]) === null || _buildings_unitInfo_requiredBuilding === void 0 ? void 0 : _buildings_unitInfo_requiredBuilding[0];\n        if (!trainingBuilding) {\n            var _buildingList_find;\n            addNotification(\"No \".concat((_buildingList_find = buildingList.find((b)=>b.id === unitInfo.requiredBuilding)) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name, \" to train units.\"));\n            return;\n        }\n        if (!unlimitedResources) {\n            const missing = Object.keys(unitInfo.cost).filter((res)=>resources[res] < (unitInfo.cost[res] || 0) * count);\n            if (missing.length > 0) {\n                addNotification(\"Need more \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources(Object.entries(unitInfo.cost).reduce((acc, param)=>{\n                let [k, v] = param;\n                return {\n                    ...acc,\n                    [k]: -(v || 0) * count\n                };\n            }, {}));\n        }\n        let trainTime = unitInfo.trainTime * 1000 * count;\n        if (activeBuffs.permanentTrainTimeReduction) trainTime *= 1 - activeBuffs.permanentTrainTimeReduction;\n        if (activeBuffs.trainTimeReduction) {\n            const applicable = Math.min(count, activeBuffs.trainTimeReduction.uses);\n            trainTime = unitInfo.trainTime * 1000 * applicable * (1 - activeBuffs.trainTimeReduction.percentage) + unitInfo.trainTime * 1000 * (count - applicable);\n            if (activeBuffs.trainTimeReduction.uses - applicable > 0) setActiveBuffs((prev)=>({\n                    ...prev,\n                    trainTimeReduction: {\n                        ...prev.trainTimeReduction,\n                        uses: prev.trainTimeReduction.uses - applicable\n                    }\n                }));\n            else {\n                setActiveBuffs((prev)=>({\n                        ...prev,\n                        trainTimeReduction: undefined\n                    }));\n                addToLog(\"The Drillmaster's Whistle buff has been fully used.\", \"item\");\n            }\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"train_military\",\n            startTime: 0,\n            duration: 0,\n            payload: {\n                unitType,\n                count\n            }\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-train-\").concat(unitType),\n                        type: \"train_military\",\n                        startTime: Date.now(),\n                        duration: trainTime,\n                        payload: {\n                            unitType,\n                            count,\n                            buildingId: trainingBuilding.id\n                        }\n                    }\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" \").concat(unitInfo.name, \"(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new \").concat(unitInfo.name, \"(s).\"), unitType);\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleDismissSpecificUnit = (type, id)=>{\n        if (type === \"villagers\" && isVillagerBusy(id)) {\n            addNotification(\"Cannot dismiss a busy villager.\");\n            return;\n        }\n        const unit = units[type].find((u)=>u.id === id);\n        if (!unit) return;\n        if (type === \"villagers\" && units.villagers.length <= 1) {\n            addNotification(\"Cannot dismiss your last villager.\");\n            return;\n        }\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((u)=>u.id !== id)\n            }));\n        const unitTypeName = type === \"villagers\" ? \"villager\" : unit.unitType;\n        addToLog(\"\".concat(unit.name, \" the \").concat(unitTypeName, \" has been dismissed.\"), type === \"villagers\" ? \"villager\" : unit.unitType);\n        addNotification(\"\".concat(unit.name, \" was dismissed.\"));\n    };\n    const handleUpdateUnit = (type, id, name, title)=>{\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].map((u)=>u.id === id ? type === \"military\" && title !== undefined ? {\n                        ...u,\n                        name,\n                        title\n                    } : {\n                        ...u,\n                        name\n                    } : u)\n            }));\n        addNotification(\"Unit updated.\");\n    };\n    const handleAssignVillagersToConstruction = (constructionId, count)=>{\n        var _task_payload_villagerIds, _task_payload, _task_payload_villagerIds1, _task_payload1;\n        const idleVillagers = units.villagers.filter((v)=>!v.currentTask);\n        if (count <= 0 || idleVillagers.length === 0) {\n            addNotification(\"No idle villagers available.\");\n            return;\n        }\n        const task = activeTasks.find((t)=>t.id === constructionId);\n        if (!task || task.type !== \"build\") return;\n        const buildingInfo = buildingList.find((b)=>{\n            var _task_payload;\n            return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n        });\n        if (!buildingInfo) return;\n        const cappedCount = Math.min(count, idleVillagers.length);\n        const villagersToAssign = idleVillagers.slice(0, cappedCount).map((v)=>v.id);\n        const workDone = (Date.now() - task.startTime) * (((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 1);\n        const workRemaining = Math.max(0, buildingInfo.buildTime * 1000 - workDone);\n        const newWorkerCount = (((_task_payload1 = task.payload) === null || _task_payload1 === void 0 ? void 0 : (_task_payload_villagerIds1 = _task_payload1.villagerIds) === null || _task_payload_villagerIds1 === void 0 ? void 0 : _task_payload_villagerIds1.length) || 0) + cappedCount;\n        const newRemainingDuration = workRemaining / newWorkerCount;\n        setUnits((prev)=>({\n                ...prev,\n                villagers: prev.villagers.map((v)=>villagersToAssign.includes(v.id) ? {\n                        ...v,\n                        currentTask: constructionId\n                    } : v)\n            }));\n        setActiveTasks((prev)=>prev.map((t)=>t.id === constructionId ? {\n                    ...t,\n                    startTime: Date.now(),\n                    duration: newRemainingDuration,\n                    payload: {\n                        ...t.payload,\n                        villagerIds: [\n                            ...t.payload.villagerIds,\n                            ...villagersToAssign\n                        ]\n                    }\n                } : t));\n        addToLog(\"\".concat(cappedCount, \" villager(s) are now assisting with the \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n        setActivityStatus(\"Construction of the \".concat(buildingInfo.name, \" is now faster.\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAssignVillagers = (targetId, count)=>{\n        if (assignmentPanelState.targetType === \"construction\") return handleAssignVillagersToConstruction(targetId, count);\n        const idleVillagers = units.villagers.filter((v)=>!v.currentTask);\n        if (count <= 0 || idleVillagers.length === 0) {\n            addNotification(\"No idle villagers available.\");\n            return;\n        }\n        const targetNode = resourceNodes.find((n)=>n.id === targetId);\n        if (!targetNode) return;\n        const cappedCount = Math.min(count, idleVillagers.length);\n        const villagersToAssign = idleVillagers.slice(0, cappedCount).map((v)=>v.id);\n        const taskId = \"gather-\".concat(targetId);\n        const existingTask = activeTasks.find((t)=>t.id === taskId);\n        if (unlimitedResources) {\n            updateResources({\n                [targetNode.type]: targetNode.amount\n            });\n            addToLog(\"\".concat(cappedCount, \" villager(s) instantly gathered \").concat(Math.floor(targetNode.amount), \" \").concat(targetNode.type, \".\"), targetNode.type);\n            setResourceNodes((prev)=>prev.filter((n)=>n.id !== targetId));\n        } else {\n            if (existingTask) setActiveTasks((prev)=>prev.map((t)=>t.id === taskId ? {\n                        ...t,\n                        payload: {\n                            ...t.payload,\n                            villagerIds: [\n                                ...new Set([\n                                    ...t.payload.villagerIds,\n                                    ...villagersToAssign\n                                ])\n                            ]\n                        }\n                    } : t));\n            else setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: taskId,\n                        type: \"gather\",\n                        startTime: Date.now(),\n                        duration: 999999999,\n                        payload: {\n                            resourceNodeId: targetId,\n                            villagerIds: villagersToAssign\n                        }\n                    }\n                ]);\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>villagersToAssign.includes(v.id) ? {\n                            ...v,\n                            currentTask: taskId\n                        } : v)\n                }));\n        }\n        addToLog(\"\".concat(cappedCount, \" villager(s) assigned to gather \").concat(targetNode.type, \".\"), targetNode.type);\n        setActivityStatus(\"\".concat(cappedCount, \" villager(s) are now gathering \").concat(targetNode.type, \".\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleRecallVillagers = (targetId, count, type)=>{\n        var _task_payload_villagerIds, _task_payload;\n        const task = activeTasks.find((t)=>t.id === targetId);\n        var _task_payload_villagerIds_length;\n        if (!task || ((_task_payload_villagerIds_length = (_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) !== null && _task_payload_villagerIds_length !== void 0 ? _task_payload_villagerIds_length : 0) < count) return;\n        const villagersToRecall = task.payload.villagerIds.slice(task.payload.villagerIds.length - count);\n        if (type === \"construction\" && villagersToRecall.length === task.payload.villagerIds.length) {\n            addNotification(\"Cannot recall the last builder from a project.\");\n            return;\n        }\n        setUnits((prev)=>({\n                ...prev,\n                villagers: prev.villagers.map((v)=>villagersToRecall.includes(v.id) ? {\n                        ...v,\n                        currentTask: null\n                    } : v)\n            }));\n        const remainingVillagers = task.payload.villagerIds.filter((id)=>!villagersToRecall.includes(id));\n        if (remainingVillagers.length === 0) {\n            setActiveTasks((prev)=>prev.filter((t)=>t.id !== targetId));\n            const node = resourceNodes.find((n)=>n.id === targetId);\n            if (node) addToLog(\"All villagers recalled from gathering \".concat(node.type, \".\"), \"villager\");\n        } else {\n            const buildingInfo = buildingList.find((b)=>{\n                var _task_payload;\n                return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n            });\n            const workDone = (Date.now() - task.startTime) * task.payload.villagerIds.length;\n            const newRemainingDuration = (buildingInfo.buildTime * 1000 - workDone) / remainingVillagers.length;\n            setActiveTasks((prev)=>prev.map((t)=>t.id === targetId ? {\n                        ...t,\n                        startTime: Date.now(),\n                        duration: newRemainingDuration,\n                        payload: {\n                            ...t.payload,\n                            villagerIds: remainingVillagers\n                        }\n                    } : t));\n            if (type === \"construction\") addToLog(\"\".concat(count, \" builder(s) recalled. Construction will now be slower.\"), \"villager\");\n        }\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAdvanceAge = async ()=>{\n        if (activeTasks.some((t)=>t.type === \"advance_age\")) {\n            addNotification(\"Advancement already in progress.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            const missing = [];\n            if (resources.food < 500) missing.push(\"\".concat(500 - resources.food, \" Food\"));\n            if (resources.gold < 200) missing.push(\"\".concat(200 - resources.gold, \" Gold\"));\n            if (missing.length > 0) {\n                addNotification(\"To advance, you need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources({\n                food: -500,\n                gold: -200\n            });\n        }\n        const activeAges = masterAgeList.filter((a)=>a.isActive);\n        const currentIndex = activeAges.findIndex((age)=>age.name === currentAge);\n        if (currentIndex === -1 || currentIndex + 1 >= activeAges.length) {\n            addNotification(\"You have reached the final available age.\");\n            return;\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"advance_age\",\n            startTime: 0,\n            duration: 0,\n            payload: {}\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-advance_age\"),\n                        type: \"advance_age\",\n                        startTime: Date.now(),\n                        duration: 60000\n                    }\n                ]);\n            setActivityStatus(\"Your people begin the long journey to a new age.\");\n            setBuildingManagementPanel({\n                isOpen: false,\n                type: null,\n                instanceId: null,\n                anchorRect: null\n            });\n        }\n    };\n    const handleExitGame = async ()=>{\n        setCurrentSaveName(null);\n        await fetchSavesAndConfigs();\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n    };\n    const handleDeleteGame = async (saveName)=>{\n        await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.deleteGameState)(saveName);\n        await fetchSavesAndConfigs();\n        addNotification('Deleted saga: \"'.concat(saveName, '\"'));\n    };\n    const handleToggleUnlimitedResources = ()=>{\n        const newMode = !unlimitedResources;\n        setUnlimitedResources(newMode);\n        if (newMode) {\n            setResources({\n                food: 99999,\n                wood: 99999,\n                gold: 99999,\n                stone: 99999\n            });\n            addNotification(\"Test Mode: ON - All active tasks completed.\");\n            const depletedNodeIds = new Set();\n            activeTasks.forEach((task)=>{\n                var _task_payload;\n                if (task.type === \"gather\" && ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.resourceNodeId)) {\n                    depletedNodeIds.add(task.payload.resourceNodeId);\n                    const node = resourceNodes.find((n)=>n.id === task.payload.resourceNodeId);\n                    if (node) addToLog(\"Instantly gathered all \".concat(node.type, \" from a depleted source.\"), node.type);\n                }\n                handleTaskCompletion(task);\n            });\n            setActiveTasks([]);\n            if (depletedNodeIds.size > 0) setResourceNodes((prev)=>prev.filter((n)=>!depletedNodeIds.has(n.id)));\n        } else addNotification(\"Test Mode: OFF\");\n    };\n    const handleUseItem = (itemId)=>{\n        const item = inventory.find((i)=>i.id === itemId);\n        if (!item) return;\n        const baseItemId = item.id.split(\"-\")[0];\n        const constructionTasks = activeTasks.filter((t)=>t.type === \"build\");\n        switch(baseItemId){\n            case \"scroll_of_haste\":\n            case \"blueprint_of_the_master\":\n                if (constructionTasks.length > 0) {\n                    var _buildingList_find;\n                    const task = constructionTasks.sort((a, b)=>b.startTime + b.duration - (a.startTime + a.duration))[0];\n                    setActiveTasks((p)=>p.map((t)=>t.id === task.id ? {\n                                ...t,\n                                duration: Math.max(0, t.duration - (baseItemId === \"scroll_of_haste\" ? 15000 : 60000))\n                            } : t));\n                    addToLog(\"Used \".concat(item.name, \" on the \").concat((_buildingList_find = buildingList.find((b)=>{\n                        var _task_payload;\n                        return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n                    })) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name, \".\"), \"item\");\n                }\n                break;\n            case \"hearty_meal\":\n                updateResources({\n                    food: 75\n                });\n                addToLog(\"Used \".concat(item.name, \" to gain 75 food.\"), \"item\");\n                break;\n            case \"builders_charm\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        buildTimeReduction: {\n                            percentage: 0.1,\n                            uses: 1\n                        }\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Next building is 10% faster.\"), \"item\");\n                break;\n            case \"drillmasters_whistle\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        trainTimeReduction: {\n                            percentage: 0.25,\n                            uses: 5\n                        }\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Next 5 units train 25% faster.\"), \"item\");\n                break;\n            case \"golden_harvest\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        resourceBoost: [\n                            ...p.resourceBoost || [],\n                            {\n                                resource: \"food\",\n                                multiplier: 1.5,\n                                endTime: Date.now() + 60000\n                            }\n                        ]\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Food gathering boosted by 50% for 60s.\"), \"item\");\n                break;\n            case \"shard_of_the_ancients\":\n                if (constructionTasks.length > 0) {\n                    var _buildingList_find1;\n                    const task = constructionTasks.sort((a, b)=>b.startTime + b.duration - (a.startTime + a.duration))[0];\n                    setActiveTasks((p)=>p.filter((t)=>t.id !== task.id));\n                    handleTaskCompletion(task);\n                    addToLog(\"Used \".concat(item.name, \" to instantly complete the \").concat((_buildingList_find1 = buildingList.find((b)=>{\n                        var _task_payload;\n                        return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n                    })) === null || _buildingList_find1 === void 0 ? void 0 : _buildingList_find1.name, \".\"), \"item\");\n                }\n                break;\n            case \"heart_of_the_mountain\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        resourceBoost: [\n                            ...p.resourceBoost || [],\n                            {\n                                resource: \"gold\",\n                                multiplier: 2,\n                                endTime: Date.now() + 120000\n                            },\n                            {\n                                resource: \"stone\",\n                                multiplier: 2,\n                                endTime: Date.now() + 120000\n                            }\n                        ]\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Gold and Stone gathering doubled for 2 minutes.\"), \"item\");\n                break;\n            case \"banner_of_command\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        permanentTrainTimeReduction: (p.permanentTrainTimeReduction || 0) + 0.05\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Military units train 5% faster, permanently.\"), \"item\");\n                break;\n            case \"whisper_of_the_creator\":\n                const tasks = [\n                    ...activeTasks\n                ];\n                setActiveTasks([]);\n                tasks.forEach(handleTaskCompletion);\n                addToLog(\"A divine whisper echoes, and all work is instantly finished.\", \"item\");\n                break;\n        }\n        setInventory((prev)=>prev.filter((i)=>i.id !== itemId));\n        setInventoryPanelState({\n            isOpen: false,\n            anchorRect: null\n        });\n    };\n    const buildingCounts = buildingList.reduce((acc, b)=>{\n        var _buildings_b_id;\n        acc[b.id] = ((_buildings_b_id = buildings[b.id]) === null || _buildings_b_id === void 0 ? void 0 : _buildings_b_id.length) || 0;\n        return acc;\n    }, {});\n    const idleVillagerCount = units.villagers.filter((v)=>!v.currentTask).length;\n    const assignmentTarget = assignmentPanelState.targetType === \"resource\" ? resourceNodes.find((n)=>n.id === assignmentPanelState.targetId) : activeTasks.find((t)=>t.type === \"build\" && t.id === assignmentPanelState.targetId);\n    const currentAgeIndex = ageProgressionList.findIndex((a)=>a.name === currentAge);\n    const availableBuildings = buildingList.filter((b)=>{\n        const unlockAgeIndex = ageProgressionList.findIndex((a)=>a.name === b.unlockedInAge);\n        return b.isActive && !b.isUpgradeOnly && unlockAgeIndex !== -1 && unlockAgeIndex <= currentAgeIndex;\n    });\n    const activeUnits = unitList.filter((u)=>u.isActive);\n    const closeAllPanels = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setUnitManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                anchorRect: null\n            } : p);\n        setBuildingManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                instanceId: null,\n                anchorRect: null\n            } : p);\n        setBuildPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                villagerId: null,\n                anchorRect: null\n            } : p);\n        setAssignmentPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                targetId: null,\n                targetType: null,\n                anchorRect: null\n            } : p);\n        setCivPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setAllBuildingsPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setInventoryPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n    }, []);\n    const handleOpenBuildingPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((type, instanceId, rect)=>{\n        closeAllPanels();\n        setBuildingManagementPanel({\n            isOpen: true,\n            type,\n            instanceId,\n            anchorRect: rect\n        });\n    }, [\n        closeAllPanels\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleClickOutside = (event)=>{\n            const target = event.target;\n            if (!target.closest(\".sci-fi-panel-popup, [data-radix-popper-content-wrapper]\")) closeAllPanels();\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return ()=>document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [\n        closeAllPanels\n    ]);\n    const renderContent = ()=>{\n        if (isAppLoading) {\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 934,\n                columnNumber: 20\n            }, undefined);\n        }\n        switch(gameState){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves,\n                    onDeleteGame: handleDeleteGame\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 938,\n                    columnNumber: 42\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 939,\n                    columnNumber: 45\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING:\n                if (!civilization) return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 941,\n                    columnNumber: 43\n                }, undefined);\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_GameUI__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                            civilization: civilization,\n                            resources: resources,\n                            units: units,\n                            buildings: buildings,\n                            population: population,\n                            currentAge: currentAge,\n                            gameLog: gameLog,\n                            resourceDeltas: resourceDeltas,\n                            activityStatus: activityStatus,\n                            unitList: activeUnits,\n                            buildingList: buildingList,\n                            onOpenUnitPanel: (type, rect)=>{\n                                closeAllPanels();\n                                setUnitManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            onOpenAllBuildingsPanel: (rect)=>{\n                                closeAllPanels();\n                                setAllBuildingsPanel({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            playerAction: playerAction,\n                            onConfirmPlacement: handleConfirmPlacement,\n                            onCancelPlayerAction: handleCancelPlayerAction,\n                            onBuildingClick: (building, rect)=>{\n                                closeAllPanels();\n                                const type = Object.keys(buildings).find((key)=>{\n                                    var _buildings_key;\n                                    return (_buildings_key = buildings[key]) === null || _buildings_key === void 0 ? void 0 : _buildings_key.some((b)=>b.id === building.id);\n                                });\n                                if (type) setBuildingManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    instanceId: building.id,\n                                    anchorRect: rect\n                                });\n                            },\n                            mapDimensions: MAP_DIMENSIONS,\n                            activeTasks: activeTasks,\n                            onExitGame: handleExitGame,\n                            onOpenCivPanel: (rect)=>{\n                                closeAllPanels();\n                                setCivPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            resourceNodes: resourceNodes,\n                            onOpenAssignmentPanel: (nodeId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: nodeId,\n                                    targetType: \"resource\",\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenConstructionPanel: (constructionId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: constructionId,\n                                    targetType: \"construction\",\n                                    anchorRect: rect\n                                });\n                            },\n                            gatherInfo: GATHER_INFO,\n                            currentEvent: currentEvent,\n                            onEventChoice: handleEventChoice,\n                            inventory: inventory,\n                            onOpenInventoryPanel: (rect)=>{\n                                closeAllPanels();\n                                setInventoryPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            }\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 944,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildPanel__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                            isOpen: buildPanelState.isOpen,\n                            onClose: ()=>setBuildPanelState({\n                                    isOpen: false,\n                                    villagerId: null,\n                                    anchorRect: null\n                                }),\n                            onStartPlacement: handleStartPlacement,\n                            resources: resources,\n                            buildingCounts: buildingCounts,\n                            buildingList: availableBuildings,\n                            anchorRect: buildPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 959,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                            isOpen: unitManagementPanel.isOpen,\n                            onClose: ()=>setUnitManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            type: unitManagementPanel.type,\n                            units: units,\n                            onUpdateUnit: handleUpdateUnit,\n                            onDismissUnit: handleDismissSpecificUnit,\n                            onInitiateBuild: (villagerId, rect)=>{\n                                closeAllPanels();\n                                handleInitiateBuild(villagerId, rect);\n                            },\n                            getVillagerTaskDetails: getVillagerTaskDetails,\n                            anchorRect: unitManagementPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 960,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                            isOpen: buildingManagementPanel.isOpen,\n                            onClose: ()=>setBuildingManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            panelState: buildingManagementPanel,\n                            buildings: buildings,\n                            buildingList: buildingList,\n                            onUpdateBuilding: handleUpdateBuilding,\n                            onDemolishBuilding: handleDemolishBuilding,\n                            onTrainUnits: handleTrainUnits,\n                            onTrainVillagers: handleTrainVillagers,\n                            onUpgradeBuilding: handleUpgradeBuilding,\n                            resources: resources,\n                            population: population,\n                            unitList: activeUnits,\n                            onAdvanceAge: handleAdvanceAge,\n                            activeTasks: activeTasks,\n                            anchorRect: buildingManagementPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 961,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n                            isOpen: assignmentPanelState.isOpen,\n                            onClose: ()=>setAssignmentPanelState({\n                                    isOpen: false,\n                                    targetId: null,\n                                    targetType: null,\n                                    anchorRect: null\n                                }),\n                            assignmentTarget: assignmentTarget || null,\n                            idleVillagerCount: idleVillagerCount,\n                            onAssignVillagers: handleAssignVillagers,\n                            onRecallVillagers: handleRecallVillagers,\n                            gatherInfo: GATHER_INFO,\n                            buildingList: buildingList,\n                            units: units,\n                            anchorRect: assignmentPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 962,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                            isOpen: civPanelState.isOpen,\n                            onClose: ()=>setCivPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            civilization: civilization,\n                            anchorRect: civPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 963,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                            isOpen: allBuildingsPanel.isOpen,\n                            onClose: ()=>setAllBuildingsPanel({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            buildingList: buildingList,\n                            buildingCounts: buildingCounts,\n                            activeTasks: activeTasks,\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            anchorRect: allBuildingsPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 964,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_InventoryPanel__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n                            isOpen: inventoryPanelState.isOpen,\n                            onClose: ()=>setInventoryPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            inventory: inventory,\n                            onUseItem: handleUseItem,\n                            activeTasks: activeTasks,\n                            activeBuffs: activeBuffs,\n                            anchorRect: inventoryPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 965,\n                            columnNumber: 25\n                        }, undefined)\n                    ]\n                }, void 0, true);\n            default:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves,\n                    onDeleteGame: handleDeleteGame\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 968,\n                    columnNumber: 29\n                }, undefined);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-stone-dark flex items-center justify-center p-4\",\n        children: [\n            gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: handleToggleUnlimitedResources,\n                className: \"fixed bottom-4 left-4 z-[101] bg-brand-gold text-stone-dark font-bold py-1 px-3 rounded-full text-xs shadow-lg hover:scale-105 transition-transform\",\n                \"aria-label\": \"Toggle unlimited resources test mode\",\n                children: [\n                    \"Test Mode: \",\n                    unlimitedResources ? \"ON\" : \"OFF\"\n                ]\n            }, void 0, true, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 975,\n                columnNumber: 18\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_NotificationManager__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n                notifications: notifications,\n                onRemoveNotification: removeNotification\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 977,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: \"w-full max-w-7xl mx-auto\",\n                children: renderContent()\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 978,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/user/studio/src/app/page.tsx\",\n        lineNumber: 973,\n        columnNumber: 9\n    }, undefined);\n};\n_s(GamePage, \"6ba5DZIVQMlc7mLVHnPvPJyPy2c=\");\n_c = GamePage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GamePage);\nvar _c;\n$RefreshReg$(_c, \"GamePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFVOzs7Ozs7c0NBQzNTLDhEQUFDMUUsbUVBQWNBOzRCQUFDd0UsUUFBUWlCLG9CQUFvQmpCLE1BQU07NEJBQUU4VixTQUFTLElBQU01VSx1QkFBdUI7b0NBQUVsQixRQUFRO29DQUFPRSxZQUFZO2dDQUFLOzRCQUFJakIsV0FBV0E7NEJBQVcyWCxXQUFXdkQ7NEJBQWV4VSxhQUFhQTs0QkFBYU0sYUFBYUE7NEJBQWFlLFlBQVllLG9CQUFvQmYsVUFBVTs7Ozs7Ozs7WUFHMVI7Z0JBQVMscUJBQU8sOERBQUNuRixnRUFBV0E7b0JBQUM0WixXQUFXekk7b0JBQW9CMEksY0FBYzdIO29CQUFrQjhILFlBQVl0VztvQkFBVXVXLGNBQWM5Qjs7Ozs7O1FBQ3BJO0lBQ0o7SUFFQSxxQkFDSSw4REFBQzZEO1FBQUlDLFdBQVU7O1lBQ1ZsYSxjQUFjaEQsOENBQVVBLENBQUMrSyxPQUFPLGtCQUM1Qiw4REFBQ29TO2dCQUFPQyxTQUFTL0Q7Z0JBQWdDNkQsV0FBVTtnQkFBc0pHLGNBQVc7O29CQUF1QztvQkFBWTVZLHFCQUFxQixPQUFPOzs7Ozs7OzBCQUVoVCw4REFBQ25ELHdFQUFtQkE7Z0JBQUNpRCxlQUFlQTtnQkFBZStZLHNCQUFzQmhTOzs7Ozs7MEJBQ3pFLDhEQUFDaVM7Z0JBQUtMLFdBQVU7MEJBQ1hwQzs7Ozs7Ozs7Ozs7O0FBSWpCO0dBLzZCTS9YO0tBQUFBO0FBaTdCTiwrREFBZUEsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL3BhZ2UudHN4P2Y2OGEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbid1c2UgY2xpZW50JztcblxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBHYW1lU3RhdHVzLCB0eXBlIENpdmlsaXphdGlvbiwgdHlwZSBSZXNvdXJjZXMsIHR5cGUgVW5pdHMsIHR5cGUgQnVpbGRpbmdzLCB0eXBlIEdhbWVFdmVudCwgdHlwZSBHYW1lTG9nRW50cnksIHR5cGUgTG9nSWNvblR5cGUsIHR5cGUgUmVzb3VyY2VEZWx0YXMsIEJ1aWxkaW5nVHlwZSwgVUlOb3RpZmljYXRpb24sIEZ1bGxHYW1lU3RhdGUsIFZpbGxhZ2VyLCBNaWxpdGFyeVVuaXQsIFVuaXRDb25maWcsIE1pbGl0YXJ5VW5pdFR5cGUsIEdhbWVUYXNrLCBUYXNrVHlwZSwgUmVzb3VyY2VOb2RlLCBSZXNvdXJjZU5vZGVUeXBlLCBQbGF5ZXJBY3Rpb25TdGF0ZSwgR2FtZUV2ZW50Q2hvaWNlLCBHYW1lSXRlbSwgUmV3YXJkLCBBY3RpdmVCdWZmcywgQnVpbGRpbmdJbnN0YW5jZSwgQWdlQ29uZmlnLCBCdWlsZGluZ0NvbmZpZywgQnVpbGRpbmdVcGdyYWRlUGF0aCB9IGZyb20gJ0AvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0UHJlZGVmaW5lZENpdmlsaXphdGlvbiwgZ2V0UHJlZGVmaW5lZEdhbWVFdmVudCB9IGZyb20gJ0Avc2VydmljZXMvZ2VtaW5pU2VydmljZSc7XG5pbXBvcnQgeyBzYXZlR2FtZVN0YXRlLCBsb2FkR2FtZVN0YXRlLCBnZXRBbGxTYXZlTmFtZXMsIGRlbGV0ZUdhbWVTdGF0ZSwgZ2V0QWxsQWdlQ29uZmlncywgZ2V0QWxsQnVpbGRpbmdDb25maWdzLCBnZXRBbGxVbml0Q29uZmlncywgc2F2ZUFnZUNvbmZpZywgc2F2ZUJ1aWxkaW5nQ29uZmlnLCBzYXZlVW5pdENvbmZpZyB9IGZyb20gJ0Avc2VydmljZXMvZGJTZXJ2aWNlJztcbmltcG9ydCB7IGdldFJhbmRvbU5hbWVzIH0gZnJvbSAnQC9zZXJ2aWNlcy9uYW1lU2VydmljZSc7XG5pbXBvcnQgeyBHQU1FX0lURU1TIH0gZnJvbSAnQC9kYXRhL2l0ZW1Db250ZW50JztcbmltcG9ydCB7IElOSVRJQUxfQUdFUyB9IGZyb20gJ0AvZGF0YS9hZ2VJbmZvJztcbmltcG9ydCB7IElOSVRJQUxfQlVJTERJTkdTIH0gZnJvbSAnQC9kYXRhL2J1aWxkaW5nSW5mbyc7XG5pbXBvcnQgeyBJTklUSUFMX1VOSVRTIH0gZnJvbSAnQC9kYXRhL3VuaXRJbmZvJztcbmltcG9ydCBHYW1lVUkgZnJvbSAnQC9jb21wb25lbnRzL0dhbWVVSSc7XG5pbXBvcnQgU3RhcnRTY3JlZW4gZnJvbSAnQC9jb21wb25lbnRzL1N0YXJ0U2NyZWVuJztcbmltcG9ydCBMb2FkaW5nU2NyZWVuIGZyb20gJ0AvY29tcG9uZW50cy9Mb2FkaW5nU2NyZWVuJztcbmltcG9ydCBCdWlsZFBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy9CdWlsZFBhbmVsJztcbmltcG9ydCBOb3RpZmljYXRpb25NYW5hZ2VyIGZyb20gJ0AvY29tcG9uZW50cy9Ob3RpZmljYXRpb25NYW5hZ2VyJztcbmltcG9ydCBVbml0TWFuYWdlbWVudFBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy9Vbml0TWFuYWdlbWVudFBhbmVsJztcbmltcG9ydCBCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvQnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwnO1xuaW1wb3J0IFJlc291cmNlQXNzaWdubWVudFBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy9SZXNvdXJjZUFzc2lnbm1lbnRQYW5lbCc7XG5pbXBvcnQgQ2l2aWxpemF0aW9uUGFuZWwgZnJvbSAnQC9jb21wb25lbnRzL0NpdmlsaXphdGlvblBhbmVsJztcbmltcG9ydCBBbGxCdWlsZGluZ3NQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvQWxsQnVpbGRpbmdzUGFuZWwnO1xuaW1wb3J0IEludmVudG9yeVBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy9JbnZlbnRvcnlQYW5lbCc7XG5cbmNvbnN0IEdBVEhFUl9JTkZPOiBSZWNvcmQ8UmVzb3VyY2VOb2RlVHlwZSwgeyByYXRlOiBudW1iZXIgfT4gPSB7XG4gICAgZm9vZDogeyByYXRlOiAxMCB9LFxuICAgIHdvb2Q6IHsgcmF0ZTogOCB9LFxuICAgIGdvbGQ6IHsgcmF0ZTogNSB9LFxuICAgIHN0b25lOiB7IHJhdGU6IDYgfSxcbn1cblxuY29uc3QgaW5pdGlhbEJ1aWxkaW5nc1N0YXRlOiBCdWlsZGluZ3MgPSB7XG4gICAgaG91c2VzOiBbXSwgYmFycmFja3M6IFtdLCBhcmNoZXJ5UmFuZ2U6IFtdLCBzdGFibGU6IFtdLCBzaWVnZVdvcmtzaG9wOiBbXSwgYmxhY2tzbWl0aDogW10sIHdhdGNoVG93ZXI6IFtdLCB0b3duQ2VudGVyOiBbXVxufTtcblxuY29uc3QgTUFQX0RJTUVOU0lPTlMgPSB7IHdpZHRoOiAyNSwgaGVpZ2h0OiAxOCB9O1xuXG5cbmNvbnN0IEdhbWVQYWdlOiBSZWFjdC5GQyA9ICgpID0+IHtcbiAgICAvLyBDb3JlIEdhbWUgU3RhdGVcbiAgICBjb25zdCBbZ2FtZVN0YXRlLCBzZXRHYW1lU3RhdGVdID0gdXNlU3RhdGU8R2FtZVN0YXR1cz4oR2FtZVN0YXR1cy5MT0FESU5HKTtcbiAgICBjb25zdCBbY2l2aWxpemF0aW9uLCBzZXRDaXZpbGl6YXRpb25dID0gdXNlU3RhdGU8Q2l2aWxpemF0aW9uIHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW3Jlc291cmNlcywgc2V0UmVzb3VyY2VzXSA9IHVzZVN0YXRlPFJlc291cmNlcz4oeyBmb29kOiAyMDAsIHdvb2Q6IDE1MCwgZ29sZDogNTAsIHN0b25lOiAxMDAgfSk7XG4gICAgY29uc3QgW3VuaXRzLCBzZXRVbml0c10gPSB1c2VTdGF0ZTxVbml0cz4oeyB2aWxsYWdlcnM6IFtdLCBtaWxpdGFyeTogW10gfSk7XG4gICAgY29uc3QgW2J1aWxkaW5ncywgc2V0QnVpbGRpbmdzXSA9IHVzZVN0YXRlPEJ1aWxkaW5ncz4oaW5pdGlhbEJ1aWxkaW5nc1N0YXRlKTtcbiAgICBjb25zdCBbY3VycmVudEFnZSwgc2V0Q3VycmVudEFnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCdOb21hZGljIEFnZScpO1xuICAgIGNvbnN0IFtnYW1lTG9nLCBzZXRHYW1lTG9nXSA9IHVzZVN0YXRlPEdhbWVMb2dFbnRyeVtdPihbXSk7XG4gICAgY29uc3QgW2N1cnJlbnRFdmVudCwgc2V0Q3VycmVudEV2ZW50XSA9IHVzZVN0YXRlPEdhbWVFdmVudCB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtyZXNvdXJjZURlbHRhcywgc2V0UmVzb3VyY2VEZWx0YXNdID0gdXNlU3RhdGU8UmVzb3VyY2VEZWx0YXM+KHt9KTtcbiAgICBjb25zdCBbYWN0aXZpdHlTdGF0dXMsIHNldEFjdGl2aXR5U3RhdHVzXSA9IHVzZVN0YXRlPHN0cmluZz4oJ1lvdXIgc3RvcnkgYmVnaW5zLi4uJyk7XG4gICAgY29uc3QgW25vdGlmaWNhdGlvbnMsIHNldE5vdGlmaWNhdGlvbnNdID0gdXNlU3RhdGU8VUlOb3RpZmljYXRpb25bXT4oW10pO1xuICAgIGNvbnN0IFt1bmxpbWl0ZWRSZXNvdXJjZXMsIHNldFVubGltaXRlZFJlc291cmNlc10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gICAgY29uc3QgW2FsbFNhdmVzLCBzZXRBbGxTYXZlc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICAgIGNvbnN0IFtjdXJyZW50U2F2ZU5hbWUsIHNldEN1cnJlbnRTYXZlTmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBbcGxheWVyQWN0aW9uLCBzZXRQbGF5ZXJBY3Rpb25dID0gdXNlU3RhdGU8UGxheWVyQWN0aW9uU3RhdGU+KG51bGwpO1xuICAgIGNvbnN0IFthY3RpdmVUYXNrcywgc2V0QWN0aXZlVGFza3NdID0gdXNlU3RhdGU8R2FtZVRhc2tbXT4oW10pO1xuICAgIGNvbnN0IFtyZXNvdXJjZU5vZGVzLCBzZXRSZXNvdXJjZU5vZGVzXSA9IHVzZVN0YXRlPFJlc291cmNlTm9kZVtdPihbXSk7XG4gICAgY29uc3QgW2ludmVudG9yeSwgc2V0SW52ZW50b3J5XSA9IHVzZVN0YXRlPEdhbWVJdGVtW10+KFtdKTtcbiAgICBjb25zdCBbYWN0aXZlQnVmZnMsIHNldEFjdGl2ZUJ1ZmZzXSA9IHVzZVN0YXRlPEFjdGl2ZUJ1ZmZzPih7IHJlc291cmNlQm9vc3Q6IFtdIH0pO1xuICAgIFxuICAgIC8vIE1hc3RlciBsaXN0cyBvZiBhbGwgY29uZmlndXJhdGlvbnMgZnJvbSBEQlxuICAgIGNvbnN0IFttYXN0ZXJBZ2VMaXN0LCBzZXRNYXN0ZXJBZ2VMaXN0XSA9IHVzZVN0YXRlPEFnZUNvbmZpZ1tdPihbXSk7XG4gICAgY29uc3QgW21hc3RlckJ1aWxkaW5nTGlzdCwgc2V0TWFzdGVyQnVpbGRpbmdMaXN0XSA9IHVzZVN0YXRlPEJ1aWxkaW5nQ29uZmlnW10+KFtdKTtcbiAgICBjb25zdCBbbWFzdGVyVW5pdExpc3QsIHNldE1hc3RlclVuaXRMaXN0XSA9IHVzZVN0YXRlPFVuaXRDb25maWdbXT4oW10pO1xuXG4gICAgLy8gQXBwIExvYWRpbmcgU3RhdGVcbiAgICBjb25zdCBbaXNBcHBMb2FkaW5nLCBzZXRJc0FwcExvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgICBcbiAgICAvLyBQYW5lbCBTdGF0ZXNcbiAgICBjb25zdCBbYnVpbGRQYW5lbFN0YXRlLCBzZXRCdWlsZFBhbmVsU3RhdGVdID0gdXNlU3RhdGU8eyBpc09wZW46IGJvb2xlYW47IHZpbGxhZ2VySWQ6IHN0cmluZyB8IG51bGw7IGFuY2hvclJlY3Q6IERPTVJlY3QgfCBudWxsIH0+KHsgaXNPcGVuOiBmYWxzZSwgdmlsbGFnZXJJZDogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICBjb25zdCBbdW5pdE1hbmFnZW1lbnRQYW5lbCwgc2V0VW5pdE1hbmFnZW1lbnRQYW5lbF0gPSB1c2VTdGF0ZTx7IGlzT3BlbjogYm9vbGVhbjsgdHlwZTogJ3ZpbGxhZ2VycycgfCAnbWlsaXRhcnknIHwgbnVsbDsgYW5jaG9yUmVjdDogRE9NUmVjdCB8IG51bGw7IH0+KHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICBjb25zdCBbYnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwsIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyB0eXBlOiBCdWlsZGluZ1R5cGUgfCBzdHJpbmcgfCBudWxsOyBpbnN0YW5jZUlkPzogc3RyaW5nOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbDsgfT4oeyBpc09wZW46IGZhbHNlLCB0eXBlOiBudWxsLCBpbnN0YW5jZUlkOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIGNvbnN0IFthbGxCdWlsZGluZ3NQYW5lbCwgc2V0QWxsQnVpbGRpbmdzUGFuZWxdID0gdXNlU3RhdGU8eyBpc09wZW46IGJvb2xlYW47IGFuY2hvclJlY3Q6IERPTVJlY3QgfCBudWxsOyB9Pih7IGlzT3BlbjogZmFsc2UsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgY29uc3QgW2Fzc2lnbm1lbnRQYW5lbFN0YXRlLCBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZV0gPSB1c2VTdGF0ZTx7IGlzT3BlbjogYm9vbGVhbjsgdGFyZ2V0SWQ6IHN0cmluZyB8IG51bGw7IHRhcmdldFR5cGU6ICdyZXNvdXJjZScgfCAnY29uc3RydWN0aW9uJyB8IG51bGw7IGFuY2hvclJlY3Q6IERPTVJlY3QgfCBudWxsOyB9Pih7IGlzT3BlbjogZmFsc2UsIHRhcmdldElkOiBudWxsLCB0YXJnZXRUeXBlOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIGNvbnN0IFtjaXZQYW5lbFN0YXRlLCBzZXRDaXZQYW5lbFN0YXRlXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbDsgfT4oeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIGNvbnN0IFtpbnZlbnRvcnlQYW5lbFN0YXRlLCBzZXRJbnZlbnRvcnlQYW5lbFN0YXRlXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbDsgfT4oeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuXG4gICAgY29uc3QgZGVsdGFUaW1lb3V0UmVmID0gdXNlUmVmPHsgW2tleSBpbiBrZXlvZiBSZXNvdXJjZXNdPzogbnVtYmVyIH0+KHt9KTtcbiAgICBjb25zdCBldmVudFRpbWVyUmVmID0gdXNlUmVmPE5vZGVKUy5UaW1lb3V0IHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgbGFzdFRpY2tSZWYgPSB1c2VSZWY8bnVtYmVyPihEYXRlLm5vdygpKTtcbiAgICBjb25zdCBhbmltYXRpb25GcmFtZVJlZiA9IHVzZVJlZjxudW1iZXI+KCk7XG4gICAgXG4gICAgLy8gRGVyaXZlZCBzdGF0ZSBmb3IgYWN0aXZlIGdhbWUgY29uZmlndXJhdGlvbnNcbiAgICBjb25zdCBhZ2VQcm9ncmVzc2lvbkxpc3QgPSBtYXN0ZXJBZ2VMaXN0LmZpbHRlcihhZ2UgPT4gYWdlLmlzQWN0aXZlKTtcbiAgICBjb25zdCBidWlsZGluZ0xpc3QgPSBtYXN0ZXJCdWlsZGluZ0xpc3Q7IC8vIEtlZXAgYWxsIGZvciBsb29rdXBzLCBmaWx0ZXIgb24gdXNlXG4gICAgY29uc3QgdW5pdExpc3QgPSBtYXN0ZXJVbml0TGlzdDsgLy8gS2VlcCBhbGwgZm9yIGxvb2t1cHMsIGZpbHRlciBvbiB1c2VcblxuICAgIGNvbnN0IHBvcHVsYXRpb25DYXBhY2l0eSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBsZXQgY2FwYWNpdHkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1aWxkaW5nVHlwZSBpbiBidWlsZGluZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nSW5mbyA9IG1hc3RlckJ1aWxkaW5nTGlzdC5maW5kKGIgPT4gYi5pZCA9PT0gYnVpbGRpbmdUeXBlKTtcbiAgICAgICAgICAgIGlmIChidWlsZGluZ0luZm8gJiYgYnVpbGRpbmdJbmZvLnBvcHVsYXRpb25DYXBhY2l0eSkge1xuICAgICAgICAgICAgICAgIGNhcGFjaXR5ICs9IGJ1aWxkaW5nc1tidWlsZGluZ1R5cGVdLmxlbmd0aCAqIGJ1aWxkaW5nSW5mby5wb3B1bGF0aW9uQ2FwYWNpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhcGFjaXR5O1xuICAgIH0sIFtidWlsZGluZ3MsIG1hc3RlckJ1aWxkaW5nTGlzdF0pO1xuICAgIFxuICAgIGNvbnN0IHBvcHVsYXRpb24gPSB7XG4gICAgICAgIGN1cnJlbnQ6IHVuaXRzLnZpbGxhZ2Vycy5sZW5ndGggKyB1bml0cy5taWxpdGFyeS5sZW5ndGgsXG4gICAgICAgIGNhcGFjaXR5OiBwb3B1bGF0aW9uQ2FwYWNpdHksXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBmZXRjaFNhdmVzQW5kQ29uZmlncyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgc2V0SXNBcHBMb2FkaW5nKHRydWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBhd2FpdCBnZXRBbGxTYXZlTmFtZXMoKTtcbiAgICAgICAgICAgIHNldEFsbFNhdmVzKG5hbWVzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gLS0tIFNtYXJ0IFNlZWRpbmcvVXBkYXRpbmcgZm9yIEFnZXMgLS0tXG4gICAgICAgICAgICBsZXQgYWxsQWdlQ29uZmlncyA9IGF3YWl0IGdldEFsbEFnZUNvbmZpZ3MoKTtcbiAgICAgICAgICAgIGxldCBhZ2VNYXAgPSBuZXcgTWFwKGFsbEFnZUNvbmZpZ3MubWFwKGl0ZW0gPT4gW2l0ZW0uaWQsIGl0ZW1dKSk7XG4gICAgICAgICAgICBsZXQgYWdlc05lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2luZGV4LCBwSXRlbV0gb2YgSU5JVElBTF9BR0VTLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSXRlbSA9IGFnZU1hcC5nZXQocEl0ZW0ubmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SXRlbTogQWdlQ29uZmlnID0geyAuLi4oZXhpc3RpbmdJdGVtIHx8IHt9KSwgLi4ucEl0ZW0sIGlkOiBwSXRlbS5uYW1lLCBpc1ByZWRlZmluZWQ6IHRydWUsIGlzQWN0aXZlOiBleGlzdGluZ0l0ZW0/LmlzQWN0aXZlID8/IHRydWUsIG9yZGVyOiBleGlzdGluZ0l0ZW0/Lm9yZGVyID8/IGluZGV4IH07XG4gICAgICAgICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nSXRlbSkgIT09IEpTT04uc3RyaW5naWZ5KG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNhdmVBZ2VDb25maWcobmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGFnZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWdlc05lZWRVcGRhdGUpIGFsbEFnZUNvbmZpZ3MgPSBhd2FpdCBnZXRBbGxBZ2VDb25maWdzKCk7XG4gICAgICAgICAgICBzZXRNYXN0ZXJBZ2VMaXN0KGFsbEFnZUNvbmZpZ3MpO1xuXG4gICAgICAgICAgICAvLyAtLS0gU21hcnQgU2VlZGluZy9VcGRhdGluZyBmb3IgQnVpbGRpbmdzIC0tLVxuICAgICAgICAgICAgbGV0IGFsbEJ1aWxkaW5nQ29uZmlncyA9IGF3YWl0IGdldEFsbEJ1aWxkaW5nQ29uZmlncygpO1xuICAgICAgICAgICAgbGV0IGJ1aWxkaW5nTWFwID0gbmV3IE1hcChhbGxCdWlsZGluZ0NvbmZpZ3MubWFwKGl0ZW0gPT4gW2l0ZW0uaWQsIGl0ZW1dKSk7XG4gICAgICAgICAgICBsZXQgYnVpbGRpbmdzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEFnZSA9IGFsbEFnZUNvbmZpZ3NbMF0/Lm5hbWUgfHwgSU5JVElBTF9BR0VTWzBdLm5hbWU7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgcEl0ZW1dIG9mIElOSVRJQUxfQlVJTERJTkdTLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSXRlbSA9IGJ1aWxkaW5nTWFwLmdldChwSXRlbS5pZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SXRlbTogQnVpbGRpbmdDb25maWcgPSB7IC4uLihleGlzdGluZ0l0ZW0gfHwge30pLCAuLi5wSXRlbSwgaWQ6IHBJdGVtLmlkLCBpc1ByZWRlZmluZWQ6IHRydWUsIHVubG9ja2VkSW5BZ2U6IGV4aXN0aW5nSXRlbT8udW5sb2NrZWRJbkFnZSB8fCAocEl0ZW0uaWQgPT09ICd0b3duQ2VudGVyJyA/IElOSVRJQUxfQUdFU1swXS5uYW1lIDogZGVmYXVsdEFnZSksIGlzQWN0aXZlOiBleGlzdGluZ0l0ZW0/LmlzQWN0aXZlID8/IHRydWUsIG9yZGVyOiBleGlzdGluZ0l0ZW0/Lm9yZGVyID8/IGluZGV4IH07XG4gICAgICAgICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nSXRlbSkgIT09IEpTT04uc3RyaW5naWZ5KG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNhdmVCdWlsZGluZ0NvbmZpZyhuZXdJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmdzTmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1aWxkaW5nc05lZWRVcGRhdGUpIGFsbEJ1aWxkaW5nQ29uZmlncyA9IGF3YWl0IGdldEFsbEJ1aWxkaW5nQ29uZmlncygpO1xuICAgICAgICAgICAgc2V0TWFzdGVyQnVpbGRpbmdMaXN0KGFsbEJ1aWxkaW5nQ29uZmlncyk7XG5cbiAgICAgICAgICAgIC8vIC0tLSBTbWFydCBTZWVkaW5nL1VwZGF0aW5nIGZvciBVbml0cyAtLS1cbiAgICAgICAgICAgIGxldCBhbGxVbml0Q29uZmlncyA9IGF3YWl0IGdldEFsbFVuaXRDb25maWdzKCk7XG4gICAgICAgICAgICBsZXQgdW5pdE1hcCA9IG5ldyBNYXAoYWxsVW5pdENvbmZpZ3MubWFwKGl0ZW0gPT4gW2l0ZW0uaWQsIGl0ZW1dKSk7XG4gICAgICAgICAgICBsZXQgdW5pdHNOZWVkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtpbmRleCwgcEl0ZW1dIG9mIElOSVRJQUxfVU5JVFMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gdW5pdE1hcC5nZXQocEl0ZW0uaWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0l0ZW06IFVuaXRDb25maWcgPSB7IC4uLihleGlzdGluZ0l0ZW0gfHwge30pLCAuLi5wSXRlbSwgaWQ6IHBJdGVtLmlkLCBpc1ByZWRlZmluZWQ6IHRydWUsIGlzQWN0aXZlOiBleGlzdGluZ0l0ZW0/LmlzQWN0aXZlID8/IHRydWUsIG9yZGVyOiBleGlzdGluZ0l0ZW0/Lm9yZGVyID8/IGluZGV4IH07XG4gICAgICAgICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nSXRlbSkgIT09IEpTT04uc3RyaW5naWZ5KG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNhdmVVbml0Q29uZmlnKG5ld0l0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB1bml0c05lZWRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bml0c05lZWRVcGRhdGUpIGFsbFVuaXRDb25maWdzID0gYXdhaXQgZ2V0QWxsVW5pdENvbmZpZ3MoKTtcbiAgICAgICAgICAgIHNldE1hc3RlclVuaXRMaXN0KGFsbFVuaXRDb25maWdzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHsgYWxsQWdlQ29uZmlncywgYWxsQnVpbGRpbmdDb25maWdzLCBhbGxVbml0Q29uZmlncyB9O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGR1cmluZyBpbml0aWFsIGNvbmZpZyBmZXRjaDpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgY29uc3QgYWdlcyA9IElOSVRJQUxfQUdFUy5tYXAoKGEsIGkpID0+ICh7Li4uYSwgaWQ6IGEubmFtZSwgaXNBY3RpdmU6IHRydWUsIGlzUHJlZGVmaW5lZDogdHJ1ZSwgb3JkZXI6IGl9KSk7XG4gICAgICAgICAgICBjb25zdCBidWlsZGluZ3MgPSBJTklUSUFMX0JVSUxESU5HUy5tYXAoKGIsIGkpID0+ICh7Li4uYiwgaXNBY3RpdmU6IHRydWUsIGlzUHJlZGVmaW5lZDogdHJ1ZSwgb3JkZXI6IGksIHVubG9ja2VkSW5BZ2U6ICdOb21hZGljIEFnZScgfSBhcyBCdWlsZGluZ0NvbmZpZykpO1xuICAgICAgICAgICAgY29uc3QgdW5pdHMgPSBJTklUSUFMX1VOSVRTLm1hcCgodSwgaSkgPT4gKHsuLi51LCBpc0FjdGl2ZTogdHJ1ZSwgaXNQcmVkZWZpbmVkOiB0cnVlLCBvcmRlcjogaX0pKTtcbiAgICAgICAgICAgIHNldE1hc3RlckFnZUxpc3QoYWdlcyk7XG4gICAgICAgICAgICBzZXRNYXN0ZXJCdWlsZGluZ0xpc3QoYnVpbGRpbmdzKTtcbiAgICAgICAgICAgIHNldE1hc3RlclVuaXRMaXN0KHVuaXRzKTtcbiAgICAgICAgICAgIHJldHVybiB7IGFsbEFnZUNvbmZpZ3M6IGFnZXMsIGFsbEJ1aWxkaW5nQ29uZmlnczogYnVpbGRpbmdzLCBhbGxVbml0Q29uZmlnczogdW5pdHMgfTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHNldElzQXBwTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRHYW1lU3RhdGUoR2FtZVN0YXR1cy5NRU5VKTtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcbiAgICBcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBmZXRjaFNhdmVzQW5kQ29uZmlncygpO1xuICAgIH0sIFtmZXRjaFNhdmVzQW5kQ29uZmlnc10pO1xuICAgIFxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChnYW1lU3RhdGUgPT09IEdhbWVTdGF0dXMuUExBWUlORyAmJiBjaXZpbGl6YXRpb24gJiYgY3VycmVudFNhdmVOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBmdWxsU3RhdGU6IEZ1bGxHYW1lU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgY2l2aWxpemF0aW9uLFxuICAgICAgICAgICAgICAgIHJlc291cmNlcyxcbiAgICAgICAgICAgICAgICB1bml0cyxcbiAgICAgICAgICAgICAgICBidWlsZGluZ3MsXG4gICAgICAgICAgICAgICAgY3VycmVudEFnZSxcbiAgICAgICAgICAgICAgICBnYW1lTG9nLFxuICAgICAgICAgICAgICAgIGFjdGl2ZVRhc2tzLFxuICAgICAgICAgICAgICAgIHJlc291cmNlTm9kZXMsXG4gICAgICAgICAgICAgICAgaW52ZW50b3J5LFxuICAgICAgICAgICAgICAgIGFjdGl2ZUJ1ZmZzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNhdmVHYW1lU3RhdGUoY3VycmVudFNhdmVOYW1lLCBmdWxsU3RhdGUpO1xuICAgICAgICB9XG4gICAgfSwgW2NpdmlsaXphdGlvbiwgcmVzb3VyY2VzLCB1bml0cywgYnVpbGRpbmdzLCBjdXJyZW50QWdlLCBnYW1lTG9nLCBnYW1lU3RhdGUsIGN1cnJlbnRTYXZlTmFtZSwgYWN0aXZlVGFza3MsIHJlc291cmNlTm9kZXMsIGludmVudG9yeSwgYWN0aXZlQnVmZnNdKTtcblxuICAgIGNvbnN0IGFkZE5vdGlmaWNhdGlvbiA9IHVzZUNhbGxiYWNrKChtZXNzYWdlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBgJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCl9YDtcbiAgICAgICAgc2V0Tm90aWZpY2F0aW9ucyhwcmV2ID0+IFt7IGlkLCBtZXNzYWdlIH1dKTtcbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCByZW1vdmVOb3RpZmljYXRpb24gPSB1c2VDYWxsYmFjaygoaWQ6IHN0cmluZykgPT4ge1xuICAgICAgICBzZXROb3RpZmljYXRpb25zKHByZXYgPT4gcHJldi5maWx0ZXIobiA9PiBuLmlkICE9PSBpZCkpO1xuICAgIH0sIFtdKTtcbiAgICBcbiAgICBjb25zdCBhZGRUb0xvZyA9IHVzZUNhbGxiYWNrKChtZXNzYWdlOiBzdHJpbmcsIGljb246IExvZ0ljb25UeXBlKSA9PiB7XG4gICAgICAgIHNldEdhbWVMb2cocHJldiA9PiBbeyBpZDogYCR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpfWAsIG1lc3NhZ2UsIGljb24gfSwgLi4ucHJldi5zbGljZSgwLCAxOSldKTtcbiAgICB9LCBbXSk7XG4gICAgXG4gICAgY29uc3QgdXBkYXRlUmVzb3VyY2VzID0gdXNlQ2FsbGJhY2soKGRlbHRhczogUmVzb3VyY2VEZWx0YXMpID0+IHtcbiAgICAgICAgc2V0UmVzb3VyY2VzKHByZXYgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3UmVzb3VyY2VzID0geyAuLi5wcmV2IH07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkZWx0YXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvdXJjZUtleSA9IGtleSBhcyBrZXlvZiBSZXNvdXJjZXM7XG4gICAgICAgICAgICAgICAgbmV3UmVzb3VyY2VzW3Jlc291cmNlS2V5XSA9IE1hdGgubWF4KDAsIG5ld1Jlc291cmNlc1tyZXNvdXJjZUtleV0gKyAoZGVsdGFzW3Jlc291cmNlS2V5XSA/PyAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3UmVzb3VyY2VzO1xuICAgICAgICB9KTtcblxuICAgICAgICBzZXRSZXNvdXJjZURlbHRhcyhwcmV2ID0+ICh7Li4ucHJldiwgLi4uZGVsdGFzfSkpO1xuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRlbHRhcykge1xuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VLZXkgPSBrZXkgYXMga2V5b2YgUmVzb3VyY2VzO1xuICAgICAgICAgICAgaWYgKGRlbHRhVGltZW91dFJlZi5jdXJyZW50W3Jlc291cmNlS2V5XSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoZGVsdGFUaW1lb3V0UmVmLmN1cnJlbnRbcmVzb3VyY2VLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbHRhVGltZW91dFJlZi5jdXJyZW50W3Jlc291cmNlS2V5XSA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRSZXNvdXJjZURlbHRhcyhwcmV2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RGVsdGFzID0gey4uLnByZXZ9O1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbmV3RGVsdGFzW3Jlc291cmNlS2V5XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld0RlbHRhcztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDE1MDApO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgaGFuZGxlVGFza0NvbXBsZXRpb24gPSB1c2VDYWxsYmFjaygodGFzazogR2FtZVRhc2spID0+IHtcbiAgICAgICAgaWYgKHRhc2sucGF5bG9hZD8udmlsbGFnZXJJZHMgJiYgdGFzay5wYXlsb2FkLnZpbGxhZ2VySWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNldFVuaXRzKHByZXYgPT4gKHsgLi4ucHJldiwgdmlsbGFnZXJzOiBwcmV2LnZpbGxhZ2Vycy5tYXAodiA9PiB0YXNrLnBheWxvYWQhLnZpbGxhZ2VySWRzIS5pbmNsdWRlcyh2LmlkKSA/IHsgLi4udiwgY3VycmVudFRhc2s6IG51bGwgfSA6IHYpIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAodGFzay50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdidWlsZCc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGJ1aWxkaW5nVHlwZSwgcG9zaXRpb24gfSA9IHRhc2sucGF5bG9hZCE7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gYnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSBidWlsZGluZ1R5cGUpITtcbiAgICAgICAgICAgICAgICBjb25zdCBbbmFtZV0gPSBnZXRSYW5kb21OYW1lcygnYnVpbGRpbmcnLCAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdCdWlsZGluZzogQnVpbGRpbmdJbnN0YW5jZSA9IHsgaWQ6IHRhc2suaWQsIG5hbWUsIHBvc2l0aW9uOiBwb3NpdGlvbiEsIGN1cnJlbnRIcDogYnVpbGRpbmdJbmZvLmhwIH07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc2V0QnVpbGRpbmdzKHAgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QnVpbGRpbmdzID0gcFtidWlsZGluZ1R5cGUgYXMgc3RyaW5nXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ucCwgW2J1aWxkaW5nVHlwZSBhcyBzdHJpbmddOiBbLi4uY3VycmVudEJ1aWxkaW5ncywgbmV3QnVpbGRpbmddIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYWRkVG9Mb2coYCR7dGFzay5wYXlsb2FkIS52aWxsYWdlcklkcyEubGVuZ3RofSBidWlsZGVyKHMpIGhhdmUgY29uc3RydWN0ZWQgJHtuYW1lfSwgYSBuZXcgJHtidWlsZGluZ0luZm8ubmFtZX0uYCwgYnVpbGRpbmdJbmZvLmljb25JZCk7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYENvbnN0cnVjdGlvbiBvZiAke25hbWV9IGlzIGNvbXBsZXRlLmApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAndXBncmFkZV9idWlsZGluZyc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9yaWdpbmFsQnVpbGRpbmdJZCwgb3JpZ2luYWxCdWlsZGluZ1R5cGUsIHRhcmdldEJ1aWxkaW5nVHlwZSB9ID0gdGFzay5wYXlsb2FkITtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbEJ1aWxkaW5nID0gYnVpbGRpbmdzW29yaWdpbmFsQnVpbGRpbmdUeXBlIGFzIHN0cmluZ10/LmZpbmQoYiA9PiBiLmlkID09PSBvcmlnaW5hbEJ1aWxkaW5nSWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEJ1aWxkaW5nSW5mbyA9IGJ1aWxkaW5nTGlzdC5maW5kKGIgPT4gYi5pZCA9PT0gdGFyZ2V0QnVpbGRpbmdUeXBlKTtcblxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEJ1aWxkaW5nICYmIHRhcmdldEJ1aWxkaW5nSW5mbykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdCdWlsZGluZzogQnVpbGRpbmdJbnN0YW5jZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBvcmlnaW5hbEJ1aWxkaW5nLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogb3JpZ2luYWxCdWlsZGluZy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IG9yaWdpbmFsQnVpbGRpbmcucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SHA6IHRhcmdldEJ1aWxkaW5nSW5mby5ocCxcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRCdWlsZGluZ3MocCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdCdWlsZGluZ3MgPSB7IC4uLnAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0J1aWxkaW5nc1tvcmlnaW5hbEJ1aWxkaW5nVHlwZSBhcyBzdHJpbmddID0gKG5ld0J1aWxkaW5nc1tvcmlnaW5hbEJ1aWxkaW5nVHlwZSBhcyBzdHJpbmddIHx8IFtdKS5maWx0ZXIoYiA9PiBiLmlkICE9PSBvcmlnaW5hbEJ1aWxkaW5nSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QnVpbGRpbmdzW3RhcmdldEJ1aWxkaW5nVHlwZSBhcyBzdHJpbmddID0gWy4uLihuZXdCdWlsZGluZ3NbdGFyZ2V0QnVpbGRpbmdUeXBlIGFzIHN0cmluZ10gfHwgW10pLCBuZXdCdWlsZGluZ107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3QnVpbGRpbmdzO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgIGFkZFRvTG9nKGAke29yaWdpbmFsQnVpbGRpbmcubmFtZX0gaGFzIGJlZW4gdXBncmFkZWQgdG8gYSAke3RhcmdldEJ1aWxkaW5nSW5mby5uYW1lfSFgLCB0YXJnZXRCdWlsZGluZ0luZm8uaWNvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGBVcGdyYWRlIHRvICR7dGFyZ2V0QnVpbGRpbmdJbmZvLm5hbWV9IGNvbXBsZXRlLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2dhdGhlcic6IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndHJhaW5fdmlsbGFnZXInOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb3VudCB9ID0gdGFzay5wYXlsb2FkITtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWaWxsYWdlck5hbWVzID0gZ2V0UmFuZG9tTmFtZXMoJ3ZpbGxhZ2VyJywgY291bnQhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWaWxsYWdlcnM6IFZpbGxhZ2VyW10gPSBuZXdWaWxsYWdlck5hbWVzLm1hcChuYW1lID0+ICh7IGlkOiBgJHtEYXRlLm5vdygpfS0ke25hbWV9YCwgbmFtZSwgY3VycmVudFRhc2s6IG51bGwgfSkpO1xuICAgICAgICAgICAgICAgIHNldFVuaXRzKHAgPT4gKHsgLi4ucCwgdmlsbGFnZXJzOiBbLi4ucC52aWxsYWdlcnMsIC4uLm5ld1ZpbGxhZ2Vyc10gfSkpO1xuICAgICAgICAgICAgICAgIGFkZFRvTG9nKGAke2NvdW50fSBuZXcgdmlsbGFnZXIocykgaGF2ZSBqb2luZWQgeW91ciBzZXR0bGVtZW50LmAsICd2aWxsYWdlcicpO1xuICAgICAgICAgICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGAke2NvdW50fSBuZXcgdmlsbGFnZXIocykgYXJlIHJlYWR5IHRvIHdvcmsuYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICd0cmFpbl9taWxpdGFyeSc6IHtcbiAgICAgICAgICAgICAgICAgY29uc3QgeyB1bml0VHlwZSwgY291bnQgfSA9IHRhc2sucGF5bG9hZCE7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHVuaXRJbmZvID0gdW5pdExpc3QuZmluZCh1ID0+IHUuaWQgPT09IHVuaXRUeXBlKSE7XG4gICAgICAgICAgICAgICAgIGNvbnN0IG5ld1VuaXROYW1lcyA9IGdldFJhbmRvbU5hbWVzKCdzb2xkaWVyJywgY291bnQhKTtcbiAgICAgICAgICAgICAgICAgY29uc3QgbmV3VW5pdHM6IE1pbGl0YXJ5VW5pdFtdID0gbmV3VW5pdE5hbWVzLm1hcChuYW1lID0+ICh7IGlkOiBgJHtEYXRlLm5vdygpfS0ke3VuaXRUeXBlfS0ke25hbWV9YCwgbmFtZSwgdGl0bGU6ICcnLCB1bml0VHlwZTogdW5pdFR5cGUhIH0pKTtcbiAgICAgICAgICAgICAgICAgc2V0VW5pdHMocCA9PiAoeyAuLi5wLCBtaWxpdGFyeTogWy4uLnAubWlsaXRhcnksIC4uLm5ld1VuaXRzXSB9KSk7XG4gICAgICAgICAgICAgICAgIGFkZFRvTG9nKGAke2NvdW50fSAke3VuaXRJbmZvLm5hbWV9KHMpIGhhdmUgYmVlbiB0cmFpbmVkLmAsIHVuaXRUeXBlISk7XG4gICAgICAgICAgICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGAke2NvdW50fSBuZXcgJHt1bml0SW5mby5uYW1lfShzKSBhcmUgcmVhZHkgZm9yIGJhdHRsZS5gKTtcbiAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdhZHZhbmNlX2FnZSc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVBZ2VzID0gbWFzdGVyQWdlTGlzdC5maWx0ZXIoYSA9PiBhLmlzQWN0aXZlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBhY3RpdmVBZ2VzLmZpbmRJbmRleChhZ2UgPT4gYWdlLm5hbWUgPT09IGN1cnJlbnRBZ2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFnZVJlc3VsdCA9IGFjdGl2ZUFnZXNbY3VycmVudEluZGV4ICsgMV0gfHwgeyBuYW1lOiAnQWdlIG9mIExlZ2VuZHMnLCBkZXNjcmlwdGlvbjogJ1lvdXIgY2l2aWxpemF0aW9uIHRyYW5zY2VuZHMgaGlzdG9yeSBhbmQgYmVjb21lcyBhIGxlZ2VuZC4nfTtcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50QWdlKGFnZVJlc3VsdC5uYW1lKTtcbiAgICAgICAgICAgICAgICBhZGRUb0xvZyhgWW91IGhhdmUgYWR2YW5jZWQgdG8gdGhlICR7YWdlUmVzdWx0Lm5hbWV9IWAsICdhZ2UnKTtcbiAgICAgICAgICAgICAgICBhZGRUb0xvZyhhZ2VSZXN1bHQuZGVzY3JpcHRpb24sICdhZ2UnKTtcbiAgICAgICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgV2VsY29tZSB0byB0aGUgJHthZ2VSZXN1bHQubmFtZX0hYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbY3VycmVudEFnZSwgYWRkVG9Mb2csIGJ1aWxkaW5nTGlzdCwgdW5pdExpc3QsIG1hc3RlckFnZUxpc3QsIGJ1aWxkaW5nc10pO1xuICAgIFxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChnYW1lU3RhdGUgIT09IEdhbWVTdGF0dXMuUExBWUlORykge1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkZyYW1lUmVmLmN1cnJlbnQpIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZ2FtZUxvb3AgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgY29uc3QgZGVsdGFUaW1lID0gbm93IC0gbGFzdFRpY2tSZWYuY3VycmVudDtcbiAgICAgICAgICAgIGxhc3RUaWNrUmVmLmN1cnJlbnQgPSBub3c7XG5cbiAgICAgICAgICAgIGxldCBjb21wbGV0ZWRUYXNrczogR2FtZVRhc2tbXSA9IFtdO1xuICAgICAgICAgICAgbGV0IHJlc291cmNlRGVsdGFzVGhpc1RpY2s6IFJlc291cmNlRGVsdGFzID0ge307XG5cbiAgICAgICAgICAgIC8vIC0tLSBQYXNzaXZlIEdlbmVyYXRpb24gYW5kIE1haW50ZW5hbmNlIC0tLVxuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhidWlsZGluZ3MpLmZsYXQoKS5mb3JFYWNoKGluc3RhbmNlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSBtYXN0ZXJCdWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZChrZXkgPT4gYnVpbGRpbmdzW2tleSBhcyBzdHJpbmddLnNvbWUoYkluc3QgPT4gYkluc3QuaWQgPT09IGluc3RhbmNlLmlkKSkpO1xuICAgICAgICAgICAgICAgIGlmICghY29uZmlnKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBQYXNzaXZlIEdlbmVyYXRpb25cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmdlbmVyYXRlc1Jlc291cmNlICYmIGNvbmZpZy5nZW5lcmF0ZXNSZXNvdXJjZSAhPT0gJ25vbmUnICYmIGNvbmZpZy5nZW5lcmF0aW9uUmF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbW91bnRQZXJTZWNvbmQgPSBjb25maWcuZ2VuZXJhdGlvblJhdGUgLyA2MDtcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VEZWx0YXNUaGlzVGlja1tjb25maWcuZ2VuZXJhdGVzUmVzb3VyY2VdID0gKHJlc291cmNlRGVsdGFzVGhpc1RpY2tbY29uZmlnLmdlbmVyYXRlc1Jlc291cmNlXSB8fCAwKSArIChhbW91bnRQZXJTZWNvbmQgLyAxMDAwKSAqIGRlbHRhVGltZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNYWludGVuYW5jZSBDb3N0c1xuICAgICAgICAgICAgICAgIGlmIChjb25maWcubWFpbnRlbmFuY2VDb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGNvbmZpZy5tYWludGVuYW5jZUNvc3QpLmZvckVhY2goKFtyZXMsIGNvc3RdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3N0UGVyU2Vjb25kID0gKGNvc3QgfHwgMCkgLyA2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlRGVsdGFzVGhpc1RpY2tbcmVzIGFzIGtleW9mIFJlc291cmNlc10gPSAocmVzb3VyY2VEZWx0YXNUaGlzVGlja1tyZXMgYXMga2V5b2YgUmVzb3VyY2VzXSB8fCAwKSAtIChjb3N0UGVyU2Vjb25kIC8gMTAwMCkgKiBkZWx0YVRpbWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXRBY3RpdmVCdWZmcyhwcmV2ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSZXNvdXJjZUJvb3N0cyA9IHByZXYucmVzb3VyY2VCb29zdD8uZmlsdGVyKGIgPT4gYi5lbmRUaW1lID4gbm93KTtcbiAgICAgICAgICAgICAgICBpZiAobmV3UmVzb3VyY2VCb29zdHM/Lmxlbmd0aCAhPT0gcHJldi5yZXNvdXJjZUJvb3N0Py5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkVG9Mb2coXCJBIHJlc291cmNlIGdhdGhlcmluZyBib251cyBoYXMgZXhwaXJlZC5cIiwgJ3N5c3RlbScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5wcmV2LCByZXNvdXJjZUJvb3N0OiBuZXdSZXNvdXJjZUJvb3N0cyB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRhc2tzSW5Qcm9ncmVzcyA9IGFjdGl2ZVRhc2tzLm1hcCh0YXNrID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHRhc2suc3RhcnRUaW1lICsgdGFzay5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRUYXNrcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRhc2sudHlwZSA9PT0gJ2dhdGhlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHJlc291cmNlTm9kZXMuZmluZChuID0+IG4uaWQgPT09IHRhc2sucGF5bG9hZD8ucmVzb3VyY2VOb2RlSWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWxsYWdlckNvdW50ID0gdGFzay5wYXlsb2FkPy52aWxsYWdlcklkcz8ubGVuZ3RoIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9kZSB8fCB2aWxsYWdlckNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRUYXNrcy5wdXNoKHRhc2spOyByZXR1cm4gbnVsbDsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZVJhdGVQZXJTZWNvbmQgPSBHQVRIRVJfSU5GT1tub2RlLnR5cGVdLnJhdGU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaXZCb251c011bHRpcGxpZXIgPSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2l2aWxpemF0aW9uPy5ib251cy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG5vZGUudHlwZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBjaXZpbGl6YXRpb24uYm9udXMubWF0Y2goLyhcXGQrKSUvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaD8uWzFdKSBjaXZCb251c011bHRpcGxpZXIgPSAxICsgKHBhcnNlSW50KG1hdGNoWzFdLCAxMCkgLyAxMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1Cb29zdE11bHRpcGxpZXIgPSBhY3RpdmVCdWZmcy5yZXNvdXJjZUJvb3N0Py5maW5kKGIgPT4gYi5yZXNvdXJjZSA9PT0gbm9kZS50eXBlKT8ubXVsdGlwbGllciB8fCAxO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaW5hbFJhdGVQZXJTZWNvbmQgPSBiYXNlUmF0ZVBlclNlY29uZCAqIGNpdkJvbnVzTXVsdGlwbGllciAqIGl0ZW1Cb29zdE11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlRGVsdGFzVGhpc1RpY2tbbm9kZS50eXBlXSA9IChyZXNvdXJjZURlbHRhc1RoaXNUaWNrW25vZGUudHlwZV0gfHwgMCkgKyAoZmluYWxSYXRlUGVyU2Vjb25kIC8gMTAwMCkgKiBkZWx0YVRpbWUgKiB2aWxsYWdlckNvdW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFzaztcbiAgICAgICAgICAgIH0pLmZpbHRlcihCb29sZWFuKSBhcyBHYW1lVGFza1tdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMocmVzb3VyY2VEZWx0YXNUaGlzVGljaykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVJlc291cmNlcyhyZXNvdXJjZURlbHRhc1RoaXNUaWNrKTtcbiAgICAgICAgICAgICAgICBzZXRSZXNvdXJjZU5vZGVzKHByZXZOb2RlcyA9PiBwcmV2Tm9kZXMubWFwKG5vZGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbW91bnRUb0RlY3JlbWVudCA9IHJlc291cmNlRGVsdGFzVGhpc1RpY2tbbm9kZS50eXBlXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbW91bnRUb0RlY3JlbWVudCkgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Ftb3VudCA9IG5vZGUuYW1vdW50IC0gYW1vdW50VG9EZWNyZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdBbW91bnQgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFza0lkID0gYGdhdGhlci0ke25vZGUuaWR9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhc2sgPSB0YXNrc0luUHJvZ3Jlc3MuZmluZCh0ID0+IHQuaWQgPT09IHRhc2tJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0YXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkVG9Mb2coYCR7dGFzay5wYXlsb2FkPy52aWxsYWdlcklkcz8ubGVuZ3RoIHx8IDB9IHZpbGxhZ2VyKHMpIGRlcGxldGVkIGEgJHtub2RlLnR5cGV9IHNvdXJjZSwgZ2FpbmluZyAke01hdGguZmxvb3Iobm9kZS5hbW91bnQpfSAke25vZGUudHlwZX0uYCwgbm9kZS50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgQSAke25vZGUudHlwZX0gc291cmNlIGhhcyBiZWVuIGZ1bGx5IGRlcGxldGVkLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZFRhc2tzLnB1c2godGFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5ub2RlLCBhbW91bnQ6IG5ld0Ftb3VudCB9O1xuICAgICAgICAgICAgICAgIH0pLmZpbHRlcihCb29sZWFuKSBhcyBSZXNvdXJjZU5vZGVbXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbmFsQWN0aXZlVGFza3MgPSB0YXNrc0luUHJvZ3Jlc3MuZmlsdGVyKHQgPT4gIWNvbXBsZXRlZFRhc2tzLnNvbWUoY3QgPT4gY3QuaWQgPT09IHQuaWQpKTtcbiAgICAgICAgICAgIHNldEFjdGl2ZVRhc2tzKGZpbmFsQWN0aXZlVGFza3MpO1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZFRhc2tzLmxlbmd0aCA+IDApIGNvbXBsZXRlZFRhc2tzLmZvckVhY2goaGFuZGxlVGFza0NvbXBsZXRpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZVJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGdhbWVMb29wKTtcbiAgICAgICAgfTtcbiAgICAgICAgYW5pbWF0aW9uRnJhbWVSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShnYW1lTG9vcCk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7IGlmIChhbmltYXRpb25GcmFtZVJlZi5jdXJyZW50KSBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZVJlZi5jdXJyZW50KTsgfTtcbiAgICB9LCBbZ2FtZVN0YXRlLCBhY3RpdmVUYXNrcywgcmVzb3VyY2VOb2RlcywgaGFuZGxlVGFza0NvbXBsZXRpb24sIGFkZFRvTG9nLCB1cGRhdGVSZXNvdXJjZXMsIHVuaXRzLnZpbGxhZ2VycywgY2l2aWxpemF0aW9uLCBhY3RpdmVCdWZmcywgYnVpbGRpbmdzLCBtYXN0ZXJCdWlsZGluZ0xpc3RdKTtcblxuICAgIGNvbnN0IGhhbmRsZU5ld0V2ZW50ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAoIWNpdmlsaXphdGlvbiB8fCBjdXJyZW50RXZlbnQpIHJldHVybjtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBnZXRQcmVkZWZpbmVkR2FtZUV2ZW50KCk7XG4gICAgICAgIHNldEN1cnJlbnRFdmVudChldmVudCk7XG4gICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKCdBIG5ldyBldmVudCByZXF1aXJlcyB5b3VyIGF0dGVudGlvbiEnKTtcbiAgICB9LCBbY2l2aWxpemF0aW9uLCBjdXJyZW50RXZlbnRdKTtcbiAgICBcbiAgICBjb25zdCBzY2hlZHVsZU5leHRFdmVudCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50VGltZXJSZWYuY3VycmVudCkgY2xlYXJUaW1lb3V0KGV2ZW50VGltZXJSZWYuY3VycmVudCk7XG4gICAgICAgIGV2ZW50VGltZXJSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4gaGFuZGxlTmV3RXZlbnQoKSwgKDEwICsgTWF0aC5yYW5kb20oKSAqIDE1KSAqIDEwMDApO1xuICAgIH0sIFtoYW5kbGVOZXdFdmVudF0pO1xuXG4gICAgY29uc3QgZ2VuZXJhdGVSZXNvdXJjZU5vZGVzID0gKGV4aXN0aW5nUG9zaXRpb25zOiBTZXQ8c3RyaW5nPik6IFJlc291cmNlTm9kZVtdID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZXM6IFJlc291cmNlTm9kZVtdID0gW107XG4gICAgICAgIGNvbnN0IHR5cGVzOiBSZXNvdXJjZU5vZGVUeXBlW10gPSBbJ2Zvb2QnLCAnd29vZCcsICdnb2xkJywgJ3N0b25lJ107XG4gICAgICAgIGNvbnN0IG51bU5vZGVzID0gMjAgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTm9kZXM7IGkrKykge1xuICAgICAgICAgICAgbGV0IHBvczoge3g6IG51bWJlciwgeTogbnVtYmVyfTtcbiAgICAgICAgICAgIGRvIHsgcG9zID0geyB4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNQVBfRElNRU5TSU9OUy53aWR0aCksIHk6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BUF9ESU1FTlNJT05TLmhlaWdodCkgfSB9IHdoaWxlIChleGlzdGluZ1Bvc2l0aW9ucy5oYXMoYCR7cG9zLnh9LCR7cG9zLnl9YCkpO1xuICAgICAgICAgICAgZXhpc3RpbmdQb3NpdGlvbnMuYWRkKGAke3Bvcy54fSwke3Bvcy55fWApO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHR5cGVzLmxlbmd0aCldO1xuICAgICAgICAgICAgbm9kZXMucHVzaCh7IGlkOiBgJHtEYXRlLm5vdygpfS1ub2RlLSR7aX1gLCB0eXBlLCBwb3NpdGlvbjogcG9zLCBhbW91bnQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwMDEpICsgNTAwIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlU3RhcnROZXdHYW1lID0gYXN5bmMgKHNhdmVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGFsbFNhdmVzLmluY2x1ZGVzKHNhdmVOYW1lKSkgeyBhZGROb3RpZmljYXRpb24oYEEgc2FnYSBuYW1lZCBcIiR7c2F2ZU5hbWV9XCIgYWxyZWFkeSBleGlzdHMuYCk7IHJldHVybjsgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgY29uZmlncyA9IGF3YWl0IGZldGNoU2F2ZXNBbmRDb25maWdzKCk7XG4gICAgICAgIHNldEdhbWVTdGF0ZShHYW1lU3RhdHVzLkxPQURJTkcpO1xuICAgICAgICBzZXRDdXJyZW50U2F2ZU5hbWUoc2F2ZU5hbWUpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbG9jYWxBZ2VQcm9ncmVzc2lvbkxpc3QgPSBjb25maWdzLmFsbEFnZUNvbmZpZ3MuZmlsdGVyKGEgPT4gYS5pc0FjdGl2ZSk7XG5cbiAgICAgICAgY29uc3QgY2l2ID0gZ2V0UHJlZGVmaW5lZENpdmlsaXphdGlvbigpO1xuICAgICAgICBzZXRDaXZpbGl6YXRpb24oY2l2KTtcbiAgICAgICAgc2V0UmVzb3VyY2VzKHsgZm9vZDogMjAwLCB3b29kOiAxNTAsIGdvbGQ6IDUwLCBzdG9uZTogMTAwIH0pO1xuICAgICAgICBjb25zdCBpbml0aWFsVmlsbGFnZXJzID0gZ2V0UmFuZG9tTmFtZXMoJ3ZpbGxhZ2VyJywgMykubWFwKG5hbWUgPT4gKHsgaWQ6IGAke0RhdGUubm93KCl9LSR7bmFtZX1gLCBuYW1lLCBjdXJyZW50VGFzazogbnVsbCB9KSk7XG4gICAgICAgIHNldFVuaXRzKHsgdmlsbGFnZXJzOiBpbml0aWFsVmlsbGFnZXJzLCBtaWxpdGFyeTogW10gfSk7XG4gICAgICAgIGNvbnN0IHRjUG9zaXRpb24gPSB7IHg6IE1hdGguZmxvb3IoTUFQX0RJTUVOU0lPTlMud2lkdGggLyAyKSwgeTogTWF0aC5mbG9vcihNQVBfRElNRU5TSU9OUy5oZWlnaHQgLyAyKSB9O1xuICAgICAgICBjb25zdCB0Y0luZm8gPSBjb25maWdzLmFsbEJ1aWxkaW5nQ29uZmlncy5maW5kKGIgPT4gYi5pZCA9PT0gJ3Rvd25DZW50ZXInKSE7XG4gICAgICAgIGNvbnN0IGluaXRpYWxUQyA9IHsgaWQ6IGAke0RhdGUubm93KCl9LXRjYCwgbmFtZTogZ2V0UmFuZG9tTmFtZXMoJ2J1aWxkaW5nJywgMSlbMF0sIHBvc2l0aW9uOiB0Y1Bvc2l0aW9uLCBjdXJyZW50SHA6IHRjSW5mby5ocCB9O1xuICAgICAgICBzZXRCdWlsZGluZ3Moey4uLmluaXRpYWxCdWlsZGluZ3NTdGF0ZSwgdG93bkNlbnRlcjogW2luaXRpYWxUQ119KTtcbiAgICAgICAgc2V0UmVzb3VyY2VOb2RlcyhnZW5lcmF0ZVJlc291cmNlTm9kZXMobmV3IFNldChbYCR7dGNQb3NpdGlvbi54fSwke3RjUG9zaXRpb24ueX1gXSkpKTtcbiAgICAgICAgc2V0Q3VycmVudEFnZShsb2NhbEFnZVByb2dyZXNzaW9uTGlzdFswXT8ubmFtZSB8fCBJTklUSUFMX0FHRVNbMF0ubmFtZSk7XG4gICAgICAgIHNldEdhbWVMb2coW10pOyBzZXRDdXJyZW50RXZlbnQobnVsbCk7IHNldFVubGltaXRlZFJlc291cmNlcyhmYWxzZSk7IHNldEFjdGl2ZVRhc2tzKFtdKTsgc2V0SW52ZW50b3J5KFtdKTsgc2V0QWN0aXZlQnVmZnMoeyByZXNvdXJjZUJvb3N0OiBbXSB9KTtcbiAgICAgICAgYWRkVG9Mb2coYCR7Y2l2Lm5hbWV9IGhhcyBiZWVuIGZvdW5kZWQhYCwgJ3N5c3RlbScpO1xuICAgICAgICBhZGRUb0xvZygnWW91ciBzdG9yeSBiZWdpbnMuLi4nLCAnc3lzdGVtJyk7XG4gICAgICAgIHNldEdhbWVTdGF0ZShHYW1lU3RhdHVzLlBMQVlJTkcpO1xuICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cygnWW91ciBzZXR0bGVtZW50IGF3YWl0cyB5b3VyIGNvbW1hbmQuJyk7XG4gICAgfTtcblxuICAgIGNvbnN0IGlzVmlsbGFnZXJCdXN5ID0gdXNlQ2FsbGJhY2soKHZpbGxhZ2VySWQ6IHN0cmluZyk6IGJvb2xlYW4gPT4gISF1bml0cy52aWxsYWdlcnMuZmluZCh2ID0+IHYuaWQgPT09IHZpbGxhZ2VySWQpPy5jdXJyZW50VGFzaywgW3VuaXRzLnZpbGxhZ2Vyc10pO1xuXG4gICAgY29uc3QgZ2V0VmlsbGFnZXJUYXNrRGV0YWlscyA9IHVzZUNhbGxiYWNrKCh2aWxsYWdlcklkOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgICAgICBjb25zdCB2aWxsYWdlciA9IHVuaXRzLnZpbGxhZ2Vycy5maW5kKHYgPT4gdi5pZCA9PT0gdmlsbGFnZXJJZCk7XG4gICAgICAgIGlmICghdmlsbGFnZXI/LmN1cnJlbnRUYXNrKSByZXR1cm4gJ0lkbGUnO1xuICAgICAgICBjb25zdCB0YXNrID0gYWN0aXZlVGFza3MuZmluZCh0ID0+IHQuaWQgPT09IHZpbGxhZ2VyLmN1cnJlbnRUYXNrKTtcbiAgICAgICAgaWYgKCF0YXNrKSByZXR1cm4gJ0lkbGUgKEZpbmFsaXppbmcgVGFzayknO1xuICAgICAgICBpZiAodGFzay50eXBlID09PSAnYnVpbGQnKSByZXR1cm4gYEJ1c3k6IENvbnN0cnVjdGluZyAke2J1aWxkaW5nTGlzdC5maW5kKGIgPT4gYi5pZCA9PT0gdGFzay5wYXlsb2FkIS5idWlsZGluZ1R5cGUpPy5uYW1lIHx8ICdhIGJ1aWxkaW5nJ31gO1xuICAgICAgICBpZiAodGFzay50eXBlID09PSAnZ2F0aGVyJykgcmV0dXJuIGBCdXN5OiBHYXRoZXJpbmcgJHtyZXNvdXJjZU5vZGVzLmZpbmQobiA9PiBuLmlkID09PSB0YXNrLnBheWxvYWQhLnJlc291cmNlTm9kZUlkKT8udHlwZSB8fCAncmVzb3VyY2VzJ31gO1xuICAgICAgICByZXR1cm4gJ0lkbGUnO1xuICAgIH0sIFthY3RpdmVUYXNrcywgcmVzb3VyY2VOb2RlcywgdW5pdHMudmlsbGFnZXJzLCBidWlsZGluZ0xpc3RdKTtcblxuICAgIGNvbnN0IGhhbmRsZVJlc3VtZUdhbWUgPSBhc3luYyAoc2F2ZU5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBjb25maWdzID0gYXdhaXQgZmV0Y2hTYXZlc0FuZENvbmZpZ3MoKTtcbiAgICAgICAgY29uc3Qgc2F2ZWRTdGF0ZSA9IGF3YWl0IGxvYWRHYW1lU3RhdGUoc2F2ZU5hbWUpIGFzIEZ1bGxHYW1lU3RhdGU7XG4gICAgICAgIGlmIChzYXZlZFN0YXRlKSB7XG4gICAgICAgICAgICBzZXRHYW1lU3RhdGUoR2FtZVN0YXR1cy5MT0FESU5HKTtcbiAgICAgICAgICAgIHNldEN1cnJlbnRTYXZlTmFtZShzYXZlTmFtZSk7XG4gICAgICAgICAgICBzZXRDaXZpbGl6YXRpb24oc2F2ZWRTdGF0ZS5jaXZpbGl6YXRpb24pO1xuICAgICAgICAgICAgc2V0UmVzb3VyY2VzKHNhdmVkU3RhdGUucmVzb3VyY2VzKTtcbiAgICAgICAgICAgIGNvbnN0IG1pZ3JhdGVkVmlsbGFnZXJzID0gKHNhdmVkU3RhdGUudW5pdHMudmlsbGFnZXJzIHx8IFtdKS5tYXAodiA9PiAoey4uLnYsIGN1cnJlbnRUYXNrOiB2LmN1cnJlbnRUYXNrICE9PSB1bmRlZmluZWQgPyB2LmN1cnJlbnRUYXNrIDogbnVsbH0pKTtcbiAgICAgICAgICAgIGNvbnN0IG1pZ3JhdGVkVGFza3MgPSAoc2F2ZWRTdGF0ZS5hY3RpdmVUYXNrcyB8fCBbXSkubWFwKHQgPT4gdC50eXBlID09PSAnYnVpbGQnICYmICF0LnBheWxvYWQ/LnZpbGxhZ2VySWRzID8geyAuLi50LCBwYXlsb2FkOiB7IC4uLnQucGF5bG9hZCwgdmlsbGFnZXJJZHM6IFtdIH0gfSA6IHQpO1xuICAgICAgICAgICAgbWlncmF0ZWRUYXNrcy5mb3JFYWNoKHRhc2sgPT4gdGFzay5wYXlsb2FkPy52aWxsYWdlcklkcz8uZm9yRWFjaCh2aWQgPT4geyBjb25zdCB2ID0gbWlncmF0ZWRWaWxsYWdlcnMuZmluZCh2ID0+IHYuaWQgPT09IHZpZCk7IGlmKHYpIHYuY3VycmVudFRhc2sgPSB0YXNrLmlkOyB9KSk7XG4gICAgICAgICAgICBzZXRVbml0cyh7IC4uLnNhdmVkU3RhdGUudW5pdHMsIHZpbGxhZ2VyczogbWlncmF0ZWRWaWxsYWdlcnMgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNvbnN0cnVjdGlvblRhc2tzID0gbWlncmF0ZWRUYXNrcy5maWx0ZXIodCA9PiB0LnR5cGUgPT09ICdidWlsZCcpO1xuICAgICAgICAgICAgY29uc3Qgb2NjdXBpZWRDZWxscyA9IG5ldyBTZXQoWy4uLk9iamVjdC52YWx1ZXMoc2F2ZWRTdGF0ZS5idWlsZGluZ3MgfHwge30pLmZsYXQoKS5tYXAoKGI6IGFueSkgPT4gYCR7Yi5wb3NpdGlvbi54fSwke2IucG9zaXRpb24ueX1gKSwgLi4uY29uc3RydWN0aW9uVGFza3MubWFwKHQgPT4gYCR7dC5wYXlsb2FkIS5wb3NpdGlvbiEueH0sJHt0LnBheWxvYWQhLnBvc2l0aW9uIS55fWApXSk7XG4gICAgICAgICAgICBsZXQgZmluYWxCdWlsZGluZ3MgPSB7IC4uLmluaXRpYWxCdWlsZGluZ3NTdGF0ZSwgLi4uKHNhdmVkU3RhdGUuYnVpbGRpbmdzIHx8IHt9KSB9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoZmluYWxCdWlsZGluZ3MpLmZvckVhY2goYlR5cGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSBjb25maWdzLmFsbEJ1aWxkaW5nQ29uZmlncy5maW5kKGIgPT4gYi5pZCA9PT0gYlR5cGUpO1xuICAgICAgICAgICAgICAgIGlmKGluZm8pIGZpbmFsQnVpbGRpbmdzW2JUeXBlXSA9IGZpbmFsQnVpbGRpbmdzW2JUeXBlXS5tYXAoYiA9PiAoeyAuLi5iLCBjdXJyZW50SHA6IGIuY3VycmVudEhwID09PSB1bmRlZmluZWQgPyBpbmZvLmhwIDogYi5jdXJyZW50SHAgfSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWZpbmFsQnVpbGRpbmdzLnRvd25DZW50ZXIgfHwgZmluYWxCdWlsZGluZ3MudG93bkNlbnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgdGNQb3MgPSB7IHg6IDEwLCB5OiA1IH07IHdoaWxlIChvY2N1cGllZENlbGxzLmhhcyhgJHt0Y1Bvcy54fSwke3RjUG9zLnl9YCkpIHsgdGNQb3MueCsrOyB9XG4gICAgICAgICAgICAgICAgY29uc3QgdGNJbmZvID0gY29uZmlncy5hbGxCdWlsZGluZ0NvbmZpZ3MuZmluZChiID0+IGIuaWQgPT09ICd0b3duQ2VudGVyJykhO1xuICAgICAgICAgICAgICAgIGZpbmFsQnVpbGRpbmdzLnRvd25DZW50ZXIgPSBbeyBpZDogYCR7RGF0ZS5ub3coKX0tdGNgLCBuYW1lOiBnZXRSYW5kb21OYW1lcygnYnVpbGRpbmcnLCAxKVswXSwgcG9zaXRpb246IHRjUG9zLCBjdXJyZW50SHA6IHRjSW5mby5ocCB9XTtcbiAgICAgICAgICAgICAgICBvY2N1cGllZENlbGxzLmFkZChgJHt0Y1Bvcy54fSwke3RjUG9zLnl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRCdWlsZGluZ3MoZmluYWxCdWlsZGluZ3MpO1xuXG4gICAgICAgICAgICBzZXRSZXNvdXJjZU5vZGVzKChzYXZlZFN0YXRlLnJlc291cmNlTm9kZXMgfHwgW10pLmxlbmd0aCA9PT0gMCA/IGdlbmVyYXRlUmVzb3VyY2VOb2RlcyhvY2N1cGllZENlbGxzKSA6IChzYXZlZFN0YXRlLnJlc291cmNlTm9kZXMgfHwgW10pKTtcbiAgICAgICAgICAgIHNldEN1cnJlbnRBZ2Uoc2F2ZWRTdGF0ZS5jdXJyZW50QWdlKTsgc2V0R2FtZUxvZyhzYXZlZFN0YXRlLmdhbWVMb2cpOyBzZXRBY3RpdmVUYXNrcyhtaWdyYXRlZFRhc2tzKTtcbiAgICAgICAgICAgIHNldEludmVudG9yeShzYXZlZFN0YXRlLmludmVudG9yeSB8fCBbXSk7IHNldEFjdGl2ZUJ1ZmZzKHNhdmVkU3RhdGUuYWN0aXZlQnVmZnMgfHwgeyByZXNvdXJjZUJvb3N0OiBbXSB9KTtcbiAgICAgICAgICAgIHNldEN1cnJlbnRFdmVudChudWxsKTsgc2V0QWN0aXZpdHlTdGF0dXMoJ1dlbGNvbWUgYmFjayB0byB5b3VyIHNhZ2EuJyk7XG4gICAgICAgICAgICBzZXRHYW1lU3RhdGUoR2FtZVN0YXR1cy5QTEFZSU5HKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihgQ291bGQgbm90IGZpbmQgYSBzYXZlZCBnYW1lIG5hbWVkIFwiJHtzYXZlTmFtZX1cIi5gKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoZ2FtZVN0YXRlICE9PSBHYW1lU3RhdHVzLlBMQVlJTkcpIHJldHVybjtcbiAgICAgICAgaWYgKCFjdXJyZW50RXZlbnQpIHNjaGVkdWxlTmV4dEV2ZW50KCk7XG4gICAgICAgIGVsc2UgaWYgKGV2ZW50VGltZXJSZWYuY3VycmVudCkgY2xlYXJUaW1lb3V0KGV2ZW50VGltZXJSZWYuY3VycmVudCk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7IGlmIChldmVudFRpbWVyUmVmLmN1cnJlbnQpIGNsZWFyVGltZW91dChldmVudFRpbWVyUmVmLmN1cnJlbnQpOyB9O1xuICAgIH0sIFtnYW1lU3RhdGUsIGN1cnJlbnRFdmVudCwgc2NoZWR1bGVOZXh0RXZlbnRdKTtcblxuICAgIGNvbnN0IGhhbmRsZUV2ZW50Q2hvaWNlID0gKGNob2ljZTogR2FtZUV2ZW50Q2hvaWNlKSA9PiB7XG4gICAgICAgIGlmIChjaG9pY2UuY29zdCkge1xuICAgICAgICAgICAgY29uc3QgbWlzc2luZyA9IChPYmplY3Qua2V5cyhjaG9pY2UuY29zdCkgYXMgKGtleW9mIFJlc291cmNlcylbXSkuZmlsdGVyKHJlcyA9PiByZXNvdXJjZXNbcmVzXSA8IChjaG9pY2UuY29zdCFbcmVzXSB8fCAwKSk7XG4gICAgICAgICAgICBpZiAobWlzc2luZy5sZW5ndGggPiAwKSB7IGFkZE5vdGlmaWNhdGlvbihgWW91IGxhY2sgdGhlIHJlcXVpcmVkIHJlc291cmNlczogJHttaXNzaW5nLmpvaW4oJywgJyl9LmApOyByZXR1cm47IH1cbiAgICAgICAgICAgIHVwZGF0ZVJlc291cmNlcyhPYmplY3QuZW50cmllcyhjaG9pY2UuY29zdCkucmVkdWNlKChhY2MsIFtrLCB2XSkgPT4gKHsuLi5hY2MsIFtrXTogLXZ9KSwge30pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc1N1Y2Nlc3MgPSBjaG9pY2Uuc3VjY2Vzc0NoYW5jZSA9PT0gdW5kZWZpbmVkIHx8IE1hdGgucmFuZG9tKCkgPCBjaG9pY2Uuc3VjY2Vzc0NoYW5jZTtcbiAgICAgICAgY29uc3QgZWZmZWN0cyA9IGlzU3VjY2VzcyA/IGNob2ljZS5zdWNjZXNzRWZmZWN0cyA6IGNob2ljZS5mYWlsdXJlRWZmZWN0cztcbiAgICAgICAgaWYgKCFlZmZlY3RzKSB7IHNldEN1cnJlbnRFdmVudChudWxsKTsgc2NoZWR1bGVOZXh0RXZlbnQoKTsgcmV0dXJuOyB9XG5cbiAgICAgICAgbGV0IGxvZ01lc3NhZ2UgPSBgRGVjaXNpb246IFwiJHtjaG9pY2UudGV4dH1cIi4gT3V0Y29tZTogJHtpc1N1Y2Nlc3MgPyAnU3VjY2VzcycgOiAnRmFpbHVyZSd9LiAke2VmZmVjdHMubG9nfWA7XG4gICAgICAgIGVmZmVjdHMucmV3YXJkcy5mb3JFYWNoKChyZXdhcmQ6IFJld2FyZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJld2FyZC50eXBlID09PSAncmVzb3VyY2UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gQXJyYXkuaXNBcnJheShyZXdhcmQuYW1vdW50KSA/IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChyZXdhcmQuYW1vdW50WzFdIC0gcmV3YXJkLmFtb3VudFswXSArIDEpKSArIHJld2FyZC5hbW91bnRbMF0gOiByZXdhcmQuYW1vdW50O1xuICAgICAgICAgICAgICAgIGlmIChhbW91bnQgIT09IDApIHsgdXBkYXRlUmVzb3VyY2VzKHsgW3Jld2FyZC5yZXNvdXJjZV06IGFtb3VudCB9KTsgbG9nTWVzc2FnZSArPSBgIFlvdSAke2Ftb3VudCA+IDAgPyAnZ2FpbmVkJyA6ICdsb3N0J30gJHtNYXRoLmFicyhhbW91bnQpfSAke3Jld2FyZC5yZXNvdXJjZX0uYDsgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXdhcmQudHlwZSA9PT0gJ2l0ZW0nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUluZm8gPSBHQU1FX0lURU1TW3Jld2FyZC5pdGVtSWRdO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtSW5mbykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdJdGVtcyA9IEFycmF5LmZyb20oe2xlbmd0aDogcmV3YXJkLmFtb3VudH0sIChfLCBpKSA9PiAoeyAuLi5pdGVtSW5mbywgaWQ6IGAke3Jld2FyZC5pdGVtSWR9LSR7RGF0ZS5ub3coKX0tJHtpfWAgfSkpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbnZlbnRvcnkocHJldiA9PiBbLi4ucHJldiwgLi4ubmV3SXRlbXNdKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nTWVzc2FnZSArPSBgIFlvdSByZWNlaXZlZCAke3Jld2FyZC5hbW91bnR9eCAke2l0ZW1JbmZvLm5hbWV9IWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXdhcmQudHlwZSA9PT0gJ3VuaXQnICYmIHJld2FyZC51bml0VHlwZSA9PT0gJ3ZpbGxhZ2VyJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZpbGxhZ2VycyA9IGdldFJhbmRvbU5hbWVzKCd2aWxsYWdlcicsIHJld2FyZC5hbW91bnQpLm1hcChuYW1lID0+ICh7IGlkOiBgJHtEYXRlLm5vdygpfS0ke25hbWV9YCwgbmFtZSwgY3VycmVudFRhc2s6IG51bGwgfSkpO1xuICAgICAgICAgICAgICAgIHNldFVuaXRzKHAgPT4gKHsgLi4ucCwgdmlsbGFnZXJzOiBbLi4ucC52aWxsYWdlcnMsIC4uLm5ld1ZpbGxhZ2Vyc10gfSkpO1xuICAgICAgICAgICAgICAgIGxvZ01lc3NhZ2UgKz0gYCBZb3UgZ2FpbmVkICR7cmV3YXJkLmFtb3VudH0gdmlsbGFnZXIocykuYDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmV3YXJkLnR5cGUgPT09ICdidWlsZGluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBidWlsZGluZ0luZm8gPSBidWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IHJld2FyZC5idWlsZGluZ0lkKTtcbiAgICAgICAgICAgICAgICBpZiAoYnVpbGRpbmdJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9jY3VwaWVkQ2VsbHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhidWlsZGluZ3MpLmZsYXQoKS5mb3JFYWNoKGIgPT4gb2NjdXBpZWRDZWxscy5hZGQoYCR7Yi5wb3NpdGlvbi54fSwke2IucG9zaXRpb24ueX1gKSk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRhc2tzLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ2J1aWxkJykuZm9yRWFjaCh0ID0+IHQucGF5bG9hZD8ucG9zaXRpb24gJiYgb2NjdXBpZWRDZWxscy5hZGQoYCR7dC5wYXlsb2FkLnBvc2l0aW9uLnh9LCR7dC5wYXlsb2FkLnBvc2l0aW9uLnl9YCkpO1xuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU5vZGVzLmZvckVhY2gobiA9PiBvY2N1cGllZENlbGxzLmFkZChgJHtuLnBvc2l0aW9uLnh9LCR7bi5wb3NpdGlvbi55fWApKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCBwbGFjZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNQVBfRElNRU5TSU9OUy53aWR0aCAqIE1BUF9ESU1FTlNJT05TLmhlaWdodDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTUFQX0RJTUVOU0lPTlMud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BUF9ESU1FTlNJT05TLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9jY3VwaWVkQ2VsbHMuaGFzKGAke3h9LCR7eX1gKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtuYW1lXSA9IGdldFJhbmRvbU5hbWVzKCdidWlsZGluZycsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0J1aWxkaW5nOiBCdWlsZGluZ0luc3RhbmNlID0geyBpZDogYHJld2FyZC0ke0RhdGUubm93KCl9YCwgbmFtZSwgcG9zaXRpb246IHt4LHl9LCBjdXJyZW50SHA6IGJ1aWxkaW5nSW5mby5ocCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEJ1aWxkaW5ncyhwID0+ICh7IC4uLnAsIFtyZXdhcmQuYnVpbGRpbmdJZCBhcyBzdHJpbmddOiBbLi4uKHBbcmV3YXJkLmJ1aWxkaW5nSWQgYXMgc3RyaW5nXSB8fCBbXSksIG5ld0J1aWxkaW5nXX0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dNZXNzYWdlICs9IGAgWW91IHdlcmUgZ2lmdGVkIGEgbmV3ICR7YnVpbGRpbmdJbmZvLm5hbWV9IWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYWNlZCkgbG9nTWVzc2FnZSArPSBgIFlvdSB3ZXJlIHRvIGJlIGdpZnRlZCBhICR7YnVpbGRpbmdJbmZvLm5hbWV9LCBidXQgdGhlcmUgd2FzIG5vIHJvb20gdG8gYnVpbGQgaXQhYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgYWRkVG9Mb2cobG9nTWVzc2FnZSwgJ2V2ZW50Jyk7IHNldEFjdGl2aXR5U3RhdHVzKGVmZmVjdHMubG9nKTsgc2V0Q3VycmVudEV2ZW50KG51bGwpOyBzY2hlZHVsZU5leHRFdmVudCgpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVJbml0aWF0ZUJ1aWxkID0gKHZpbGxhZ2VySWQ6IHN0cmluZywgcmVjdDogRE9NUmVjdCkgPT4ge1xuICAgICAgICBpZiAoaXNWaWxsYWdlckJ1c3kodmlsbGFnZXJJZCkpIHsgYWRkTm90aWZpY2F0aW9uKFwiVGhpcyB2aWxsYWdlciBpcyBhbHJlYWR5IGJ1c3kuXCIpOyByZXR1cm47IH1cbiAgICAgICAgc2V0QnVpbGRQYW5lbFN0YXRlKHsgaXNPcGVuOiB0cnVlLCB2aWxsYWdlcklkLCBhbmNob3JSZWN0OiByZWN0IH0pO1xuICAgICAgICBzZXRVbml0TWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IGhhbmRsZVN0YXJ0UGxhY2VtZW50ID0gKGJ1aWxkaW5nSWQ6IEJ1aWxkaW5nVHlwZSB8IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCB2aWxsYWdlcklkID0gYnVpbGRQYW5lbFN0YXRlLnZpbGxhZ2VySWQ7IGlmICghdmlsbGFnZXJJZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBidWlsZGluZ0luZm8gPSBidWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IGJ1aWxkaW5nSWQpOyBpZiAoIWJ1aWxkaW5nSW5mbykgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ291bnQgPSBidWlsZGluZ3NbYnVpbGRpbmdJbmZvLmlkIGFzIHN0cmluZ10/Lmxlbmd0aCB8fCAwO1xuICAgICAgICBjb25zdCBjb25zdHJ1Y3RpbmdDb3VudCA9IGFjdGl2ZVRhc2tzLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ2J1aWxkJyAmJiB0LnBheWxvYWQ/LmJ1aWxkaW5nVHlwZSA9PT0gYnVpbGRpbmdJbmZvLmlkKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHRvdGFsQ291bnQgPSBleGlzdGluZ0NvdW50ICsgY29uc3RydWN0aW5nQ291bnQ7XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gYnVpbGRpbmdJbmZvLmJ1aWxkTGltaXQgfHwgMDtcblxuICAgICAgICBpZiAobGltaXQgPiAwICYmIHRvdGFsQ291bnQgPj0gbGltaXQpIHtcbiAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihgWW91IGhhdmUgcmVhY2hlZCB0aGUgYnVpbGQgbGltaXQgZm9yICR7YnVpbGRpbmdJbmZvLm5hbWV9ICgke2xpbWl0fSkuYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtaXNzaW5nID0gdW5saW1pdGVkUmVzb3VyY2VzID8gW10gOiAoT2JqZWN0LmtleXMoYnVpbGRpbmdJbmZvLmNvc3QpIGFzIChrZXlvZiBSZXNvdXJjZXMpW10pLmZpbHRlcihyZXMgPT4gcmVzb3VyY2VzW3Jlc10gPCAoYnVpbGRpbmdJbmZvLmNvc3RbcmVzXSB8fCAwKSk7XG4gICAgICAgIGlmIChtaXNzaW5nLmxlbmd0aCA+IDApIHsgYWRkTm90aWZpY2F0aW9uKGBOZWVkIG1vcmUgJHttaXNzaW5nLmpvaW4oJywgJyl9LmApOyByZXR1cm47IH1cbiAgICAgICAgXG4gICAgICAgIHNldFBsYXllckFjdGlvbih7IG1vZGU6ICdidWlsZCcsIGJ1aWxkaW5nVHlwZTogYnVpbGRpbmdJZCwgdmlsbGFnZXJJZCB9KTtcbiAgICAgICAgc2V0QnVpbGRQYW5lbFN0YXRlKHsgaXNPcGVuOiBmYWxzZSwgdmlsbGFnZXJJZDogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYFNlbGVjdCBhIGxvY2F0aW9uIHRvIGJ1aWxkIGEgJHtidWlsZGluZ0luZm8ubmFtZX0uIFJpZ2h0LWNsaWNrIHRvIGNhbmNlbC5gKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlQ29uZmlybVBsYWNlbWVudCA9IChwb3NpdGlvbjogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9KSA9PiB7XG4gICAgICAgIGlmIChwbGF5ZXJBY3Rpb24/Lm1vZGUgIT09ICdidWlsZCcpIHJldHVybjtcbiAgICAgICAgY29uc3QgeyBidWlsZGluZ1R5cGUsIHZpbGxhZ2VySWQgfSA9IHBsYXllckFjdGlvbjtcbiAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gYnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSBidWlsZGluZ1R5cGUpO1xuICAgICAgICBjb25zdCBidWlsZGVyID0gdW5pdHMudmlsbGFnZXJzLmZpbmQodiA9PiB2LmlkID09PSB2aWxsYWdlcklkKTtcbiAgICAgICAgaWYgKCFidWlsZGluZ0luZm8gfHwgIWJ1aWxkZXIpIHJldHVybjtcbiAgICAgICAgaWYgKCF1bmxpbWl0ZWRSZXNvdXJjZXMpIHVwZGF0ZVJlc291cmNlcyhPYmplY3QuZW50cmllcyhidWlsZGluZ0luZm8uY29zdCkucmVkdWNlKChhY2MsIFtrLCB2XSkgPT4gKHsuLi5hY2MsIFtrXTogLXZ9KSwge30pKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBidWlsZFRpbWUgPSBidWlsZGluZ0luZm8uYnVpbGRUaW1lICogMTAwMDtcbiAgICAgICAgaWYoYWN0aXZlQnVmZnMuYnVpbGRUaW1lUmVkdWN0aW9uKSB7XG4gICAgICAgICAgICBidWlsZFRpbWUgKj0gKDEgLSBhY3RpdmVCdWZmcy5idWlsZFRpbWVSZWR1Y3Rpb24ucGVyY2VudGFnZSk7XG4gICAgICAgICAgICBhZGRUb0xvZyhgQSBCdWlsZGVyJ3MgQ2hhcm0gcmVkdWNlZCBjb25zdHJ1Y3Rpb24gdGltZSBieSAke2FjdGl2ZUJ1ZmZzLmJ1aWxkVGltZVJlZHVjdGlvbi5wZXJjZW50YWdlICogMTAwfSUhYCwgJ2l0ZW0nKTtcbiAgICAgICAgICAgIHNldEFjdGl2ZUJ1ZmZzKHByZXYgPT4gKHsuLi5wcmV2LCBidWlsZFRpbWVSZWR1Y3Rpb246IHByZXYuYnVpbGRUaW1lUmVkdWN0aW9uIS51c2VzIC0gMSA+IDAgPyB7Li4ucHJldi5idWlsZFRpbWVSZWR1Y3Rpb24hLCB1c2VzOiBwcmV2LmJ1aWxkVGltZVJlZHVjdGlvbiEudXNlcyAtIDF9IDogdW5kZWZpbmVkIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdGFza0lkID0gYCR7RGF0ZS5ub3coKX0tYnVpbGQtJHtidWlsZGluZ1R5cGV9YDtcbiAgICAgICAgY29uc3QgdGFza1BheWxvYWQgPSB7IGJ1aWxkaW5nVHlwZSwgdmlsbGFnZXJJZHM6IFt2aWxsYWdlcklkXSwgcG9zaXRpb24gfTtcbiAgICAgICAgaWYgKHVubGltaXRlZFJlc291cmNlcykge1xuICAgICAgICAgICAgIGhhbmRsZVRhc2tDb21wbGV0aW9uKHsgaWQ6IHRhc2tJZCwgdHlwZTogJ2J1aWxkJywgc3RhcnRUaW1lOiAwLCBkdXJhdGlvbjogMCwgcGF5bG9hZDogeyAuLi50YXNrUGF5bG9hZCwgcG9zaXRpb24gfSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldEFjdGl2ZVRhc2tzKHByZXYgPT4gWy4uLnByZXYsIHsgaWQ6IHRhc2tJZCwgdHlwZTogJ2J1aWxkJywgc3RhcnRUaW1lOiBEYXRlLm5vdygpLCBkdXJhdGlvbjogYnVpbGRUaW1lLCBwYXlsb2FkOiB0YXNrUGF5bG9hZCB9XSk7XG4gICAgICAgICAgICBzZXRVbml0cyhwcmV2ID0+ICh7Li4ucHJldiwgdmlsbGFnZXJzOiBwcmV2LnZpbGxhZ2Vycy5tYXAodiA9PiB2LmlkID09PSB2aWxsYWdlcklkID8gey4uLnYsIGN1cnJlbnRUYXNrOiB0YXNrSWR9IDogdil9KSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgJHtidWlsZGVyLm5hbWV9IGhhcyBzdGFydGVkIGNvbnN0cnVjdGluZyBhICR7YnVpbGRpbmdJbmZvLm5hbWV9LmApO1xuICAgICAgICAgICAgYWRkVG9Mb2coYCR7YnVpbGRlci5uYW1lfSBiZWdhbiBjb25zdHJ1Y3Rpb24gb2YgYSBuZXcgJHtidWlsZGluZ0luZm8ubmFtZX0uYCwgYnVpbGRpbmdJbmZvLmljb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0UGxheWVyQWN0aW9uKG51bGwpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVDYW5jZWxQbGF5ZXJBY3Rpb24gPSAoKSA9PiB7IHNldFBsYXllckFjdGlvbihudWxsKTsgc2V0QWN0aXZpdHlTdGF0dXMoJ0NvbW1hbmQgY2FuY2VsbGVkLicpOyB9O1xuXG4gICAgY29uc3QgaGFuZGxlRGVtb2xpc2hCdWlsZGluZyA9ICh0eXBlOiBCdWlsZGluZ1R5cGUgfCBzdHJpbmcsIGlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICd0b3duQ2VudGVyJykgeyBhZGROb3RpZmljYXRpb24oXCJUaGUgVG93biBDZW50ZXIgaXMgdGhlIGhlYXJ0IG9mIHlvdXIgY2l2aWxpemF0aW9uIGFuZCBjYW5ub3QgYmUgZGVtb2xpc2hlZC5cIik7IHJldHVybjsgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXhwYW5kZWQgY2hlY2sgZm9yIGFjdGl2ZSB0YXNrcyByZWxhdGVkIHRvIHRoaXMgYnVpbGRpbmdcbiAgICAgICAgaWYgKGFjdGl2ZVRhc2tzLnNvbWUodGFzayA9PiBcbiAgICAgICAgICAgICh0YXNrLnBheWxvYWQ/LmJ1aWxkaW5nSWQgPT09IGlkKSB8fCBcbiAgICAgICAgICAgICh0YXNrLnR5cGUgPT09ICd1cGdyYWRlX2J1aWxkaW5nJyAmJiB0YXNrLnBheWxvYWQ/Lm9yaWdpbmFsQnVpbGRpbmdJZCA9PT0gaWQpXG4gICAgICAgICkpIHsgXG4gICAgICAgICAgICBhZGROb3RpZmljYXRpb24oXCJDYW5ub3QgZGVtb2xpc2ggYSBidWlsZGluZyB3aXRoIGFuIGFjdGl2ZSB0YXNrIChlLmcuLCB0cmFpbmluZyBvciB1cGdyYWRpbmcpLlwiKTsgXG4gICAgICAgICAgICByZXR1cm47IFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gYnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB0eXBlKTtcbiAgICAgICAgY29uc3QgYnVpbGRpbmdJbnN0YW5jZSA9IGJ1aWxkaW5nc1t0eXBlIGFzIHN0cmluZ10uZmluZChiID0+IGIuaWQgPT09IGlkKTtcbiAgICAgICAgaWYgKCFidWlsZGluZ0luZm8gfHwgIWJ1aWxkaW5nSW5zdGFuY2UpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNhcGFjaXR5V2l0aG91dFRoaXNCdWlsZGluZyA9IHBvcHVsYXRpb25DYXBhY2l0eSAtIChidWlsZGluZ0luZm8ucG9wdWxhdGlvbkNhcGFjaXR5IHx8IDApO1xuICAgICAgICAvLyBDb3JyZWN0ZWQgcG9wdWxhdGlvbiBjaGVja1xuICAgICAgICBpZiAoKGJ1aWxkaW5nSW5mby5wb3B1bGF0aW9uQ2FwYWNpdHkgfHwgMCkgPiAwICYmIHBvcHVsYXRpb24uY3VycmVudCA+IGNhcGFjaXR5V2l0aG91dFRoaXNCdWlsZGluZykge1xuICAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCBkZW1vbGlzaCB0aGlzIGJ1aWxkaW5nLCB5b3VyIHBlb3BsZSB3b3VsZCBiZSBob21lbGVzcy5cIik7IHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlZnVuZCA9IE9iamVjdC5lbnRyaWVzKGJ1aWxkaW5nSW5mby5jb3N0KS5yZWR1Y2UoKGFjYywgW3JlcywgY29zdF0pID0+IHsgY29uc3QgYW1vdW50ID0gTWF0aC5mbG9vcigoY29zdCB8fCAwKSAqIDAuNSk7IGlmIChhbW91bnQgPiAwKSBhY2NbcmVzIGFzIGtleW9mIFJlc291cmNlc10gPSBhbW91bnQ7IHJldHVybiBhY2M7IH0sIHt9IGFzIFJlc291cmNlRGVsdGFzKTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJlZnVuZCkubGVuZ3RoID4gMCkgeyB1cGRhdGVSZXNvdXJjZXMocmVmdW5kKTsgYWRkTm90aWZpY2F0aW9uKGBTYWx2YWdlZCAke09iamVjdC5lbnRyaWVzKHJlZnVuZCkubWFwKChbcixhXSkgPT4gYCR7YX0gJHtyfWApLmpvaW4oJywgJyl9LmApOyB9XG4gICAgICAgIHNldEJ1aWxkaW5ncyhwcmV2ID0+ICh7IC4uLnByZXYsIFt0eXBlIGFzIHN0cmluZ106IHByZXZbdHlwZSBhcyBzdHJpbmddLmZpbHRlcihiID0+IGIuaWQgIT09IGlkKSB9KSk7XG4gICAgICAgIGFkZFRvTG9nKGAke2J1aWxkaW5nSW5zdGFuY2UubmFtZX0gKCR7YnVpbGRpbmdJbmZvLm5hbWV9KSB3YXMgZGVtb2xpc2hlZC5gLCBidWlsZGluZ0luZm8uaWNvbklkKTtcbiAgICAgICAgc2V0QnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwoe2lzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGluc3RhbmNlSWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVVwZGF0ZUJ1aWxkaW5nID0gKHR5cGU6IEJ1aWxkaW5nVHlwZSB8IHN0cmluZywgaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHNldEJ1aWxkaW5ncyhwcmV2ID0+ICh7IC4uLnByZXYsIFt0eXBlIGFzIHN0cmluZ106IHByZXZbdHlwZSBhcyBzdHJpbmddLm1hcChiID0+IGIuaWQgPT09IGlkID8geyAuLi5iLCBuYW1lIH0gOiBiKSB9KSk7XG4gICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIkJ1aWxkaW5nIHJlbmFtZWQuXCIpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVVcGdyYWRlQnVpbGRpbmcgPSAoYnVpbGRpbmc6IEJ1aWxkaW5nSW5zdGFuY2UsIHVwZ3JhZGVQYXRoOiBCdWlsZGluZ1VwZ3JhZGVQYXRoKSA9PiB7XG4gICAgICAgIGlmICghdW5saW1pdGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nID0gKE9iamVjdC5rZXlzKHVwZ3JhZGVQYXRoLmNvc3QpIGFzIChrZXlvZiBSZXNvdXJjZXMpW10pLmZpbHRlcihyZXMgPT4gcmVzb3VyY2VzW3Jlc10gPCAodXBncmFkZVBhdGguY29zdFtyZXNdIHx8IDApKTtcbiAgICAgICAgICAgIGlmIChtaXNzaW5nLmxlbmd0aCA+IDApIHsgYWRkTm90aWZpY2F0aW9uKGBOZWVkIG1vcmUgJHttaXNzaW5nLmpvaW4oJywgJyl9LmApOyByZXR1cm47IH1cbiAgICAgICAgICAgIHVwZGF0ZVJlc291cmNlcyhPYmplY3QuZW50cmllcyh1cGdyYWRlUGF0aC5jb3N0KS5yZWR1Y2UoKGFjYywgW2ssIHZdKSA9PiAoeyAuLi5hY2MsIFtrXTogLSh2IHx8IDApIH0pLCB7fSkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBvcmlnaW5hbEJ1aWxkaW5nVHlwZSA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZCh0eXBlID0+IGJ1aWxkaW5nc1t0eXBlIGFzIHN0cmluZ10uc29tZShiID0+IGIuaWQgPT09IGJ1aWxkaW5nLmlkKSk7XG4gICAgICAgIGNvbnN0IHRhc2tQYXlsb2FkID0ge1xuICAgICAgICAgICAgb3JpZ2luYWxCdWlsZGluZ0lkOiBidWlsZGluZy5pZCxcbiAgICAgICAgICAgIG9yaWdpbmFsQnVpbGRpbmdUeXBlLFxuICAgICAgICAgICAgdGFyZ2V0QnVpbGRpbmdUeXBlOiB1cGdyYWRlUGF0aC5pZCxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodW5saW1pdGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBoYW5kbGVUYXNrQ29tcGxldGlvbih7IGlkOiAnaW5zdGFudCcsIHR5cGU6ICd1cGdyYWRlX2J1aWxkaW5nJywgc3RhcnRUaW1lOiAwLCBkdXJhdGlvbjogMCwgcGF5bG9hZDogdGFza1BheWxvYWQgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IFsuLi5wcmV2LCB7IGlkOiBgJHtEYXRlLm5vdygpfS11cGdyYWRlLSR7YnVpbGRpbmcuaWR9YCwgdHlwZTogJ3VwZ3JhZGVfYnVpbGRpbmcnLCBzdGFydFRpbWU6IERhdGUubm93KCksIGR1cmF0aW9uOiB1cGdyYWRlUGF0aC50aW1lICogMTAwMCwgcGF5bG9hZDogdGFza1BheWxvYWQgfV0pO1xuICAgICAgICAgICAgYWRkVG9Mb2coYFVwZ3JhZGluZyAke2J1aWxkaW5nLm5hbWV9IHRvIGEgJHtidWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IHVwZ3JhZGVQYXRoLmlkKT8ubmFtZX0uYCwgJ3N5c3RlbScpO1xuICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYFVwZ3JhZGluZyAke2J1aWxkaW5nLm5hbWV9Li4uYCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0QnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwoeyBpc09wZW46IGZhbHNlLCB0eXBlOiBudWxsLCBpbnN0YW5jZUlkOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVUcmFpblZpbGxhZ2VycyA9IChjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChhY3RpdmVUYXNrcy5zb21lKHQgPT4gdC50eXBlID09PSAndHJhaW5fdmlsbGFnZXInKSB8fCBjb3VudCA8PSAwKSByZXR1cm47XG4gICAgICAgIGlmIChwb3B1bGF0aW9uLmN1cnJlbnQgKyBjb3VudCA+IHBvcHVsYXRpb24uY2FwYWNpdHkpIHsgYWRkTm90aWZpY2F0aW9uKGBOZWVkIHNwYWNlIGZvciAke2NvdW50fSBtb3JlIHZpbGxhZ2Vycy5gKTsgcmV0dXJuOyB9XG4gICAgICAgIGlmICghYnVpbGRpbmdzLnRvd25DZW50ZXI/LlswXSkgeyBhZGROb3RpZmljYXRpb24oYE5vIFRvd24gQ2VudGVyIHRvIHRyYWluIHZpbGxhZ2Vycy5gKTsgcmV0dXJuOyB9XG4gICAgICAgIGlmICghdW5saW1pdGVkUmVzb3VyY2VzKSB7IGNvbnN0IHRvdGFsQ29zdCA9IDUwICogY291bnQ7IGlmIChyZXNvdXJjZXMuZm9vZCA8IHRvdGFsQ29zdCkgeyBhZGROb3RpZmljYXRpb24oYE5lZWQgJHt0b3RhbENvc3QgLSByZXNvdXJjZXMuZm9vZH0gbW9yZSBGb29kLmApOyByZXR1cm47IH0gdXBkYXRlUmVzb3VyY2VzKHsgZm9vZDogLXRvdGFsQ29zdCB9KTsgfVxuICAgICAgICBcbiAgICAgICAgaWYodW5saW1pdGVkUmVzb3VyY2VzKSBoYW5kbGVUYXNrQ29tcGxldGlvbih7IGlkOiAnaW5zdGFudCcsIHR5cGU6ICd0cmFpbl92aWxsYWdlcicsIHN0YXJ0VGltZTogMCwgZHVyYXRpb246IDAsIHBheWxvYWQ6IHsgY291bnQgfSB9KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IFsuLi5wcmV2LCB7IGlkOiBgJHtEYXRlLm5vdygpfS10cmFpbi12aWxsYWdlcmAsIHR5cGU6ICd0cmFpbl92aWxsYWdlcicsIHN0YXJ0VGltZTogRGF0ZS5ub3coKSwgZHVyYXRpb246IDEwMDAwICogY291bnQsIHBheWxvYWQ6IHsgY291bnQsIGJ1aWxkaW5nSWQ6IGJ1aWxkaW5ncy50b3duQ2VudGVyIVswXS5pZCB9IH1dKTtcbiAgICAgICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGBUcmFpbmluZyAke2NvdW50fSB2aWxsYWdlcihzKS4uLmApOyBhZGRUb0xvZyhgQmVnYW4gdHJhaW5pbmcgJHtjb3VudH0gbmV3IHZpbGxhZ2VyKHMpLmAsICd2aWxsYWdlcicpO1xuICAgICAgICB9XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgaW5zdGFuY2VJZDogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IGhhbmRsZVRyYWluVW5pdHMgPSAodW5pdFR5cGU6IE1pbGl0YXJ5VW5pdFR5cGUsIGNvdW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgdW5pdEluZm8gPSB1bml0TGlzdC5maW5kKHUgPT4gdS5pZCA9PT0gdW5pdFR5cGUpO1xuICAgICAgICBpZiAoIXVuaXRJbmZvIHx8IGFjdGl2ZVRhc2tzLnNvbWUodCA9PiB0LnBheWxvYWQ/LnVuaXRUeXBlID09PSB1bml0VHlwZSkgfHwgY291bnQgPD0gMCkgcmV0dXJuO1xuICAgICAgICBpZiAocG9wdWxhdGlvbi5jdXJyZW50ICsgY291bnQgPiBwb3B1bGF0aW9uLmNhcGFjaXR5KSB7IGFkZE5vdGlmaWNhdGlvbihgTmVlZCBzcGFjZSBmb3IgJHtjb3VudH0gbW9yZSB1bml0cy5gKTsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IHRyYWluaW5nQnVpbGRpbmcgPSBidWlsZGluZ3NbdW5pdEluZm8ucmVxdWlyZWRCdWlsZGluZyBhcyBCdWlsZGluZ1R5cGVdPy5bMF07XG4gICAgICAgIGlmICghdHJhaW5pbmdCdWlsZGluZykgeyBhZGROb3RpZmljYXRpb24oYE5vICR7YnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB1bml0SW5mby5yZXF1aXJlZEJ1aWxkaW5nKT8ubmFtZX0gdG8gdHJhaW4gdW5pdHMuYCk7IHJldHVybjsgfVxuXG4gICAgICAgIGlmICghdW5saW1pdGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nID0gKE9iamVjdC5rZXlzKHVuaXRJbmZvLmNvc3QpIGFzIChrZXlvZiBSZXNvdXJjZXMpW10pLmZpbHRlcihyZXMgPT4gcmVzb3VyY2VzW3Jlc10gPCAodW5pdEluZm8uY29zdFtyZXNdIHx8IDApICogY291bnQpO1xuICAgICAgICAgICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkgeyBhZGROb3RpZmljYXRpb24oYE5lZWQgbW9yZSAke21pc3Npbmcuam9pbignIGFuZCAnKX0uYCk7IHJldHVybjsgfVxuICAgICAgICAgICAgdXBkYXRlUmVzb3VyY2VzKE9iamVjdC5lbnRyaWVzKHVuaXRJbmZvLmNvc3QpLnJlZHVjZSgoYWNjLCBbaywgdl0pID0+ICh7Li4uYWNjLCBba106IC0odiB8fCAwKSAqIGNvdW50fSksIHt9KSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCB0cmFpblRpbWUgPSB1bml0SW5mby50cmFpblRpbWUgKiAxMDAwICogY291bnQ7XG4gICAgICAgIGlmKGFjdGl2ZUJ1ZmZzLnBlcm1hbmVudFRyYWluVGltZVJlZHVjdGlvbikgdHJhaW5UaW1lICo9ICgxIC0gYWN0aXZlQnVmZnMucGVybWFuZW50VHJhaW5UaW1lUmVkdWN0aW9uKTtcbiAgICAgICAgaWYgKGFjdGl2ZUJ1ZmZzLnRyYWluVGltZVJlZHVjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgYXBwbGljYWJsZSA9IE1hdGgubWluKGNvdW50LCBhY3RpdmVCdWZmcy50cmFpblRpbWVSZWR1Y3Rpb24udXNlcyk7XG4gICAgICAgICAgICB0cmFpblRpbWUgPSAodW5pdEluZm8udHJhaW5UaW1lICogMTAwMCAqIGFwcGxpY2FibGUgKiAoMSAtIGFjdGl2ZUJ1ZmZzLnRyYWluVGltZVJlZHVjdGlvbi5wZXJjZW50YWdlKSkgKyAodW5pdEluZm8udHJhaW5UaW1lICogMTAwMCAqIChjb3VudCAtIGFwcGxpY2FibGUpKTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVCdWZmcy50cmFpblRpbWVSZWR1Y3Rpb24udXNlcyAtIGFwcGxpY2FibGUgPiAwKSBzZXRBY3RpdmVCdWZmcyhwcmV2ID0+ICh7Li4ucHJldiwgdHJhaW5UaW1lUmVkdWN0aW9uOiB7Li4ucHJldi50cmFpblRpbWVSZWR1Y3Rpb24hLCB1c2VzOiBwcmV2LnRyYWluVGltZVJlZHVjdGlvbiEudXNlcyAtIGFwcGxpY2FibGV9fSkpO1xuICAgICAgICAgICAgZWxzZSB7IHNldEFjdGl2ZUJ1ZmZzKHByZXYgPT4gKHsuLi5wcmV2LCB0cmFpblRpbWVSZWR1Y3Rpb246IHVuZGVmaW5lZH0pKTsgYWRkVG9Mb2coXCJUaGUgRHJpbGxtYXN0ZXIncyBXaGlzdGxlIGJ1ZmYgaGFzIGJlZW4gZnVsbHkgdXNlZC5cIiwgJ2l0ZW0nKTsgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZih1bmxpbWl0ZWRSZXNvdXJjZXMpIGhhbmRsZVRhc2tDb21wbGV0aW9uKHsgaWQ6ICdpbnN0YW50JywgdHlwZTogJ3RyYWluX21pbGl0YXJ5Jywgc3RhcnRUaW1lOiAwLCBkdXJhdGlvbjogMCwgcGF5bG9hZDogeyB1bml0VHlwZSwgY291bnQgfSB9KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IFsuLi5wcmV2LCB7IGlkOiBgJHtEYXRlLm5vdygpfS10cmFpbi0ke3VuaXRUeXBlfWAsIHR5cGU6ICd0cmFpbl9taWxpdGFyeScsIHN0YXJ0VGltZTogRGF0ZS5ub3coKSwgZHVyYXRpb246IHRyYWluVGltZSwgcGF5bG9hZDogeyB1bml0VHlwZSwgY291bnQsIGJ1aWxkaW5nSWQ6IHRyYWluaW5nQnVpbGRpbmcuaWQgfSB9XSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgVHJhaW5pbmcgJHtjb3VudH0gJHt1bml0SW5mby5uYW1lfShzKS4uLmApOyBhZGRUb0xvZyhgQmVnYW4gdHJhaW5pbmcgJHtjb3VudH0gbmV3ICR7dW5pdEluZm8ubmFtZX0ocykuYCwgdW5pdFR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgaW5zdGFuY2VJZDogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRGlzbWlzc1NwZWNpZmljVW5pdCA9ICh0eXBlOiAndmlsbGFnZXJzJyB8ICdtaWxpdGFyeScsIGlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICd2aWxsYWdlcnMnICYmIGlzVmlsbGFnZXJCdXN5KGlkKSkgeyBhZGROb3RpZmljYXRpb24oXCJDYW5ub3QgZGlzbWlzcyBhIGJ1c3kgdmlsbGFnZXIuXCIpOyByZXR1cm47IH1cbiAgICAgICAgY29uc3QgdW5pdCA9IHVuaXRzW3R5cGVdLmZpbmQodSA9PiB1LmlkID09PSBpZCk7IGlmICghdW5pdCkgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3ZpbGxhZ2VycycgJiYgdW5pdHMudmlsbGFnZXJzLmxlbmd0aCA8PSAxKSB7IGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCBkaXNtaXNzIHlvdXIgbGFzdCB2aWxsYWdlci5cIik7IHJldHVybjsgfVxuICAgICAgICBzZXRVbml0cyhwcmV2ID0+ICh7IC4uLnByZXYsIFt0eXBlXTogcHJldlt0eXBlXS5maWx0ZXIodSA9PiB1LmlkICE9PSBpZCkgfSkpO1xuICAgICAgICBjb25zdCB1bml0VHlwZU5hbWUgPSB0eXBlID09PSAndmlsbGFnZXJzJyA/ICd2aWxsYWdlcicgOiAodW5pdCBhcyBNaWxpdGFyeVVuaXQpLnVuaXRUeXBlO1xuICAgICAgICBhZGRUb0xvZyhgJHt1bml0Lm5hbWV9IHRoZSAke3VuaXRUeXBlTmFtZX0gaGFzIGJlZW4gZGlzbWlzc2VkLmAsIHR5cGUgPT09ICd2aWxsYWdlcnMnID8gJ3ZpbGxhZ2VyJyA6ICh1bml0IGFzIE1pbGl0YXJ5VW5pdCkudW5pdFR5cGUpO1xuICAgICAgICBhZGROb3RpZmljYXRpb24oYCR7dW5pdC5uYW1lfSB3YXMgZGlzbWlzc2VkLmApO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVVcGRhdGVVbml0ID0gKHR5cGU6ICd2aWxsYWdlcnMnIHwgJ21pbGl0YXJ5JywgaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZykgPT4ge1xuICAgICAgICAgc2V0VW5pdHMocHJldiA9PiAoeyAuLi5wcmV2LCBbdHlwZV06IHByZXZbdHlwZV0ubWFwKHUgPT4gdS5pZCA9PT0gaWQgPyAodHlwZSA9PT0gJ21pbGl0YXJ5JyAmJiB0aXRsZSAhPT0gdW5kZWZpbmVkID8geyAuLi51LCBuYW1lLCB0aXRsZSB9IDogeyAuLi51LCBuYW1lIH0pIDogdSl9KSk7XG4gICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIlVuaXQgdXBkYXRlZC5cIik7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUFzc2lnblZpbGxhZ2Vyc1RvQ29uc3RydWN0aW9uID0gKGNvbnN0cnVjdGlvbklkOiBzdHJpbmcsIGNvdW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgaWRsZVZpbGxhZ2VycyA9IHVuaXRzLnZpbGxhZ2Vycy5maWx0ZXIodiA9PiAhdi5jdXJyZW50VGFzayk7XG4gICAgICAgIGlmIChjb3VudCA8PSAwIHx8IGlkbGVWaWxsYWdlcnMubGVuZ3RoID09PSAwKSB7IGFkZE5vdGlmaWNhdGlvbihcIk5vIGlkbGUgdmlsbGFnZXJzIGF2YWlsYWJsZS5cIik7IHJldHVybjsgfVxuICAgICAgICBjb25zdCB0YXNrID0gYWN0aXZlVGFza3MuZmluZCh0ID0+IHQuaWQgPT09IGNvbnN0cnVjdGlvbklkKTsgaWYgKCF0YXNrIHx8IHRhc2sudHlwZSAhPT0gJ2J1aWxkJykgcmV0dXJuO1xuICAgICAgICBjb25zdCBidWlsZGluZ0luZm8gPSBidWlsZGluZ0xpc3QuZmluZChiID0+IGIuaWQgPT09IHRhc2sucGF5bG9hZD8uYnVpbGRpbmdUeXBlKTsgaWYgKCFidWlsZGluZ0luZm8pIHJldHVybjtcblxuICAgICAgICBjb25zdCBjYXBwZWRDb3VudCA9IE1hdGgubWluKGNvdW50LCBpZGxlVmlsbGFnZXJzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHZpbGxhZ2Vyc1RvQXNzaWduID0gaWRsZVZpbGxhZ2Vycy5zbGljZSgwLCBjYXBwZWRDb3VudCkubWFwKHYgPT4gdi5pZCk7XG4gICAgICAgIGNvbnN0IHdvcmtEb25lID0gKERhdGUubm93KCkgLSB0YXNrLnN0YXJ0VGltZSkgKiAodGFzay5wYXlsb2FkPy52aWxsYWdlcklkcz8ubGVuZ3RoIHx8IDEpO1xuICAgICAgICBjb25zdCB3b3JrUmVtYWluaW5nID0gTWF0aC5tYXgoMCwgKGJ1aWxkaW5nSW5mby5idWlsZFRpbWUgKiAxMDAwKSAtIHdvcmtEb25lKTtcbiAgICAgICAgY29uc3QgbmV3V29ya2VyQ291bnQgPSAodGFzay5wYXlsb2FkPy52aWxsYWdlcklkcz8ubGVuZ3RoIHx8IDApICsgY2FwcGVkQ291bnQ7XG4gICAgICAgIGNvbnN0IG5ld1JlbWFpbmluZ0R1cmF0aW9uID0gd29ya1JlbWFpbmluZyAvIG5ld1dvcmtlckNvdW50O1xuICAgICAgICBcbiAgICAgICAgc2V0VW5pdHMocHJldiA9PiAoey4uLnByZXYsIHZpbGxhZ2VyczogcHJldi52aWxsYWdlcnMubWFwKHYgPT4gdmlsbGFnZXJzVG9Bc3NpZ24uaW5jbHVkZXModi5pZCkgPyB7Li4udiwgY3VycmVudFRhc2s6IGNvbnN0cnVjdGlvbklkfSA6IHYpfSkpO1xuICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IHByZXYubWFwKHQgPT4gdC5pZCA9PT0gY29uc3RydWN0aW9uSWQgPyB7IC4uLnQsIHN0YXJ0VGltZTogRGF0ZS5ub3coKSwgZHVyYXRpb246IG5ld1JlbWFpbmluZ0R1cmF0aW9uLCBwYXlsb2FkOiB7IC4uLnQucGF5bG9hZCwgdmlsbGFnZXJJZHM6IFsuLi50LnBheWxvYWQhLnZpbGxhZ2VySWRzISwgLi4udmlsbGFnZXJzVG9Bc3NpZ25dIH0gfSA6IHQpKTtcbiAgICAgICAgYWRkVG9Mb2coYCR7Y2FwcGVkQ291bnR9IHZpbGxhZ2VyKHMpIGFyZSBub3cgYXNzaXN0aW5nIHdpdGggdGhlICR7YnVpbGRpbmdJbmZvLm5hbWV9LmAsIGJ1aWxkaW5nSW5mby5pY29uSWQpO1xuICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgQ29uc3RydWN0aW9uIG9mIHRoZSAke2J1aWxkaW5nSW5mby5uYW1lfSBpcyBub3cgZmFzdGVyLmApO1xuICAgICAgICBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHRhcmdldElkOiBudWxsLCB0YXJnZXRUeXBlOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVBc3NpZ25WaWxsYWdlcnMgPSAodGFyZ2V0SWQ6IHN0cmluZywgY291bnQ6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAoYXNzaWdubWVudFBhbmVsU3RhdGUudGFyZ2V0VHlwZSA9PT0gJ2NvbnN0cnVjdGlvbicpIHJldHVybiBoYW5kbGVBc3NpZ25WaWxsYWdlcnNUb0NvbnN0cnVjdGlvbih0YXJnZXRJZCwgY291bnQpO1xuICAgICAgICBjb25zdCBpZGxlVmlsbGFnZXJzID0gdW5pdHMudmlsbGFnZXJzLmZpbHRlcih2ID0+ICF2LmN1cnJlbnRUYXNrKTtcbiAgICAgICAgaWYgKGNvdW50IDw9IDAgfHwgaWRsZVZpbGxhZ2Vycy5sZW5ndGggPT09IDApIHsgYWRkTm90aWZpY2F0aW9uKFwiTm8gaWRsZSB2aWxsYWdlcnMgYXZhaWxhYmxlLlwiKTsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSByZXNvdXJjZU5vZGVzLmZpbmQobiA9PiBuLmlkID09PSB0YXJnZXRJZCk7IGlmICghdGFyZ2V0Tm9kZSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBjYXBwZWRDb3VudCA9IE1hdGgubWluKGNvdW50LCBpZGxlVmlsbGFnZXJzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHZpbGxhZ2Vyc1RvQXNzaWduID0gaWRsZVZpbGxhZ2Vycy5zbGljZSgwLCBjYXBwZWRDb3VudCkubWFwKHYgPT4gdi5pZCk7XG4gICAgICAgIGNvbnN0IHRhc2tJZCA9IGBnYXRoZXItJHt0YXJnZXRJZH1gO1xuICAgICAgICBjb25zdCBleGlzdGluZ1Rhc2sgPSBhY3RpdmVUYXNrcy5maW5kKHQgPT4gdC5pZCA9PT0gdGFza0lkKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh1bmxpbWl0ZWRSZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIHVwZGF0ZVJlc291cmNlcyh7IFt0YXJnZXROb2RlLnR5cGVdOiB0YXJnZXROb2RlLmFtb3VudCB9KTtcbiAgICAgICAgICAgIGFkZFRvTG9nKGAke2NhcHBlZENvdW50fSB2aWxsYWdlcihzKSBpbnN0YW50bHkgZ2F0aGVyZWQgJHtNYXRoLmZsb29yKHRhcmdldE5vZGUuYW1vdW50KX0gJHt0YXJnZXROb2RlLnR5cGV9LmAsIHRhcmdldE5vZGUudHlwZSk7XG4gICAgICAgICAgICBzZXRSZXNvdXJjZU5vZGVzKHByZXYgPT4gcHJldi5maWx0ZXIobiA9PiBuLmlkICE9PSB0YXJnZXRJZCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nVGFzaykgc2V0QWN0aXZlVGFza3MocHJldiA9PiBwcmV2Lm1hcCh0ID0+IHQuaWQgPT09IHRhc2tJZCA/IHsgLi4udCwgcGF5bG9hZDogeyAuLi50LnBheWxvYWQsIHZpbGxhZ2VySWRzOiBbLi4ubmV3IFNldChbLi4udC5wYXlsb2FkIS52aWxsYWdlcklkcyEsIC4uLnZpbGxhZ2Vyc1RvQXNzaWduXSldIH0gfSA6IHQpKTtcbiAgICAgICAgICAgIGVsc2Ugc2V0QWN0aXZlVGFza3MocHJldiA9PiBbLi4ucHJldiwgeyBpZDogdGFza0lkLCB0eXBlOiAnZ2F0aGVyJywgc3RhcnRUaW1lOiBEYXRlLm5vdygpLCBkdXJhdGlvbjogOTk5OTk5OTk5LCBwYXlsb2FkOiB7IHJlc291cmNlTm9kZUlkOiB0YXJnZXRJZCwgdmlsbGFnZXJJZHM6IHZpbGxhZ2Vyc1RvQXNzaWduIH0gfV0pO1xuICAgICAgICAgICAgc2V0VW5pdHMocHJldiA9PiAoey4uLnByZXYsIHZpbGxhZ2VyczogcHJldi52aWxsYWdlcnMubWFwKHYgPT4gdmlsbGFnZXJzVG9Bc3NpZ24uaW5jbHVkZXModi5pZCkgPyB7Li4udiwgY3VycmVudFRhc2s6IHRhc2tJZH0gOiB2KX0pKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRUb0xvZyhgJHtjYXBwZWRDb3VudH0gdmlsbGFnZXIocykgYXNzaWduZWQgdG8gZ2F0aGVyICR7dGFyZ2V0Tm9kZS50eXBlfS5gLCB0YXJnZXROb2RlLnR5cGUpO1xuICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgJHtjYXBwZWRDb3VudH0gdmlsbGFnZXIocykgYXJlIG5vdyBnYXRoZXJpbmcgJHt0YXJnZXROb2RlLnR5cGV9LmApO1xuICAgICAgICBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHRhcmdldElkOiBudWxsLCB0YXJnZXRUeXBlOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVSZWNhbGxWaWxsYWdlcnMgPSAodGFyZ2V0SWQ6IHN0cmluZywgY291bnQ6IG51bWJlciwgdHlwZTogJ3Jlc291cmNlJyB8ICdjb25zdHJ1Y3Rpb24nKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBhY3RpdmVUYXNrcy5maW5kKHQgPT4gdC5pZCA9PT0gdGFyZ2V0SWQpO1xuICAgICAgICBpZiAoIXRhc2sgfHwgKHRhc2sucGF5bG9hZD8udmlsbGFnZXJJZHM/Lmxlbmd0aCA/PyAwKSA8IGNvdW50KSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICBjb25zdCB2aWxsYWdlcnNUb1JlY2FsbCA9IHRhc2sucGF5bG9hZCEudmlsbGFnZXJJZHMhLnNsaWNlKHRhc2sucGF5bG9hZCEudmlsbGFnZXJJZHMhLmxlbmd0aCAtIGNvdW50KTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb25zdHJ1Y3Rpb24nICYmIHZpbGxhZ2Vyc1RvUmVjYWxsLmxlbmd0aCA9PT0gdGFzay5wYXlsb2FkIS52aWxsYWdlcklkcyEubGVuZ3RoKSB7IGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCByZWNhbGwgdGhlIGxhc3QgYnVpbGRlciBmcm9tIGEgcHJvamVjdC5cIik7IHJldHVybjsgfVxuXG4gICAgICAgIHNldFVuaXRzKHByZXYgPT4gKHsuLi5wcmV2LCB2aWxsYWdlcnM6IHByZXYudmlsbGFnZXJzLm1hcCh2ID0+IHZpbGxhZ2Vyc1RvUmVjYWxsLmluY2x1ZGVzKHYuaWQpID8gey4uLnYsIGN1cnJlbnRUYXNrOiBudWxsfSA6IHYpfSkpO1xuICAgICAgICBjb25zdCByZW1haW5pbmdWaWxsYWdlcnMgPSB0YXNrLnBheWxvYWQhLnZpbGxhZ2VySWRzIS5maWx0ZXIoaWQgPT4gIXZpbGxhZ2Vyc1RvUmVjYWxsLmluY2x1ZGVzKGlkKSk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVtYWluaW5nVmlsbGFnZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocHJldiA9PiBwcmV2LmZpbHRlcih0ID0+IHQuaWQgIT09IHRhcmdldElkKSk7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gcmVzb3VyY2VOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gdGFyZ2V0SWQpO1xuICAgICAgICAgICAgaWYobm9kZSkgYWRkVG9Mb2coYEFsbCB2aWxsYWdlcnMgcmVjYWxsZWQgZnJvbSBnYXRoZXJpbmcgJHtub2RlLnR5cGV9LmAsICd2aWxsYWdlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gYnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB0YXNrLnBheWxvYWQ/LmJ1aWxkaW5nVHlwZSkhO1xuICAgICAgICAgICAgY29uc3Qgd29ya0RvbmUgPSAoRGF0ZS5ub3coKSAtIHRhc2suc3RhcnRUaW1lKSAqIHRhc2sucGF5bG9hZCEudmlsbGFnZXJJZHMhLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG5ld1JlbWFpbmluZ0R1cmF0aW9uID0gKGJ1aWxkaW5nSW5mby5idWlsZFRpbWUgKiAxMDAwIC0gd29ya0RvbmUpIC8gcmVtYWluaW5nVmlsbGFnZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHNldEFjdGl2ZVRhc2tzKHByZXYgPT4gcHJldi5tYXAodCA9PiB0LmlkID09PSB0YXJnZXRJZCA/IHsgLi4udCwgc3RhcnRUaW1lOiBEYXRlLm5vdygpLCBkdXJhdGlvbjogbmV3UmVtYWluaW5nRHVyYXRpb24sIHBheWxvYWQ6IHsgLi4udC5wYXlsb2FkLCB2aWxsYWdlcklkczogcmVtYWluaW5nVmlsbGFnZXJzIH0gfSA6IHQpKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnY29uc3RydWN0aW9uJykgYWRkVG9Mb2coYCR7Y291bnR9IGJ1aWxkZXIocykgcmVjYWxsZWQuIENvbnN0cnVjdGlvbiB3aWxsIG5vdyBiZSBzbG93ZXIuYCwgJ3ZpbGxhZ2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0QXNzaWdubWVudFBhbmVsU3RhdGUoeyBpc09wZW46IGZhbHNlLCB0YXJnZXRJZDogbnVsbCwgdGFyZ2V0VHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlQWR2YW5jZUFnZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZVRhc2tzLnNvbWUodCA9PiB0LnR5cGUgPT09ICdhZHZhbmNlX2FnZScpKSB7IGFkZE5vdGlmaWNhdGlvbihcIkFkdmFuY2VtZW50IGFscmVhZHkgaW4gcHJvZ3Jlc3MuXCIpOyByZXR1cm47IH1cbiAgICAgICAgaWYgKCF1bmxpbWl0ZWRSZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmcgPSBbXTtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZXMuZm9vZCA8IDUwMCkgbWlzc2luZy5wdXNoKGAkezUwMCAtIHJlc291cmNlcy5mb29kfSBGb29kYCk7XG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzLmdvbGQgPCAyMDApIG1pc3NpbmcucHVzaChgJHsyMDAgLSByZXNvdXJjZXMuZ29sZH0gR29sZGApO1xuICAgICAgICAgICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkgeyBhZGROb3RpZmljYXRpb24oYFRvIGFkdmFuY2UsIHlvdSBuZWVkICR7bWlzc2luZy5qb2luKCcgYW5kICcpfS5gKTsgcmV0dXJuOyB9XG4gICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMoeyBmb29kOiAtNTAwLCBnb2xkOiAtMjAwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjdGl2ZUFnZXMgPSBtYXN0ZXJBZ2VMaXN0LmZpbHRlcihhID0+IGEuaXNBY3RpdmUpO1xuICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBhY3RpdmVBZ2VzLmZpbmRJbmRleChhZ2UgPT4gYWdlLm5hbWUgPT09IGN1cnJlbnRBZ2UpO1xuICAgICAgICBpZiAoY3VycmVudEluZGV4ID09PSAtMSB8fCBjdXJyZW50SW5kZXggKyAxID49IGFjdGl2ZUFnZXMubGVuZ3RoKSB7IGFkZE5vdGlmaWNhdGlvbihcIllvdSBoYXZlIHJlYWNoZWQgdGhlIGZpbmFsIGF2YWlsYWJsZSBhZ2UuXCIpOyByZXR1cm47IH1cblxuICAgICAgICBpZih1bmxpbWl0ZWRSZXNvdXJjZXMpIGhhbmRsZVRhc2tDb21wbGV0aW9uKHsgaWQ6ICdpbnN0YW50JywgdHlwZTogJ2FkdmFuY2VfYWdlJywgc3RhcnRUaW1lOiAwLCBkdXJhdGlvbjogMCwgcGF5bG9hZDoge30gfSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocHJldiA9PiBbLi4ucHJldiwgeyBpZDogYCR7RGF0ZS5ub3coKX0tYWR2YW5jZV9hZ2VgLCB0eXBlOiAnYWR2YW5jZV9hZ2UnLCBzdGFydFRpbWU6IERhdGUubm93KCksIGR1cmF0aW9uOiA2MDAwMCB9XSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgWW91ciBwZW9wbGUgYmVnaW4gdGhlIGxvbmcgam91cm5leSB0byBhIG5ldyBhZ2UuYCk7XG4gICAgICAgICAgICBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGluc3RhbmNlSWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IGhhbmRsZUV4aXRHYW1lID0gYXN5bmMgKCkgPT4geyBzZXRDdXJyZW50U2F2ZU5hbWUobnVsbCk7IGF3YWl0IGZldGNoU2F2ZXNBbmRDb25maWdzKCk7IHNldEdhbWVTdGF0ZShHYW1lU3RhdHVzLk1FTlUpOyB9O1xuICAgIGNvbnN0IGhhbmRsZURlbGV0ZUdhbWUgPSBhc3luYyAoc2F2ZU5hbWU6IHN0cmluZykgPT4geyBhd2FpdCBkZWxldGVHYW1lU3RhdGUoc2F2ZU5hbWUpOyBhd2FpdCBmZXRjaFNhdmVzQW5kQ29uZmlncygpOyBhZGROb3RpZmljYXRpb24oYERlbGV0ZWQgc2FnYTogXCIke3NhdmVOYW1lfVwiYCk7IH07XG5cbiAgICBjb25zdCBoYW5kbGVUb2dnbGVVbmxpbWl0ZWRSZXNvdXJjZXMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld01vZGUgPSAhdW5saW1pdGVkUmVzb3VyY2VzO1xuICAgICAgICBzZXRVbmxpbWl0ZWRSZXNvdXJjZXMobmV3TW9kZSk7XG4gICAgICAgIGlmIChuZXdNb2RlKSB7XG4gICAgICAgICAgICBzZXRSZXNvdXJjZXMoeyBmb29kOiA5OTk5OSwgd29vZDogOTk5OTksIGdvbGQ6IDk5OTk5LCBzdG9uZTogOTk5OTkgfSk7XG4gICAgICAgICAgICBhZGROb3RpZmljYXRpb24oXCJUZXN0IE1vZGU6IE9OIC0gQWxsIGFjdGl2ZSB0YXNrcyBjb21wbGV0ZWQuXCIpO1xuICAgICAgICAgICAgY29uc3QgZGVwbGV0ZWROb2RlSWRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICBhY3RpdmVUYXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0YXNrLnR5cGUgPT09ICdnYXRoZXInICYmIHRhc2sucGF5bG9hZD8ucmVzb3VyY2VOb2RlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVwbGV0ZWROb2RlSWRzLmFkZCh0YXNrLnBheWxvYWQucmVzb3VyY2VOb2RlSWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gcmVzb3VyY2VOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gdGFzay5wYXlsb2FkLnJlc291cmNlTm9kZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUpIGFkZFRvTG9nKGBJbnN0YW50bHkgZ2F0aGVyZWQgYWxsICR7bm9kZS50eXBlfSBmcm9tIGEgZGVwbGV0ZWQgc291cmNlLmAsIG5vZGUudHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhbmRsZVRhc2tDb21wbGV0aW9uKHRhc2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhbXSk7XG4gICAgICAgICAgICBpZiAoZGVwbGV0ZWROb2RlSWRzLnNpemUgPiAwKSBzZXRSZXNvdXJjZU5vZGVzKHByZXYgPT4gcHJldi5maWx0ZXIobiA9PiAhZGVwbGV0ZWROb2RlSWRzLmhhcyhuLmlkKSkpO1xuICAgICAgICB9IGVsc2UgYWRkTm90aWZpY2F0aW9uKFwiVGVzdCBNb2RlOiBPRkZcIik7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBoYW5kbGVVc2VJdGVtID0gKGl0ZW1JZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpbnZlbnRvcnkuZmluZChpID0+IGkuaWQgPT09IGl0ZW1JZCk7IGlmICghaXRlbSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBiYXNlSXRlbUlkID0gaXRlbS5pZC5zcGxpdCgnLScpWzBdO1xuICAgICAgICBjb25zdCBjb25zdHJ1Y3Rpb25UYXNrcyA9IGFjdGl2ZVRhc2tzLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ2J1aWxkJyk7XG4gICAgICAgIHN3aXRjaChiYXNlSXRlbUlkKSB7XG4gICAgICAgICAgICBjYXNlICdzY3JvbGxfb2ZfaGFzdGUnOiBjYXNlICdibHVlcHJpbnRfb2ZfdGhlX21hc3Rlcic6XG4gICAgICAgICAgICAgICAgaWYgKGNvbnN0cnVjdGlvblRhc2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFzayA9IGNvbnN0cnVjdGlvblRhc2tzLnNvcnQoKGEsYikgPT4gKGIuc3RhcnRUaW1lICsgYi5kdXJhdGlvbikgLSAoYS5zdGFydFRpbWUgKyBhLmR1cmF0aW9uKSlbMF07XG4gICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZVRhc2tzKHAgPT4gcC5tYXAodCA9PiB0LmlkID09PSB0YXNrLmlkID8geyAuLi50LCBkdXJhdGlvbjogTWF0aC5tYXgoMCwgdC5kdXJhdGlvbiAtIChiYXNlSXRlbUlkID09PSAnc2Nyb2xsX29mX2hhc3RlJyA/IDE1MDAwIDogNjAwMDApKSB9IDogdCkpO1xuICAgICAgICAgICAgICAgICAgICBhZGRUb0xvZyhgVXNlZCAke2l0ZW0ubmFtZX0gb24gdGhlICR7YnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB0YXNrLnBheWxvYWQ/LmJ1aWxkaW5nVHlwZSk/Lm5hbWV9LmAsICdpdGVtJyk7XG4gICAgICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hlYXJ0eV9tZWFsJzogdXBkYXRlUmVzb3VyY2VzKHsgZm9vZDogNzUgfSk7IGFkZFRvTG9nKGBVc2VkICR7aXRlbS5uYW1lfSB0byBnYWluIDc1IGZvb2QuYCwgJ2l0ZW0nKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdidWlsZGVyc19jaGFybSc6IHNldEFjdGl2ZUJ1ZmZzKHAgPT4gKHsuLi5wLCBidWlsZFRpbWVSZWR1Y3Rpb246IHsgcGVyY2VudGFnZTogMC4xLCB1c2VzOiAxIH19KSk7IGFkZFRvTG9nKGBVc2VkICR7aXRlbS5uYW1lfS4gTmV4dCBidWlsZGluZyBpcyAxMCUgZmFzdGVyLmAsICdpdGVtJyk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZHJpbGxtYXN0ZXJzX3doaXN0bGUnOiBzZXRBY3RpdmVCdWZmcyhwID0+ICh7Li4ucCwgdHJhaW5UaW1lUmVkdWN0aW9uOiB7IHBlcmNlbnRhZ2U6IDAuMjUsIHVzZXM6IDUgfX0pKTsgYWRkVG9Mb2coYFVzZWQgJHtpdGVtLm5hbWV9LiBOZXh0IDUgdW5pdHMgdHJhaW4gMjUlIGZhc3Rlci5gLCAnaXRlbScpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2dvbGRlbl9oYXJ2ZXN0Jzogc2V0QWN0aXZlQnVmZnMocCA9PiAoey4uLnAsIHJlc291cmNlQm9vc3Q6IFsuLi4ocC5yZXNvdXJjZUJvb3N0IHx8IFtdKSwgeyByZXNvdXJjZTogJ2Zvb2QnLCBtdWx0aXBsaWVyOiAxLjUsIGVuZFRpbWU6IERhdGUubm93KCkgKyA2MDAwMCB9XX0pKTsgYWRkVG9Mb2coYFVzZWQgJHtpdGVtLm5hbWV9LiBGb29kIGdhdGhlcmluZyBib29zdGVkIGJ5IDUwJSBmb3IgNjBzLmAsICdpdGVtJyk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2hhcmRfb2ZfdGhlX2FuY2llbnRzJzpcbiAgICAgICAgICAgICAgICBpZiAoY29uc3RydWN0aW9uVGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXNrID0gY29uc3RydWN0aW9uVGFza3Muc29ydCgoYSxiKSA9PiAoYi5zdGFydFRpbWUgKyBiLmR1cmF0aW9uKSAtIChhLnN0YXJ0VGltZSArIGEuZHVyYXRpb24pKVswXTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocCA9PiBwLmZpbHRlcih0ID0+IHQuaWQgIT09IHRhc2suaWQpKTsgaGFuZGxlVGFza0NvbXBsZXRpb24odGFzayk7XG4gICAgICAgICAgICAgICAgICAgIGFkZFRvTG9nKGBVc2VkICR7aXRlbS5uYW1lfSB0byBpbnN0YW50bHkgY29tcGxldGUgdGhlICR7YnVpbGRpbmdMaXN0LmZpbmQoYiA9PiBiLmlkID09PSB0YXNrLnBheWxvYWQ/LmJ1aWxkaW5nVHlwZSk/Lm5hbWV9LmAsICdpdGVtJyk7XG4gICAgICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hlYXJ0X29mX3RoZV9tb3VudGFpbic6XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnVmZnMocCA9PiAoey4uLnAsIHJlc291cmNlQm9vc3Q6IFsuLi4ocC5yZXNvdXJjZUJvb3N0IHx8IFtdKSwgeyByZXNvdXJjZTogJ2dvbGQnLCBtdWx0aXBsaWVyOiAyLCBlbmRUaW1lOiBEYXRlLm5vdygpICsgMTIwMDAwIH0sIHsgcmVzb3VyY2U6ICdzdG9uZScsIG11bHRpcGxpZXI6IDIsIGVuZFRpbWU6IERhdGUubm93KCkgKyAxMjAwMDAgfV19KSk7XG4gICAgICAgICAgICAgICAgYWRkVG9Mb2coYFVzZWQgJHtpdGVtLm5hbWV9LiBHb2xkIGFuZCBTdG9uZSBnYXRoZXJpbmcgZG91YmxlZCBmb3IgMiBtaW51dGVzLmAsICdpdGVtJyk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmFubmVyX29mX2NvbW1hbmQnOlxuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJ1ZmZzKHAgPT4gKHsuLi5wLCBwZXJtYW5lbnRUcmFpblRpbWVSZWR1Y3Rpb246IChwLnBlcm1hbmVudFRyYWluVGltZVJlZHVjdGlvbiB8fCAwKSArIDAuMDV9KSk7XG4gICAgICAgICAgICAgICAgYWRkVG9Mb2coYFVzZWQgJHtpdGVtLm5hbWV9LiBNaWxpdGFyeSB1bml0cyB0cmFpbiA1JSBmYXN0ZXIsIHBlcm1hbmVudGx5LmAsICdpdGVtJyk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2hpc3Blcl9vZl90aGVfY3JlYXRvcic6XG4gICAgICAgICAgICAgICAgY29uc3QgdGFza3MgPSBbLi4uYWN0aXZlVGFza3NdOyBzZXRBY3RpdmVUYXNrcyhbXSk7IHRhc2tzLmZvckVhY2goaGFuZGxlVGFza0NvbXBsZXRpb24pO1xuICAgICAgICAgICAgICAgIGFkZFRvTG9nKGBBIGRpdmluZSB3aGlzcGVyIGVjaG9lcywgYW5kIGFsbCB3b3JrIGlzIGluc3RhbnRseSBmaW5pc2hlZC5gLCAnaXRlbScpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnZlbnRvcnkocHJldiA9PiBwcmV2LmZpbHRlcihpID0+IGkuaWQgIT09IGl0ZW1JZCkpOyBzZXRJbnZlbnRvcnlQYW5lbFN0YXRlKHtpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsfSk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBidWlsZGluZ0NvdW50cyA9IGJ1aWxkaW5nTGlzdC5yZWR1Y2UoKGFjYywgYikgPT4geyBhY2NbYi5pZF0gPSBidWlsZGluZ3NbYi5pZCBhcyBzdHJpbmddPy5sZW5ndGggfHwgMDsgcmV0dXJuIGFjYzsgfSwge30gYXMgUmVjb3JkPHN0cmluZywgbnVtYmVyPik7XG4gICAgY29uc3QgaWRsZVZpbGxhZ2VyQ291bnQgPSB1bml0cy52aWxsYWdlcnMuZmlsdGVyKHYgPT4gIXYuY3VycmVudFRhc2spLmxlbmd0aDtcbiAgICBjb25zdCBhc3NpZ25tZW50VGFyZ2V0ID0gYXNzaWdubWVudFBhbmVsU3RhdGUudGFyZ2V0VHlwZSA9PT0gJ3Jlc291cmNlJyA/IHJlc291cmNlTm9kZXMuZmluZChuID0+IG4uaWQgPT09IGFzc2lnbm1lbnRQYW5lbFN0YXRlLnRhcmdldElkKSA6IGFjdGl2ZVRhc2tzLmZpbmQodCA9PiB0LnR5cGUgPT09ICdidWlsZCcgJiYgdC5pZCA9PT0gYXNzaWdubWVudFBhbmVsU3RhdGUudGFyZ2V0SWQpO1xuICAgIFxuICAgIGNvbnN0IGN1cnJlbnRBZ2VJbmRleCA9IGFnZVByb2dyZXNzaW9uTGlzdC5maW5kSW5kZXgoYSA9PiBhLm5hbWUgPT09IGN1cnJlbnRBZ2UpO1xuICAgIGNvbnN0IGF2YWlsYWJsZUJ1aWxkaW5ncyA9IGJ1aWxkaW5nTGlzdC5maWx0ZXIoYiA9PiB7XG4gICAgICAgIGNvbnN0IHVubG9ja0FnZUluZGV4ID0gYWdlUHJvZ3Jlc3Npb25MaXN0LmZpbmRJbmRleChhID0+IGEubmFtZSA9PT0gYi51bmxvY2tlZEluQWdlKTtcbiAgICAgICAgcmV0dXJuIGIuaXNBY3RpdmUgJiYgIWIuaXNVcGdyYWRlT25seSAmJiB1bmxvY2tBZ2VJbmRleCAhPT0gLTEgJiYgdW5sb2NrQWdlSW5kZXggPD0gY3VycmVudEFnZUluZGV4O1xuICAgIH0pO1xuXG4gICAgY29uc3QgYWN0aXZlVW5pdHMgPSB1bml0TGlzdC5maWx0ZXIodSA9PiB1LmlzQWN0aXZlKTtcblxuICAgIGNvbnN0IGNsb3NlQWxsUGFuZWxzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBzZXRVbml0TWFuYWdlbWVudFBhbmVsKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgICAgICBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbChwID0+IHAuaXNPcGVuID8geyBpc09wZW46IGZhbHNlLCB0eXBlOiBudWxsLCBpbnN0YW5jZUlkOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0gOiBwKTtcbiAgICAgICAgc2V0QnVpbGRQYW5lbFN0YXRlKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIHZpbGxhZ2VySWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgICAgICBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZShwID0+IHAuaXNPcGVuID8geyBpc09wZW46IGZhbHNlLCB0YXJnZXRJZDogbnVsbCwgdGFyZ2V0VHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9IDogcCk7XG4gICAgICAgIHNldENpdlBhbmVsU3RhdGUocCA9PiBwLmlzT3BlbiA/IHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9IDogcCk7XG4gICAgICAgIHNldEFsbEJ1aWxkaW5nc1BhbmVsKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgICAgICBzZXRJbnZlbnRvcnlQYW5lbFN0YXRlKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGhhbmRsZU9wZW5CdWlsZGluZ1BhbmVsID0gdXNlQ2FsbGJhY2soKHR5cGU6IEJ1aWxkaW5nVHlwZSB8IHN0cmluZywgaW5zdGFuY2VJZDogc3RyaW5nLCByZWN0OiBET01SZWN0KSA9PiB7XG4gICAgICAgIGNsb3NlQWxsUGFuZWxzKCk7XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiB0cnVlLCB0eXBlLCBpbnN0YW5jZUlkLCBhbmNob3JSZWN0OiByZWN0IH0pO1xuICAgIH0sIFtjbG9zZUFsbFBhbmVsc10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgRWxlbWVudDtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0LmNsb3Nlc3QoJy5zY2ktZmktcGFuZWwtcG9wdXAsIFtkYXRhLXJhZGl4LXBvcHBlci1jb250ZW50LXdyYXBwZXJdJykpIGNsb3NlQWxsUGFuZWxzKCk7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZUNsaWNrT3V0c2lkZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVDbGlja091dHNpZGUpO1xuICAgIH0sIFtjbG9zZUFsbFBhbmVsc10pO1xuXG4gICAgY29uc3QgcmVuZGVyQ29udGVudCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGlzQXBwTG9hZGluZykge1xuICAgICAgICAgICAgcmV0dXJuIDxMb2FkaW5nU2NyZWVuIC8+O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnYW1lU3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZVN0YXR1cy5NRU5VOiByZXR1cm4gPFN0YXJ0U2NyZWVuIG9uTmV3R2FtZT17aGFuZGxlU3RhcnROZXdHYW1lfSBvblJlc3VtZUdhbWU9e2hhbmRsZVJlc3VtZUdhbWV9IHNhdmVkR2FtZXM9e2FsbFNhdmVzfSBvbkRlbGV0ZUdhbWU9e2hhbmRsZURlbGV0ZUdhbWV9IC8+O1xuICAgICAgICAgICAgY2FzZSBHYW1lU3RhdHVzLkxPQURJTkc6IHJldHVybiA8TG9hZGluZ1NjcmVlbiAvPjtcbiAgICAgICAgICAgIGNhc2UgR2FtZVN0YXR1cy5QTEFZSU5HOlxuICAgICAgICAgICAgICAgIGlmICghY2l2aWxpemF0aW9uKSByZXR1cm4gPExvYWRpbmdTY3JlZW4gLz47XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxHYW1lVUlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXZpbGl6YXRpb249e2NpdmlsaXphdGlvbn0gcmVzb3VyY2VzPXtyZXNvdXJjZXN9IHVuaXRzPXt1bml0c30gYnVpbGRpbmdzPXtidWlsZGluZ3N9IHBvcHVsYXRpb249e3BvcHVsYXRpb259IGN1cnJlbnRBZ2U9e2N1cnJlbnRBZ2V9IGdhbWVMb2c9e2dhbWVMb2d9IHJlc291cmNlRGVsdGFzPXtyZXNvdXJjZURlbHRhc30gYWN0aXZpdHlTdGF0dXM9e2FjdGl2aXR5U3RhdHVzfSB1bml0TGlzdD17YWN0aXZlVW5pdHN9IGJ1aWxkaW5nTGlzdD17YnVpbGRpbmdMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uT3BlblVuaXRQYW5lbD17KHR5cGUsIHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0VW5pdE1hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogdHJ1ZSwgdHlwZSwgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5CdWlsZGluZ1BhbmVsPXtoYW5kbGVPcGVuQnVpbGRpbmdQYW5lbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5BbGxCdWlsZGluZ3NQYW5lbD17KHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0QWxsQnVpbGRpbmdzUGFuZWwoeyBpc09wZW46IHRydWUsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyQWN0aW9uPXtwbGF5ZXJBY3Rpb259IG9uQ29uZmlybVBsYWNlbWVudD17aGFuZGxlQ29uZmlybVBsYWNlbWVudH0gb25DYW5jZWxQbGF5ZXJBY3Rpb249e2hhbmRsZUNhbmNlbFBsYXllckFjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkJ1aWxkaW5nQ2xpY2s9eyhidWlsZGluZywgcmVjdCkgPT4geyBjbG9zZUFsbFBhbmVscygpOyBjb25zdCB0eXBlID0gT2JqZWN0LmtleXMoYnVpbGRpbmdzKS5maW5kKGtleSA9PiBidWlsZGluZ3Nba2V5IGFzIHN0cmluZ10/LnNvbWUoYiA9PiBiLmlkID09PSBidWlsZGluZy5pZCkpOyBpZih0eXBlKSBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogdHJ1ZSwgdHlwZSwgaW5zdGFuY2VJZDogYnVpbGRpbmcuaWQsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGltZW5zaW9ucz17TUFQX0RJTUVOU0lPTlN9IGFjdGl2ZVRhc2tzPXthY3RpdmVUYXNrc30gb25FeGl0R2FtZT17aGFuZGxlRXhpdEdhbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25PcGVuQ2l2UGFuZWw9eyhyZWN0KSA9PiB7IGNsb3NlQWxsUGFuZWxzKCk7IHNldENpdlBhbmVsU3RhdGUoeyBpc09wZW46IHRydWUsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VOb2Rlcz17cmVzb3VyY2VOb2Rlc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5Bc3NpZ25tZW50UGFuZWw9eyhub2RlSWQsIHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0QXNzaWdubWVudFBhbmVsU3RhdGUoeyBpc09wZW46IHRydWUsIHRhcmdldElkOiBub2RlSWQsIHRhcmdldFR5cGU6ICdyZXNvdXJjZScsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25PcGVuQ29uc3RydWN0aW9uUGFuZWw9eyhjb25zdHJ1Y3Rpb25JZCwgcmVjdCkgPT4geyBjbG9zZUFsbFBhbmVscygpOyBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSh7IGlzT3BlbjogdHJ1ZSwgdGFyZ2V0SWQ6IGNvbnN0cnVjdGlvbklkLCB0YXJnZXRUeXBlOiAnY29uc3RydWN0aW9uJywgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXRoZXJJbmZvPXtHQVRIRVJfSU5GT30gY3VycmVudEV2ZW50PXtjdXJyZW50RXZlbnR9IG9uRXZlbnRDaG9pY2U9e2hhbmRsZUV2ZW50Q2hvaWNlfSBpbnZlbnRvcnk9e2ludmVudG9yeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5JbnZlbnRvcnlQYW5lbD17KHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0SW52ZW50b3J5UGFuZWxTdGF0ZSh7IGlzT3BlbjogdHJ1ZSwgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnVpbGRQYW5lbCBpc09wZW49e2J1aWxkUGFuZWxTdGF0ZS5pc09wZW59IG9uQ2xvc2U9eygpID0+IHNldEJ1aWxkUGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHZpbGxhZ2VySWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSl9IG9uU3RhcnRQbGFjZW1lbnQ9e2hhbmRsZVN0YXJ0UGxhY2VtZW50fSByZXNvdXJjZXM9e3Jlc291cmNlc30gYnVpbGRpbmdDb3VudHM9e2J1aWxkaW5nQ291bnRzfSBidWlsZGluZ0xpc3Q9e2F2YWlsYWJsZUJ1aWxkaW5nc30gYW5jaG9yUmVjdD17YnVpbGRQYW5lbFN0YXRlLmFuY2hvclJlY3R9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VW5pdE1hbmFnZW1lbnRQYW5lbCBpc09wZW49e3VuaXRNYW5hZ2VtZW50UGFuZWwuaXNPcGVufSBvbkNsb3NlPXsoKSA9PiBzZXRVbml0TWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KX0gdHlwZT17dW5pdE1hbmFnZW1lbnRQYW5lbC50eXBlfSB1bml0cz17dW5pdHN9IG9uVXBkYXRlVW5pdD17aGFuZGxlVXBkYXRlVW5pdH0gb25EaXNtaXNzVW5pdD17aGFuZGxlRGlzbWlzc1NwZWNpZmljVW5pdH0gb25Jbml0aWF0ZUJ1aWxkPXsodmlsbGFnZXJJZCwgcmVjdCkgPT4geyBjbG9zZUFsbFBhbmVscygpOyBoYW5kbGVJbml0aWF0ZUJ1aWxkKHZpbGxhZ2VySWQsIHJlY3QpOyB9fSBnZXRWaWxsYWdlclRhc2tEZXRhaWxzPXtnZXRWaWxsYWdlclRhc2tEZXRhaWxzfSBhbmNob3JSZWN0PXt1bml0TWFuYWdlbWVudFBhbmVsLmFuY2hvclJlY3R9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwgaXNPcGVuPXtidWlsZGluZ01hbmFnZW1lbnRQYW5lbC5pc09wZW59IG9uQ2xvc2U9eygpID0+IHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KX0gcGFuZWxTdGF0ZT17YnVpbGRpbmdNYW5hZ2VtZW50UGFuZWx9IGJ1aWxkaW5ncz17YnVpbGRpbmdzfSBidWlsZGluZ0xpc3Q9e2J1aWxkaW5nTGlzdH0gb25VcGRhdGVCdWlsZGluZz17aGFuZGxlVXBkYXRlQnVpbGRpbmd9IG9uRGVtb2xpc2hCdWlsZGluZz17aGFuZGxlRGVtb2xpc2hCdWlsZGluZ30gb25UcmFpblVuaXRzPXtoYW5kbGVUcmFpblVuaXRzfSBvblRyYWluVmlsbGFnZXJzPXtoYW5kbGVUcmFpblZpbGxhZ2Vyc30gb25VcGdyYWRlQnVpbGRpbmc9e2hhbmRsZVVwZ3JhZGVCdWlsZGluZ30gcmVzb3VyY2VzPXtyZXNvdXJjZXN9IHBvcHVsYXRpb249e3BvcHVsYXRpb259IHVuaXRMaXN0PXthY3RpdmVVbml0c30gb25BZHZhbmNlQWdlPXtoYW5kbGVBZHZhbmNlQWdlfSBhY3RpdmVUYXNrcz17YWN0aXZlVGFza3N9IGFuY2hvclJlY3Q9e2J1aWxkaW5nTWFuYWdlbWVudFBhbmVsLmFuY2hvclJlY3R9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UmVzb3VyY2VBc3NpZ25tZW50UGFuZWwgaXNPcGVuPXthc3NpZ25tZW50UGFuZWxTdGF0ZS5pc09wZW59IG9uQ2xvc2U9eygpID0+IHNldEFzc2lnbm1lbnRQYW5lbFN0YXRlKHsgaXNPcGVuOiBmYWxzZSwgdGFyZ2V0SWQ6IG51bGwsIHRhcmdldFR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSl9IGFzc2lnbm1lbnRUYXJnZXQ9e2Fzc2lnbm1lbnRUYXJnZXQgfHwgbnVsbH0gaWRsZVZpbGxhZ2VyQ291bnQ9e2lkbGVWaWxsYWdlckNvdW50fSBvbkFzc2lnblZpbGxhZ2Vycz17aGFuZGxlQXNzaWduVmlsbGFnZXJzfSBvblJlY2FsbFZpbGxhZ2Vycz17aGFuZGxlUmVjYWxsVmlsbGFnZXJzfSBnYXRoZXJJbmZvPXtHQVRIRVJfSU5GT30gYnVpbGRpbmdMaXN0PXtidWlsZGluZ0xpc3R9IHVuaXRzPXt1bml0c30gYW5jaG9yUmVjdD17YXNzaWdubWVudFBhbmVsU3RhdGUuYW5jaG9yUmVjdH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaXZpbGl6YXRpb25QYW5lbCBpc09wZW49e2NpdlBhbmVsU3RhdGUuaXNPcGVufSBvbkNsb3NlPXsoKSA9PiBzZXRDaXZQYW5lbFN0YXRlKHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9KX0gY2l2aWxpemF0aW9uPXtjaXZpbGl6YXRpb259IGFuY2hvclJlY3Q9e2NpdlBhbmVsU3RhdGUuYW5jaG9yUmVjdH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBbGxCdWlsZGluZ3NQYW5lbCBpc09wZW49e2FsbEJ1aWxkaW5nc1BhbmVsLmlzT3Blbn0gb25DbG9zZT17KCkgPT4gc2V0QWxsQnVpbGRpbmdzUGFuZWwoeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pfSBidWlsZGluZ0xpc3Q9e2J1aWxkaW5nTGlzdH0gYnVpbGRpbmdDb3VudHM9e2J1aWxkaW5nQ291bnRzfSBhY3RpdmVUYXNrcz17YWN0aXZlVGFza3N9IG9uT3BlbkJ1aWxkaW5nUGFuZWw9e2hhbmRsZU9wZW5CdWlsZGluZ1BhbmVsfSBhbmNob3JSZWN0PXthbGxCdWlsZGluZ3NQYW5lbC5hbmNob3JSZWN0fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEludmVudG9yeVBhbmVsIGlzT3Blbj17aW52ZW50b3J5UGFuZWxTdGF0ZS5pc09wZW59IG9uQ2xvc2U9eygpID0+IHNldEludmVudG9yeVBhbmVsU3RhdGUoeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pfSBpbnZlbnRvcnk9e2ludmVudG9yeX0gb25Vc2VJdGVtPXtoYW5kbGVVc2VJdGVtfSBhY3RpdmVUYXNrcz17YWN0aXZlVGFza3N9IGFjdGl2ZUJ1ZmZzPXthY3RpdmVCdWZmc30gYW5jaG9yUmVjdD17aW52ZW50b3J5UGFuZWxTdGF0ZS5hbmNob3JSZWN0fSAvPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDxTdGFydFNjcmVlbiBvbk5ld0dhbWU9e2hhbmRsZVN0YXJ0TmV3R2FtZX0gb25SZXN1bWVHYW1lPXtoYW5kbGVSZXN1bWVHYW1lfSBzYXZlZEdhbWVzPXthbGxTYXZlc30gb25EZWxldGVHYW1lPXtoYW5kbGVEZWxldGVHYW1lfSAvPjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBiZy1zdG9uZS1kYXJrIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNFwiPlxuICAgICAgICAgICAge2dhbWVTdGF0ZSA9PT0gR2FtZVN0YXR1cy5QTEFZSU5HICYmIChcbiAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVUb2dnbGVVbmxpbWl0ZWRSZXNvdXJjZXN9IGNsYXNzTmFtZT1cImZpeGVkIGJvdHRvbS00IGxlZnQtNCB6LVsxMDFdIGJnLWJyYW5kLWdvbGQgdGV4dC1zdG9uZS1kYXJrIGZvbnQtYm9sZCBweS0xIHB4LTMgcm91bmRlZC1mdWxsIHRleHQteHMgc2hhZG93LWxnIGhvdmVyOnNjYWxlLTEwNSB0cmFuc2l0aW9uLXRyYW5zZm9ybVwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgdW5saW1pdGVkIHJlc291cmNlcyB0ZXN0IG1vZGVcIj5UZXN0IE1vZGU6IHt1bmxpbWl0ZWRSZXNvdXJjZXMgPyAnT04nIDogJ09GRid9PC9idXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPE5vdGlmaWNhdGlvbk1hbmFnZXIgbm90aWZpY2F0aW9ucz17bm90aWZpY2F0aW9uc30gb25SZW1vdmVOb3RpZmljYXRpb249e3JlbW92ZU5vdGlmaWNhdGlvbn0gLz5cbiAgICAgICAgICAgIDxtYWluIGNsYXNzTmFtZT1cInctZnVsbCBtYXgtdy03eGwgbXgtYXV0b1wiPlxuICAgICAgICAgICAgICAgIHtyZW5kZXJDb250ZW50KCl9XG4gICAgICAgICAgICA8L21haW4+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHYW1lUGFnZTtcblxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZU1lbW8iLCJHYW1lU3RhdHVzIiwiZ2V0UHJlZGVmaW5lZENpdmlsaXphdGlvbiIsImdldFByZWRlZmluZWRHYW1lRXZlbnQiLCJzYXZlR2FtZVN0YXRlIiwibG9hZEdhbWVTdGF0ZSIsImdldEFsbFNhdmVOYW1lcyIsImRlbGV0ZUdhbWVTdGF0ZSIsImdldEFsbEFnZUNvbmZpZ3MiLCJnZXRBbGxCdWlsZGluZ0NvbmZpZ3MiLCJnZXRBbGxVbml0Q29uZmlncyIsInNhdmVBZ2VDb25maWciLCJzYXZlQnVpbGRpbmdDb25maWciLCJzYXZlVW5pdENvbmZpZyIsImdldFJhbmRvbU5hbWVzIiwiR0FNRV9JVEVNUyIsIklOSVRJQUxfQUdFUyIsIklOSVRJQUxfQlVJTERJTkdTIiwiSU5JVElBTF9VTklUUyIsIkdhbWVVSSIsIlN0YXJ0U2NyZWVuIiwiTG9hZGluZ1NjcmVlbiIsIkJ1aWxkUGFuZWwiLCJOb3RpZmljYXRpb25NYW5hZ2VyIiwiVW5pdE1hbmFnZW1lbnRQYW5lbCIsIkJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsIiwiUmVzb3VyY2VBc3NpZ25tZW50UGFuZWwiLCJDaXZpbGl6YXRpb25QYW5lbCIsIkFsbEJ1aWxkaW5nc1BhbmVsIiwiSW52ZW50b3J5UGFuZWwiLCJHQVRIRVJfSU5GTyIsImZvb2QiLCJyYXRlIiwid29vZCIsImdvbGQiLCJzdG9uZSIsImluaXRpYWxCdWlsZGluZ3NTdGF0ZSIsImhvdXNlcyIsImJhcnJhY2tzIiwiYXJjaGVyeVJhbmdlIiwic3RhYmxlIiwic2llZ2VXb3Jrc2hvcCIsImJsYWNrc21pdGgiLCJ3YXRjaFRvd2VyIiwidG93bkNlbnRlciIsIk1BUF9ESU1FTlNJT05TIiwid2lkdGgiLCJoZWlnaHQiLCJHYW1lUGFnZSIsImdhbWVTdGF0ZSIsInNldEdhbWVTdGF0ZSIsIkxPQURJTkciLCJjaXZpbGl6YXRpb24iLCJzZXRDaXZpbGl6YXRpb24iLCJyZXNvdXJjZXMiLCJzZXRSZXNvdXJjZXMiLCJ1bml0cyIsInNldFVuaXRzIiwidmlsbGFnZXJzIiwibWlsaXRhcnkiLCJidWlsZGluZ3MiLCJzZXRCdWlsZGluZ3MiLCJjdXJyZW50QWdlIiwic2V0Q3VycmVudEFnZSIsImdhbWVMb2ciLCJzZXRHYW1lTG9nIiwiY3VycmVudEV2ZW50Iiwic2V0Q3VycmVudEV2ZW50IiwicmVzb3VyY2VEZWx0YXMiLCJzZXRSZXNvdXJjZURlbHRhcyIsImFjdGl2aXR5U3RhdHVzIiwic2V0QWN0aXZpdHlTdGF0dXMiLCJub3RpZmljYXRpb25zIiwic2V0Tm90aWZpY2F0aW9ucyIsInVubGltaXRlZFJlc291cmNlcyIsInNldFVubGltaXRlZFJlc291cmNlcyIsImFsbFNhdmVzIiwic2V0QWxsU2F2ZXMiLCJjdXJyZW50U2F2ZU5hbWUiLCJzZXRDdXJyZW50U2F2ZU5hbWUiLCJwbGF5ZXJBY3Rpb24iLCJzZXRQbGF5ZXJBY3Rpb24iLCJhY3RpdmVUYXNrcyIsInNldEFjdGl2ZVRhc2tzIiwicmVzb3VyY2VOb2RlcyIsInNldFJlc291cmNlTm9kZXMiLCJpbnZlbnRvcnkiLCJzZXRJbnZlbnRvcnkiLCJhY3RpdmVCdWZmcyIsInNldEFjdGl2ZUJ1ZmZzIiwicmVzb3VyY2VCb29zdCIsIm1hc3RlckFnZUxpc3QiLCJzZXRNYXN0ZXJBZ2VMaXN0IiwibWFzdGVyQnVpbGRpbmdMaXN0Iiwic2V0TWFzdGVyQnVpbGRpbmdMaXN0IiwibWFzdGVyVW5pdExpc3QiLCJzZXRNYXN0ZXJVbml0TGlzdCIsImlzQXBwTG9hZGluZyIsInNldElzQXBwTG9hZGluZyIsImJ1aWxkUGFuZWxTdGF0ZSIsInNldEJ1aWxkUGFuZWxTdGF0ZSIsImlzT3BlbiIsInZpbGxhZ2VySWQiLCJhbmNob3JSZWN0IiwidW5pdE1hbmFnZW1lbnRQYW5lbCIsInNldFVuaXRNYW5hZ2VtZW50UGFuZWwiLCJ0eXBlIiwiYnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwiLCJzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCIsImluc3RhbmNlSWQiLCJhbGxCdWlsZGluZ3NQYW5lbCIsInNldEFsbEJ1aWxkaW5nc1BhbmVsIiwiYXNzaWdubWVudFBhbmVsU3RhdGUiLCJzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSIsInRhcmdldElkIiwidGFyZ2V0VHlwZSIsImNpdlBhbmVsU3RhdGUiLCJzZXRDaXZQYW5lbFN0YXRlIiwiaW52ZW50b3J5UGFuZWxTdGF0ZSIsInNldEludmVudG9yeVBhbmVsU3RhdGUiLCJkZWx0YVRpbWVvdXRSZWYiLCJldmVudFRpbWVyUmVmIiwibGFzdFRpY2tSZWYiLCJEYXRlIiwibm93IiwiYW5pbWF0aW9uRnJhbWVSZWYiLCJhZ2VQcm9ncmVzc2lvbkxpc3QiLCJmaWx0ZXIiLCJhZ2UiLCJpc0FjdGl2ZSIsImJ1aWxkaW5nTGlzdCIsInVuaXRMaXN0IiwicG9wdWxhdGlvbkNhcGFjaXR5IiwiY2FwYWNpdHkiLCJidWlsZGluZ1R5cGUiLCJidWlsZGluZ0luZm8iLCJmaW5kIiwiYiIsImlkIiwibGVuZ3RoIiwicG9wdWxhdGlvbiIsImN1cnJlbnQiLCJmZXRjaFNhdmVzQW5kQ29uZmlncyIsImFsbEFnZUNvbmZpZ3MiLCJuYW1lcyIsImFnZU1hcCIsIk1hcCIsIm1hcCIsIml0ZW0iLCJhZ2VzTmVlZFVwZGF0ZSIsImluZGV4IiwicEl0ZW0iLCJlbnRyaWVzIiwiZXhpc3RpbmdJdGVtIiwiZ2V0IiwibmFtZSIsIm5ld0l0ZW0iLCJpc1ByZWRlZmluZWQiLCJvcmRlciIsIkpTT04iLCJzdHJpbmdpZnkiLCJhbGxCdWlsZGluZ0NvbmZpZ3MiLCJidWlsZGluZ01hcCIsImJ1aWxkaW5nc05lZWRVcGRhdGUiLCJkZWZhdWx0QWdlIiwidW5sb2NrZWRJbkFnZSIsImFsbFVuaXRDb25maWdzIiwidW5pdE1hcCIsInVuaXRzTmVlZFVwZGF0ZSIsImVycm9yIiwiY29uc29sZSIsImFnZXMiLCJhIiwiaSIsInUiLCJNRU5VIiwiUExBWUlORyIsImZ1bGxTdGF0ZSIsImFkZE5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJNYXRoIiwicmFuZG9tIiwicHJldiIsInJlbW92ZU5vdGlmaWNhdGlvbiIsIm4iLCJhZGRUb0xvZyIsImljb24iLCJzbGljZSIsInVwZGF0ZVJlc291cmNlcyIsImRlbHRhcyIsIm5ld1Jlc291cmNlcyIsImtleSIsInJlc291cmNlS2V5IiwibWF4Iiwid2luZG93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5ld0RlbHRhcyIsImhhbmRsZVRhc2tDb21wbGV0aW9uIiwidGFzayIsInBheWxvYWQiLCJ2aWxsYWdlcklkcyIsInYiLCJpbmNsdWRlcyIsImN1cnJlbnRUYXNrIiwicG9zaXRpb24iLCJuZXdCdWlsZGluZyIsImN1cnJlbnRIcCIsImhwIiwicCIsImN1cnJlbnRCdWlsZGluZ3MiLCJpY29uSWQiLCJvcmlnaW5hbEJ1aWxkaW5nSWQiLCJvcmlnaW5hbEJ1aWxkaW5nVHlwZSIsInRhcmdldEJ1aWxkaW5nVHlwZSIsIm9yaWdpbmFsQnVpbGRpbmciLCJ0YXJnZXRCdWlsZGluZ0luZm8iLCJuZXdCdWlsZGluZ3MiLCJjb3VudCIsIm5ld1ZpbGxhZ2VyTmFtZXMiLCJuZXdWaWxsYWdlcnMiLCJ1bml0VHlwZSIsInVuaXRJbmZvIiwibmV3VW5pdE5hbWVzIiwibmV3VW5pdHMiLCJ0aXRsZSIsImFjdGl2ZUFnZXMiLCJjdXJyZW50SW5kZXgiLCJmaW5kSW5kZXgiLCJhZ2VSZXN1bHQiLCJkZXNjcmlwdGlvbiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZ2FtZUxvb3AiLCJkZWx0YVRpbWUiLCJjb21wbGV0ZWRUYXNrcyIsInJlc291cmNlRGVsdGFzVGhpc1RpY2siLCJPYmplY3QiLCJ2YWx1ZXMiLCJmbGF0IiwiZm9yRWFjaCIsImluc3RhbmNlIiwiY29uZmlnIiwia2V5cyIsInNvbWUiLCJiSW5zdCIsImdlbmVyYXRlc1Jlc291cmNlIiwiZ2VuZXJhdGlvblJhdGUiLCJhbW91bnRQZXJTZWNvbmQiLCJtYWludGVuYW5jZUNvc3QiLCJyZXMiLCJjb3N0IiwiY29zdFBlclNlY29uZCIsIm5ld1Jlc291cmNlQm9vc3RzIiwiZW5kVGltZSIsInRhc2tzSW5Qcm9ncmVzcyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicHVzaCIsIm5vZGUiLCJyZXNvdXJjZU5vZGVJZCIsInZpbGxhZ2VyQ291bnQiLCJiYXNlUmF0ZVBlclNlY29uZCIsImNpdkJvbnVzTXVsdGlwbGllciIsImJvbnVzIiwidG9Mb3dlckNhc2UiLCJtYXRjaCIsInBhcnNlSW50IiwiaXRlbUJvb3N0TXVsdGlwbGllciIsInJlc291cmNlIiwibXVsdGlwbGllciIsImZpbmFsUmF0ZVBlclNlY29uZCIsIkJvb2xlYW4iLCJwcmV2Tm9kZXMiLCJhbW91bnRUb0RlY3JlbWVudCIsIm5ld0Ftb3VudCIsImFtb3VudCIsInRhc2tJZCIsInQiLCJmbG9vciIsImZpbmFsQWN0aXZlVGFza3MiLCJjdCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImhhbmRsZU5ld0V2ZW50IiwiZXZlbnQiLCJzY2hlZHVsZU5leHRFdmVudCIsImdlbmVyYXRlUmVzb3VyY2VOb2RlcyIsImV4aXN0aW5nUG9zaXRpb25zIiwibm9kZXMiLCJ0eXBlcyIsIm51bU5vZGVzIiwicG9zIiwieCIsInkiLCJoYXMiLCJhZGQiLCJoYW5kbGVTdGFydE5ld0dhbWUiLCJzYXZlTmFtZSIsImxvY2FsQWdlUHJvZ3Jlc3Npb25MaXN0IiwiY29uZmlncyIsImNpdiIsImluaXRpYWxWaWxsYWdlcnMiLCJ0Y1Bvc2l0aW9uIiwidGNJbmZvIiwiaW5pdGlhbFRDIiwiU2V0IiwiaXNWaWxsYWdlckJ1c3kiLCJnZXRWaWxsYWdlclRhc2tEZXRhaWxzIiwidmlsbGFnZXIiLCJoYW5kbGVSZXN1bWVHYW1lIiwic2F2ZWRTdGF0ZSIsIm1pZ3JhdGVkVmlsbGFnZXJzIiwidW5kZWZpbmVkIiwibWlncmF0ZWRUYXNrcyIsInZpZCIsImNvbnN0cnVjdGlvblRhc2tzIiwib2NjdXBpZWRDZWxscyIsImZpbmFsQnVpbGRpbmdzIiwiYlR5cGUiLCJpbmZvIiwidGNQb3MiLCJoYW5kbGVFdmVudENob2ljZSIsImNob2ljZSIsIm1pc3NpbmciLCJqb2luIiwicmVkdWNlIiwiYWNjIiwiayIsImlzU3VjY2VzcyIsInN1Y2Nlc3NDaGFuY2UiLCJlZmZlY3RzIiwic3VjY2Vzc0VmZmVjdHMiLCJmYWlsdXJlRWZmZWN0cyIsImxvZ01lc3NhZ2UiLCJ0ZXh0IiwibG9nIiwicmV3YXJkcyIsInJld2FyZCIsIkFycmF5IiwiaXNBcnJheSIsImFicyIsIml0ZW1JbmZvIiwiaXRlbUlkIiwibmV3SXRlbXMiLCJmcm9tIiwiXyIsImJ1aWxkaW5nSWQiLCJwbGFjZWQiLCJoYW5kbGVJbml0aWF0ZUJ1aWxkIiwicmVjdCIsImhhbmRsZVN0YXJ0UGxhY2VtZW50IiwiZXhpc3RpbmdDb3VudCIsImNvbnN0cnVjdGluZ0NvdW50IiwidG90YWxDb3VudCIsImxpbWl0IiwiYnVpbGRMaW1pdCIsIm1vZGUiLCJoYW5kbGVDb25maXJtUGxhY2VtZW50IiwiYnVpbGRlciIsImJ1aWxkVGltZSIsImJ1aWxkVGltZVJlZHVjdGlvbiIsInBlcmNlbnRhZ2UiLCJ1c2VzIiwidGFza1BheWxvYWQiLCJoYW5kbGVDYW5jZWxQbGF5ZXJBY3Rpb24iLCJoYW5kbGVEZW1vbGlzaEJ1aWxkaW5nIiwiYnVpbGRpbmdJbnN0YW5jZSIsImNhcGFjaXR5V2l0aG91dFRoaXNCdWlsZGluZyIsInJlZnVuZCIsInIiLCJoYW5kbGVVcGRhdGVCdWlsZGluZyIsImhhbmRsZVVwZ3JhZGVCdWlsZGluZyIsImJ1aWxkaW5nIiwidXBncmFkZVBhdGgiLCJ0aW1lIiwiaGFuZGxlVHJhaW5WaWxsYWdlcnMiLCJ0b3RhbENvc3QiLCJoYW5kbGVUcmFpblVuaXRzIiwidHJhaW5pbmdCdWlsZGluZyIsInJlcXVpcmVkQnVpbGRpbmciLCJ0cmFpblRpbWUiLCJwZXJtYW5lbnRUcmFpblRpbWVSZWR1Y3Rpb24iLCJ0cmFpblRpbWVSZWR1Y3Rpb24iLCJhcHBsaWNhYmxlIiwibWluIiwiaGFuZGxlRGlzbWlzc1NwZWNpZmljVW5pdCIsInVuaXQiLCJ1bml0VHlwZU5hbWUiLCJoYW5kbGVVcGRhdGVVbml0IiwiaGFuZGxlQXNzaWduVmlsbGFnZXJzVG9Db25zdHJ1Y3Rpb24iLCJjb25zdHJ1Y3Rpb25JZCIsImlkbGVWaWxsYWdlcnMiLCJjYXBwZWRDb3VudCIsInZpbGxhZ2Vyc1RvQXNzaWduIiwid29ya0RvbmUiLCJ3b3JrUmVtYWluaW5nIiwibmV3V29ya2VyQ291bnQiLCJuZXdSZW1haW5pbmdEdXJhdGlvbiIsImhhbmRsZUFzc2lnblZpbGxhZ2VycyIsInRhcmdldE5vZGUiLCJleGlzdGluZ1Rhc2siLCJoYW5kbGVSZWNhbGxWaWxsYWdlcnMiLCJ2aWxsYWdlcnNUb1JlY2FsbCIsInJlbWFpbmluZ1ZpbGxhZ2VycyIsImhhbmRsZUFkdmFuY2VBZ2UiLCJoYW5kbGVFeGl0R2FtZSIsImhhbmRsZURlbGV0ZUdhbWUiLCJoYW5kbGVUb2dnbGVVbmxpbWl0ZWRSZXNvdXJjZXMiLCJuZXdNb2RlIiwiZGVwbGV0ZWROb2RlSWRzIiwic2l6ZSIsImhhbmRsZVVzZUl0ZW0iLCJiYXNlSXRlbUlkIiwic3BsaXQiLCJzb3J0IiwidGFza3MiLCJidWlsZGluZ0NvdW50cyIsImlkbGVWaWxsYWdlckNvdW50IiwiYXNzaWdubWVudFRhcmdldCIsImN1cnJlbnRBZ2VJbmRleCIsImF2YWlsYWJsZUJ1aWxkaW5ncyIsInVubG9ja0FnZUluZGV4IiwiaXNVcGdyYWRlT25seSIsImFjdGl2ZVVuaXRzIiwiY2xvc2VBbGxQYW5lbHMiLCJoYW5kbGVPcGVuQnVpbGRpbmdQYW5lbCIsImhhbmRsZUNsaWNrT3V0c2lkZSIsInRhcmdldCIsImNsb3Nlc3QiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVuZGVyQ29udGVudCIsIm9uTmV3R2FtZSIsIm9uUmVzdW1lR2FtZSIsInNhdmVkR2FtZXMiLCJvbkRlbGV0ZUdhbWUiLCJvbk9wZW5Vbml0UGFuZWwiLCJvbk9wZW5CdWlsZGluZ1BhbmVsIiwib25PcGVuQWxsQnVpbGRpbmdzUGFuZWwiLCJvbkNvbmZpcm1QbGFjZW1lbnQiLCJvbkNhbmNlbFBsYXllckFjdGlvbiIsIm9uQnVpbGRpbmdDbGljayIsIm1hcERpbWVuc2lvbnMiLCJvbkV4aXRHYW1lIiwib25PcGVuQ2l2UGFuZWwiLCJvbk9wZW5Bc3NpZ25tZW50UGFuZWwiLCJub2RlSWQiLCJvbk9wZW5Db25zdHJ1Y3Rpb25QYW5lbCIsImdhdGhlckluZm8iLCJvbkV2ZW50Q2hvaWNlIiwib25PcGVuSW52ZW50b3J5UGFuZWwiLCJvbkNsb3NlIiwib25TdGFydFBsYWNlbWVudCIsIm9uVXBkYXRlVW5pdCIsIm9uRGlzbWlzc1VuaXQiLCJvbkluaXRpYXRlQnVpbGQiLCJwYW5lbFN0YXRlIiwib25VcGRhdGVCdWlsZGluZyIsIm9uRGVtb2xpc2hCdWlsZGluZyIsIm9uVHJhaW5Vbml0cyIsIm9uVHJhaW5WaWxsYWdlcnMiLCJvblVwZ3JhZGVCdWlsZGluZyIsIm9uQWR2YW5jZUFnZSIsIm9uQXNzaWduVmlsbGFnZXJzIiwib25SZWNhbGxWaWxsYWdlcnMiLCJvblVzZUl0ZW0iLCJkaXYiLCJjbGFzc05hbWUiLCJidXR0b24iLCJvbkNsaWNrIiwiYXJpYS1sYWJlbCIsIm9uUmVtb3ZlTm90aWZpY2F0aW9uIiwibWFpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ })

});