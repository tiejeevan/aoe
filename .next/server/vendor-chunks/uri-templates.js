/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uri-templates";
exports.ids = ["vendor-chunks/uri-templates"];
exports.modules = {

/***/ "(action-browser)/./node_modules/uri-templates/uri-templates.js":
/*!*****************************************************!*\
  !*** ./node_modules/uri-templates/uri-templates.js ***!
  \*****************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n})(this, function () {\n\tvar uriTemplateGlobalModifiers = {\n\t\t\"+\": true,\n\t\t\"#\": true,\n\t\t\".\": true,\n\t\t\"/\": true,\n\t\t\";\": true,\n\t\t\"?\": true,\n\t\t\"&\": true\n\t};\n\tvar uriTemplateSuffices = {\n\t\t\"*\": true\n\t};\n\tvar urlEscapedChars = /[:/&?#]/;\n\n\tfunction notReallyPercentEncode(string) {\n\t\treturn encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {\n\t\t\treturn \"%\" + doubleEncoded.substring(3);\n\t\t});\n\t}\n\n\tfunction isPercentEncoded(string) {\n\t\tstring = string.replace(/%../g, '');\n\t\treturn encodeURIComponent(string) === string;\n\t}\n\n\tfunction uriTemplateSubstitution(spec) {\n\t\tvar modifier = \"\";\n\t\tif (uriTemplateGlobalModifiers[spec.charAt(0)]) {\n\t\t\tmodifier = spec.charAt(0);\n\t\t\tspec = spec.substring(1);\n\t\t}\n\t\tvar separator = \"\";\n\t\tvar prefix = \"\";\n\t\tvar shouldEscape = true;\n\t\tvar showVariables = false;\n\t\tvar trimEmptyString = false;\n\t\tif (modifier == '+') {\n\t\t\tshouldEscape = false;\n\t\t} else if (modifier == \".\") {\n\t\t\tprefix = \".\";\n\t\t\tseparator = \".\";\n\t\t} else if (modifier == \"/\") {\n\t\t\tprefix = \"/\";\n\t\t\tseparator = \"/\";\n\t\t} else if (modifier == '#') {\n\t\t\tprefix = \"#\";\n\t\t\tshouldEscape = false;\n\t\t} else if (modifier == ';') {\n\t\t\tprefix = \";\";\n\t\t\tseparator = \";\",\n\t\t\tshowVariables = true;\n\t\t\ttrimEmptyString = true;\n\t\t} else if (modifier == '?') {\n\t\t\tprefix = \"?\";\n\t\t\tseparator = \"&\",\n\t\t\tshowVariables = true;\n\t\t} else if (modifier == '&') {\n\t\t\tprefix = \"&\";\n\t\t\tseparator = \"&\",\n\t\t\tshowVariables = true;\n\t\t}\n\n\t\tvar varNames = [];\n\t\tvar varList = spec.split(\",\");\n\t\tvar varSpecs = [];\n\t\tvar varSpecMap = {};\n\t\tfor (var i = 0; i < varList.length; i++) {\n\t\t\tvar varName = varList[i];\n\t\t\tvar truncate = null;\n\t\t\tif (varName.indexOf(\":\") != -1) {\n\t\t\t\tvar parts = varName.split(\":\");\n\t\t\t\tvarName = parts[0];\n\t\t\t\ttruncate = parseInt(parts[1]);\n\t\t\t}\n\t\t\tvar suffices = {};\n\t\t\twhile (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {\n\t\t\t\tsuffices[varName.charAt(varName.length - 1)] = true;\n\t\t\t\tvarName = varName.substring(0, varName.length - 1);\n\t\t\t}\n\t\t\tvar varSpec = {\n\t\t\t\ttruncate: truncate,\n\t\t\t\tname: varName,\n\t\t\t\tsuffices: suffices\n\t\t\t};\n\t\t\tvarSpecs.push(varSpec);\n\t\t\tvarSpecMap[varName] = varSpec;\n\t\t\tvarNames.push(varName);\n\t\t}\n\t\tvar subFunction = function (valueFunction) {\n\t\t\tvar result = \"\";\n\t\t\tvar startIndex = 0;\n\t\t\tfor (var i = 0; i < varSpecs.length; i++) {\n\t\t\t\tvar varSpec = varSpecs[i];\n\t\t\t\tvar value = valueFunction(varSpec.name);\n\t\t\t\tif (value == null || (Array.isArray(value) && value.length == 0) || (typeof value == 'object' && Object.keys(value).length == 0)) {\n\t\t\t\t\tstartIndex++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (i == startIndex) {\n\t\t\t\t\tresult += prefix;\n\t\t\t\t} else {\n\t\t\t\t\tresult += (separator || \",\");\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t}\n\t\t\t\t\tfor (var j = 0; j < value.length; j++) {\n\t\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\t\tresult += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n\t\t\t\t\t\t\tif (varSpec.suffices['*'] && showVariables) {\n\t\t\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[j]);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof value == \"object\") {\n\t\t\t\t\tif (showVariables && !varSpec.suffices['*']) {\n\t\t\t\t\t\tresult += varSpec.name + \"=\";\n\t\t\t\t\t}\n\t\t\t\t\tvar first = true;\n\t\t\t\t\tfor (var key in value) {\n\t\t\t\t\t\tif (!first) {\n\t\t\t\t\t\t\tresult += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(key).replace(/!/g, \"%21\") : notReallyPercentEncode(key);\n\t\t\t\t\t\tresult += varSpec.suffices['*'] ? '=' : \",\";\n\t\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[key]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tresult += varSpec.name;\n\t\t\t\t\t\tif (!trimEmptyString || value != \"\") {\n\t\t\t\t\t\t\tresult += \"=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (varSpec.truncate != null) {\n\t\t\t\t\t\tvalue = value.substring(0, varSpec.truncate);\n\t\t\t\t\t}\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value).replace(/!/g, \"%21\"): notReallyPercentEncode(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tvar guessFunction = function (stringValue, resultObj, strict) {\n\t\t\tif (prefix) {\n\t\t\t\tstringValue = stringValue.substring(prefix.length);\n\t\t\t}\n\t\t\tif (varSpecs.length == 1 && varSpecs[0].suffices['*']) {\n\t\t\t\tvar varSpec = varSpecs[0];\n\t\t\t\tvar varName = varSpec.name;\n\t\t\t\tvar arrayValue = varSpec.suffices['*'] ? stringValue.split(separator || \",\") : [stringValue];\n\t\t\t\tvar hasEquals = (shouldEscape && stringValue.indexOf('=') != -1);\t// There's otherwise no way to distinguish between \"{value*}\" for arrays and objects\n\t\t\t\tfor (var i = 1; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tif (hasEquals && stringValue.indexOf('=') == -1) {\n\t\t\t\t\t\t// Bit of a hack - if we're expecting \"=\" for key/value pairs, and values can't contain \"=\", then assume a value has been accidentally split\n\t\t\t\t\t\tarrayValue[i - 1] += (separator || \",\") + stringValue;\n\t\t\t\t\t\tarrayValue.splice(i, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tif (shouldEscape && stringValue.indexOf('=') != -1) {\n\t\t\t\t\t\thasEquals = true;\n\t\t\t\t\t}\n\t\t\t\t\tvar innerArrayValue = stringValue.split(\",\");\n\t\t\t\t\tif (innerArrayValue.length == 1) {\n\t\t\t\t\t\tarrayValue[i] = innerArrayValue[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tarrayValue[i] = innerArrayValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (showVariables || hasEquals) {\n\t\t\t\t\tvar objectValue = resultObj[varName] || {};\n\t\t\t\t\tfor (var j = 0; j < arrayValue.length; j++) {\n\t\t\t\t\t\tvar innerValue = stringValue;\n\t\t\t\t\t\tif (showVariables && !innerValue) {\n\t\t\t\t\t\t\t// The empty string isn't a valid variable, so if our value is zero-length we have nothing\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof arrayValue[j] == \"string\") {\n\t\t\t\t\t\t\tvar stringValue = arrayValue[j];\n\t\t\t\t\t\t\tvar innerVarName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\t\tvar stringValue = stringValue.substring(innerVarName.length + 1);\n\t\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\t\tif (strict && !isPercentEncoded(stringValue)) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstringValue = decodeURIComponent(stringValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnerValue = stringValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar stringValue = arrayValue[j][0];\n\t\t\t\t\t\t\tvar innerVarName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\t\tvar stringValue = stringValue.substring(innerVarName.length + 1);\n\t\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\t\tif (strict && !isPercentEncoded(stringValue)) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstringValue = decodeURIComponent(stringValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tarrayValue[j][0] = stringValue;\n\t\t\t\t\t\t\tinnerValue = arrayValue[j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\tif (strict && !isPercentEncoded(innerVarName)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnerVarName = decodeURIComponent(innerVarName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (objectValue[innerVarName] !== undefined) {\n\t\t\t\t\t\t\tif (Array.isArray(objectValue[innerVarName])) {\n\t\t\t\t\t\t\t\tobjectValue[innerVarName].push(innerValue);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tobjectValue[innerVarName] = [objectValue[innerVarName], innerValue];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobjectValue[innerVarName] = innerValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Object.keys(objectValue).length == 1 && objectValue[varName] !== undefined) {\n\t\t\t\t\t\tresultObj[varName] = objectValue[varName];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresultObj[varName] = objectValue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\tfor (var j = 0; j < arrayValue.length; j++) {\n\t\t\t\t\t\t\tvar innerArrayValue = arrayValue[j];\n\t\t\t\t\t\t\tif (Array.isArray(innerArrayValue)) {\n\t\t\t\t\t\t\t\tfor (var k = 0; k < innerArrayValue.length; k++) {\n\t\t\t\t\t\t\t\t\tif (strict && !isPercentEncoded(innerArrayValue[k])) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tinnerArrayValue[k] = decodeURIComponent(innerArrayValue[k]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (strict && !isPercentEncoded(innerArrayValue)) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tarrayValue[j] = decodeURIComponent(innerArrayValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resultObj[varName] !== undefined) {\n\t\t\t\t\t\tif (Array.isArray(resultObj[varName])) {\n\t\t\t\t\t\t\tresultObj[varName] = resultObj[varName].concat(arrayValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = [resultObj[varName]].concat(arrayValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (arrayValue.length == 1 && !varSpec.suffices['*']) {\n\t\t\t\t\t\t\tresultObj[varName] = arrayValue[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = arrayValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar arrayValue = (varSpecs.length == 1) ? [stringValue] : stringValue.split(separator || \",\");\n\t\t\t\tvar specIndexMap = {};\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\t// Try from beginning\n\t\t\t\t\tvar firstStarred = 0;\n\t\t\t\t\tfor (; firstStarred < varSpecs.length - 1 && firstStarred < i; firstStarred++) {\n\t\t\t\t\t\tif (varSpecs[firstStarred].suffices['*']) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (firstStarred == i) {\n\t\t\t\t\t\t// The first [i] of them have no \"*\" suffix\n\t\t\t\t\t\tspecIndexMap[i] = i;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Try from the end\n\t\t\t\t\t\tfor (var lastStarred = varSpecs.length - 1; lastStarred > 0 && (varSpecs.length - lastStarred) < (arrayValue.length - i); lastStarred--) {\n\t\t\t\t\t\t\tif (varSpecs[lastStarred].suffices['*']) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((varSpecs.length - lastStarred) == (arrayValue.length - i)) {\n\t\t\t\t\t\t\t// The last [length - i] of them have no \"*\" suffix\n\t\t\t\t\t\t\tspecIndexMap[i] = lastStarred;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Just give up and use the first one\n\t\t\t\t\tspecIndexMap[i] = firstStarred;\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < arrayValue.length; i++) {\n\t\t\t\t\tvar stringValue = arrayValue[i];\n\t\t\t\t\tif (!stringValue && showVariables) {\n\t\t\t\t\t\t// The empty string isn't a valid variable, so if our value is zero-length we have nothing\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar innerArrayValue = stringValue.split(\",\");\n\t\t\t\t\tvar hasEquals = false;\n\n\t\t\t\t\tif (showVariables) {\n\t\t\t\t\t\tvar stringValue = innerArrayValue[0]; // using innerArrayValue\n\t\t\t\t\t\tvar varName = stringValue.split(\"=\", 1)[0];\n\t\t\t\t\t\tvar stringValue = stringValue.substring(varName.length + 1);\n\t\t\t\t\t\tinnerArrayValue[0] = stringValue;\n\t\t\t\t\t\tvar varSpec = varSpecMap[varName] || varSpecs[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar varSpec = varSpecs[specIndexMap[i]];\n\t\t\t\t\t\tvar varName = varSpec.name;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j = 0; j < innerArrayValue.length; j++) {\n\t\t\t\t\t\tif (shouldEscape) {\n\t\t\t\t\t\t\tif (strict && !isPercentEncoded(innerArrayValue[j])) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnerArrayValue[j] = decodeURIComponent(innerArrayValue[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((showVariables || varSpec.suffices['*'])&& resultObj[varName] !== undefined) {\n\t\t\t\t\t\tif (Array.isArray(resultObj[varName])) {\n\t\t\t\t\t\t\tresultObj[varName] = resultObj[varName].concat(innerArrayValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = [resultObj[varName]].concat(innerArrayValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (innerArrayValue.length == 1 && !varSpec.suffices['*']) {\n\t\t\t\t\t\t\tresultObj[varName] = innerArrayValue[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultObj[varName] = innerArrayValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 1;\n\t\t};\n\t\treturn {\n\t\t\tvarNames: varNames,\n\t\t\tprefix: prefix,\n\t\t\tsubstitution: subFunction,\n\t\t\tunSubstitution: guessFunction\n\t\t};\n\t}\n\n\tfunction UriTemplate(template) {\n\t\tif (!(this instanceof UriTemplate)) {\n\t\t\treturn new UriTemplate(template);\n\t\t}\n\t\tvar parts = template.split(\"{\");\n\t\tvar textParts = [parts.shift()];\n\t\tvar prefixes = [];\n\t\tvar substitutions = [];\n\t\tvar unSubstitutions = [];\n\t\tvar varNames = [];\n\t\twhile (parts.length > 0) {\n\t\t\tvar part = parts.shift();\n\t\t\tvar spec = part.split(\"}\")[0];\n\t\t\tvar remainder = part.substring(spec.length + 1);\n\t\t\tvar funcs = uriTemplateSubstitution(spec);\n\t\t\tsubstitutions.push(funcs.substitution);\n\t\t\tunSubstitutions.push(funcs.unSubstitution);\n\t\t\tprefixes.push(funcs.prefix);\n\t\t\ttextParts.push(remainder);\n\t\t\tvarNames = varNames.concat(funcs.varNames);\n\t\t}\n\t\tthis.fill = function (valueFunction) {\n\t\t\tif (valueFunction && typeof valueFunction !== 'function') {\n\t\t\t\tvar value = valueFunction;\n\t\t\t\tvalueFunction = function (varName) {\n\t\t\t\t\treturn value[varName];\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar result = textParts[0];\n\t\t\tfor (var i = 0; i < substitutions.length; i++) {\n\t\t\t\tvar substitution = substitutions[i];\n\t\t\t\tresult += substitution(valueFunction);\n\t\t\t\tresult += textParts[i + 1];\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tthis.fromUri = function (substituted, options) {\n\t\t\toptions = options || {};\n\t\t\tvar result = {};\n\t\t\tfor (var i = 0; i < textParts.length; i++) {\n\t\t\t\tvar part = textParts[i];\n\t\t\t\tif (substituted.substring(0, part.length) !== part) {\n\t\t\t\t\treturn /*undefined*/;\n\t\t\t\t}\n\t\t\t\tsubstituted = substituted.substring(part.length);\n\t\t\t\tif (i >= textParts.length - 1) {\n\t\t\t\t\t// We've run out of input - is there any template left?\n\t\t\t\t\tif (substituted == \"\") {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn /*undefined*/;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar prefix = prefixes[i];\n\t\t\t\tif (prefix && substituted.substring(0, prefix.length) !== prefix) {\n\t\t\t\t\t// All values are optional - if we have a prefix and it doesn't match, move along\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Find the next part to un-substitute\n\t\t\t\tvar nextPart = textParts[i + 1];\n\t\t\t\tvar offset = i;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (offset == textParts.length - 2) {\n\t\t\t\t\t\tvar endPart = substituted.substring(substituted.length - nextPart.length);\n\t\t\t\t\t\tif (endPart !== nextPart) {\n\t\t\t\t\t\t\treturn /*undefined*/;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, substituted.length - nextPart.length);\n\t\t\t\t\t\tsubstituted = endPart;\n\t\t\t\t\t} else if (nextPart) {\n\t\t\t\t\t\tvar nextPartPos = substituted.indexOf(nextPart);\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, nextPartPos);\n\t\t\t\t\t\tsubstituted = substituted.substring(nextPartPos);\n\t\t\t\t\t} else if (prefixes[offset + 1]) {\n\t\t\t\t\t\tvar nextPartPos = substituted.indexOf(prefixes[offset + 1]);\n\t\t\t\t\t\tif (nextPartPos === -1) nextPartPos = substituted.length;\n\t\t\t\t\t\tvar stringValue = substituted.substring(0, nextPartPos);\n\t\t\t\t\t\tsubstituted = substituted.substring(nextPartPos);\n\t\t\t\t\t} else if (textParts.length > offset + 2) {\n\t\t\t\t\t\t// If the separator between this variable and the next is blank (with no prefix), continue onwards\n\t\t\t\t\t\toffset++;\n\t\t\t\t\t\tnextPart = textParts[offset + 1];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar stringValue = substituted;\n\t\t\t\t\t\tsubstituted = \"\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!unSubstitutions[i](stringValue, result, options.strict)) {\n\t\t\t\t\treturn /*undefined*/;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tthis.varNames = varNames;\n\t\tthis.template = template;\n\t}\n\tUriTemplate.prototype = {\n\t\ttoString: function () {\n\t\t\treturn this.template;\n\t\t},\n\t\tfillFromObject: function (obj) {\n\t\t\treturn this.fill(obj);\n\t\t},\n\t\ttest: function (uri, options) {\n\t\t\treturn !!this.fromUri(uri, options)\n\t\t}\n\t};\n\n\treturn UriTemplate;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91cmktdGVtcGxhdGVzL3VyaS10ZW1wbGF0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxLQUFLLElBQTBDO0FBQy9DLEVBQUUsaUNBQXdCLEVBQUUsb0NBQUUsT0FBTztBQUFBO0FBQUE7QUFBQSxrR0FBQztBQUN0QyxHQUFHLEtBQUssRUFJTjtBQUNGLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUksdUJBQXVCO0FBQzNCLGNBQWM7QUFDZCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtB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O0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dlbWluaS1lbXBpcmVzLy4vbm9kZV9tb2R1bGVzL3VyaS10ZW1wbGF0ZXMvdXJpLXRlbXBsYXRlcy5qcz8wYzFlIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoJ3VyaS10ZW1wbGF0ZXMnLCBbXSwgZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpe1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9IGVsc2Uge1xuXHRcdGdsb2JhbC5VcmlUZW1wbGF0ZSA9IGZhY3RvcnkoKTtcblx0fVxufSkodGhpcywgZnVuY3Rpb24gKCkge1xuXHR2YXIgdXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnMgPSB7XG5cdFx0XCIrXCI6IHRydWUsXG5cdFx0XCIjXCI6IHRydWUsXG5cdFx0XCIuXCI6IHRydWUsXG5cdFx0XCIvXCI6IHRydWUsXG5cdFx0XCI7XCI6IHRydWUsXG5cdFx0XCI/XCI6IHRydWUsXG5cdFx0XCImXCI6IHRydWVcblx0fTtcblx0dmFyIHVyaVRlbXBsYXRlU3VmZmljZXMgPSB7XG5cdFx0XCIqXCI6IHRydWVcblx0fTtcblx0dmFyIHVybEVzY2FwZWRDaGFycyA9IC9bOi8mPyNdLztcblxuXHRmdW5jdGlvbiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHN0cmluZykge1xuXHRcdHJldHVybiBlbmNvZGVVUkkoc3RyaW5nKS5yZXBsYWNlKC8lMjVbMC05XVswLTldL2csIGZ1bmN0aW9uIChkb3VibGVFbmNvZGVkKSB7XG5cdFx0XHRyZXR1cm4gXCIlXCIgKyBkb3VibGVFbmNvZGVkLnN1YnN0cmluZygzKTtcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGlzUGVyY2VudEVuY29kZWQoc3RyaW5nKSB7XG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoLyUuLi9nLCAnJyk7XG5cdFx0cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpID09PSBzdHJpbmc7XG5cdH1cblxuXHRmdW5jdGlvbiB1cmlUZW1wbGF0ZVN1YnN0aXR1dGlvbihzcGVjKSB7XG5cdFx0dmFyIG1vZGlmaWVyID0gXCJcIjtcblx0XHRpZiAodXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnNbc3BlYy5jaGFyQXQoMCldKSB7XG5cdFx0XHRtb2RpZmllciA9IHNwZWMuY2hhckF0KDApO1xuXHRcdFx0c3BlYyA9IHNwZWMuc3Vic3RyaW5nKDEpO1xuXHRcdH1cblx0XHR2YXIgc2VwYXJhdG9yID0gXCJcIjtcblx0XHR2YXIgcHJlZml4ID0gXCJcIjtcblx0XHR2YXIgc2hvdWxkRXNjYXBlID0gdHJ1ZTtcblx0XHR2YXIgc2hvd1ZhcmlhYmxlcyA9IGZhbHNlO1xuXHRcdHZhciB0cmltRW1wdHlTdHJpbmcgPSBmYWxzZTtcblx0XHRpZiAobW9kaWZpZXIgPT0gJysnKSB7XG5cdFx0XHRzaG91bGRFc2NhcGUgPSBmYWxzZTtcblx0XHR9IGVsc2UgaWYgKG1vZGlmaWVyID09IFwiLlwiKSB7XG5cdFx0XHRwcmVmaXggPSBcIi5cIjtcblx0XHRcdHNlcGFyYXRvciA9IFwiLlwiO1xuXHRcdH0gZWxzZSBpZiAobW9kaWZpZXIgPT0gXCIvXCIpIHtcblx0XHRcdHByZWZpeCA9IFwiL1wiO1xuXHRcdFx0c2VwYXJhdG9yID0gXCIvXCI7XG5cdFx0fSBlbHNlIGlmIChtb2RpZmllciA9PSAnIycpIHtcblx0XHRcdHByZWZpeCA9IFwiI1wiO1xuXHRcdFx0c2hvdWxkRXNjYXBlID0gZmFsc2U7XG5cdFx0fSBlbHNlIGlmIChtb2RpZmllciA9PSAnOycpIHtcblx0XHRcdHByZWZpeCA9IFwiO1wiO1xuXHRcdFx0c2VwYXJhdG9yID0gXCI7XCIsXG5cdFx0XHRzaG93VmFyaWFibGVzID0gdHJ1ZTtcblx0XHRcdHRyaW1FbXB0eVN0cmluZyA9IHRydWU7XG5cdFx0fSBlbHNlIGlmIChtb2RpZmllciA9PSAnPycpIHtcblx0XHRcdHByZWZpeCA9IFwiP1wiO1xuXHRcdFx0c2VwYXJhdG9yID0gXCImXCIsXG5cdFx0XHRzaG93VmFyaWFibGVzID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKG1vZGlmaWVyID09ICcmJykge1xuXHRcdFx0cHJlZml4ID0gXCImXCI7XG5cdFx0XHRzZXBhcmF0b3IgPSBcIiZcIixcblx0XHRcdHNob3dWYXJpYWJsZXMgPSB0cnVlO1xuXHRcdH1cblxuXHRcdHZhciB2YXJOYW1lcyA9IFtdO1xuXHRcdHZhciB2YXJMaXN0ID0gc3BlYy5zcGxpdChcIixcIik7XG5cdFx0dmFyIHZhclNwZWNzID0gW107XG5cdFx0dmFyIHZhclNwZWNNYXAgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZhckxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciB2YXJOYW1lID0gdmFyTGlzdFtpXTtcblx0XHRcdHZhciB0cnVuY2F0ZSA9IG51bGw7XG5cdFx0XHRpZiAodmFyTmFtZS5pbmRleE9mKFwiOlwiKSAhPSAtMSkge1xuXHRcdFx0XHR2YXIgcGFydHMgPSB2YXJOYW1lLnNwbGl0KFwiOlwiKTtcblx0XHRcdFx0dmFyTmFtZSA9IHBhcnRzWzBdO1xuXHRcdFx0XHR0cnVuY2F0ZSA9IHBhcnNlSW50KHBhcnRzWzFdKTtcblx0XHRcdH1cblx0XHRcdHZhciBzdWZmaWNlcyA9IHt9O1xuXHRcdFx0d2hpbGUgKHVyaVRlbXBsYXRlU3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0pIHtcblx0XHRcdFx0c3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0gPSB0cnVlO1xuXHRcdFx0XHR2YXJOYW1lID0gdmFyTmFtZS5zdWJzdHJpbmcoMCwgdmFyTmFtZS5sZW5ndGggLSAxKTtcblx0XHRcdH1cblx0XHRcdHZhciB2YXJTcGVjID0ge1xuXHRcdFx0XHR0cnVuY2F0ZTogdHJ1bmNhdGUsXG5cdFx0XHRcdG5hbWU6IHZhck5hbWUsXG5cdFx0XHRcdHN1ZmZpY2VzOiBzdWZmaWNlc1xuXHRcdFx0fTtcblx0XHRcdHZhclNwZWNzLnB1c2godmFyU3BlYyk7XG5cdFx0XHR2YXJTcGVjTWFwW3Zhck5hbWVdID0gdmFyU3BlYztcblx0XHRcdHZhck5hbWVzLnB1c2godmFyTmFtZSk7XG5cdFx0fVxuXHRcdHZhciBzdWJGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZUZ1bmN0aW9uKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gXCJcIjtcblx0XHRcdHZhciBzdGFydEluZGV4ID0gMDtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdmFyU3BlY3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHZhclNwZWMgPSB2YXJTcGVjc1tpXTtcblx0XHRcdFx0dmFyIHZhbHVlID0gdmFsdWVGdW5jdGlvbih2YXJTcGVjLm5hbWUpO1xuXHRcdFx0XHRpZiAodmFsdWUgPT0gbnVsbCB8fCAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09IDApIHx8ICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PSAwKSkge1xuXHRcdFx0XHRcdHN0YXJ0SW5kZXgrKztcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaSA9PSBzdGFydEluZGV4KSB7XG5cdFx0XHRcdFx0cmVzdWx0ICs9IHByZWZpeDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXN1bHQgKz0gKHNlcGFyYXRvciB8fCBcIixcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdFx0aWYgKHNob3dWYXJpYWJsZXMpIHtcblx0XHRcdFx0XHRcdHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyBcIj1cIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0aWYgKGogPiAwKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAoc2VwYXJhdG9yIHx8IFwiLFwiKSA6IFwiLFwiO1xuXHRcdFx0XHRcdFx0XHRpZiAodmFyU3BlYy5zdWZmaWNlc1snKiddICYmIHNob3dWYXJpYWJsZXMpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgXCI9XCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWVbal0pLnJlcGxhY2UoLyEvZywgXCIlMjFcIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHZhbHVlW2pdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRpZiAoc2hvd1ZhcmlhYmxlcyAmJiAhdmFyU3BlYy5zdWZmaWNlc1snKiddKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgXCI9XCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBmaXJzdCA9IHRydWU7XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRpZiAoIWZpcnN0KSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAoc2VwYXJhdG9yIHx8IFwiLFwiKSA6IFwiLFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Zmlyc3QgPSBmYWxzZTtcblx0XHRcdFx0XHRcdHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQoa2V5KS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZShrZXkpO1xuXHRcdFx0XHRcdFx0cmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/ICc9JyA6IFwiLFwiO1xuXHRcdFx0XHRcdFx0cmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVtrZXldKS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtrZXldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKHNob3dWYXJpYWJsZXMpIHtcblx0XHRcdFx0XHRcdHJlc3VsdCArPSB2YXJTcGVjLm5hbWU7XG5cdFx0XHRcdFx0XHRpZiAoIXRyaW1FbXB0eVN0cmluZyB8fCB2YWx1ZSAhPSBcIlwiKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdCArPSBcIj1cIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHZhclNwZWMudHJ1bmNhdGUgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgdmFyU3BlYy50cnVuY2F0ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLnJlcGxhY2UoLyEvZywgXCIlMjFcIik6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH07XG5cdFx0dmFyIGd1ZXNzRnVuY3Rpb24gPSBmdW5jdGlvbiAoc3RyaW5nVmFsdWUsIHJlc3VsdE9iaiwgc3RyaWN0KSB7XG5cdFx0XHRpZiAocHJlZml4KSB7XG5cdFx0XHRcdHN0cmluZ1ZhbHVlID0gc3RyaW5nVmFsdWUuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHZhclNwZWNzLmxlbmd0aCA9PSAxICYmIHZhclNwZWNzWzBdLnN1ZmZpY2VzWycqJ10pIHtcblx0XHRcdFx0dmFyIHZhclNwZWMgPSB2YXJTcGVjc1swXTtcblx0XHRcdFx0dmFyIHZhck5hbWUgPSB2YXJTcGVjLm5hbWU7XG5cdFx0XHRcdHZhciBhcnJheVZhbHVlID0gdmFyU3BlYy5zdWZmaWNlc1snKiddID8gc3RyaW5nVmFsdWUuc3BsaXQoc2VwYXJhdG9yIHx8IFwiLFwiKSA6IFtzdHJpbmdWYWx1ZV07XG5cdFx0XHRcdHZhciBoYXNFcXVhbHMgPSAoc2hvdWxkRXNjYXBlICYmIHN0cmluZ1ZhbHVlLmluZGV4T2YoJz0nKSAhPSAtMSk7XHQvLyBUaGVyZSdzIG90aGVyd2lzZSBubyB3YXkgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBcInt2YWx1ZSp9XCIgZm9yIGFycmF5cyBhbmQgb2JqZWN0c1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8IGFycmF5VmFsdWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgc3RyaW5nVmFsdWUgPSBhcnJheVZhbHVlW2ldO1xuXHRcdFx0XHRcdGlmIChoYXNFcXVhbHMgJiYgc3RyaW5nVmFsdWUuaW5kZXhPZignPScpID09IC0xKSB7XG5cdFx0XHRcdFx0XHQvLyBCaXQgb2YgYSBoYWNrIC0gaWYgd2UncmUgZXhwZWN0aW5nIFwiPVwiIGZvciBrZXkvdmFsdWUgcGFpcnMsIGFuZCB2YWx1ZXMgY2FuJ3QgY29udGFpbiBcIj1cIiwgdGhlbiBhc3N1bWUgYSB2YWx1ZSBoYXMgYmVlbiBhY2NpZGVudGFsbHkgc3BsaXRcblx0XHRcdFx0XHRcdGFycmF5VmFsdWVbaSAtIDFdICs9IChzZXBhcmF0b3IgfHwgXCIsXCIpICsgc3RyaW5nVmFsdWU7XG5cdFx0XHRcdFx0XHRhcnJheVZhbHVlLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdGktLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheVZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIHN0cmluZ1ZhbHVlID0gYXJyYXlWYWx1ZVtpXTtcblx0XHRcdFx0XHRpZiAoc2hvdWxkRXNjYXBlICYmIHN0cmluZ1ZhbHVlLmluZGV4T2YoJz0nKSAhPSAtMSkge1xuXHRcdFx0XHRcdFx0aGFzRXF1YWxzID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIGlubmVyQXJyYXlWYWx1ZSA9IHN0cmluZ1ZhbHVlLnNwbGl0KFwiLFwiKTtcblx0XHRcdFx0XHRpZiAoaW5uZXJBcnJheVZhbHVlLmxlbmd0aCA9PSAxKSB7XG5cdFx0XHRcdFx0XHRhcnJheVZhbHVlW2ldID0gaW5uZXJBcnJheVZhbHVlWzBdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRhcnJheVZhbHVlW2ldID0gaW5uZXJBcnJheVZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzaG93VmFyaWFibGVzIHx8IGhhc0VxdWFscykge1xuXHRcdFx0XHRcdHZhciBvYmplY3RWYWx1ZSA9IHJlc3VsdE9ialt2YXJOYW1lXSB8fCB7fTtcblx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGFycmF5VmFsdWUubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdHZhciBpbm5lclZhbHVlID0gc3RyaW5nVmFsdWU7XG5cdFx0XHRcdFx0XHRpZiAoc2hvd1ZhcmlhYmxlcyAmJiAhaW5uZXJWYWx1ZSkge1xuXHRcdFx0XHRcdFx0XHQvLyBUaGUgZW1wdHkgc3RyaW5nIGlzbid0IGEgdmFsaWQgdmFyaWFibGUsIHNvIGlmIG91ciB2YWx1ZSBpcyB6ZXJvLWxlbmd0aCB3ZSBoYXZlIG5vdGhpbmdcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGFycmF5VmFsdWVbal0gPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdFx0XHR2YXIgc3RyaW5nVmFsdWUgPSBhcnJheVZhbHVlW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgaW5uZXJWYXJOYW1lID0gc3RyaW5nVmFsdWUuc3BsaXQoXCI9XCIsIDEpWzBdO1xuXHRcdFx0XHRcdFx0XHR2YXIgc3RyaW5nVmFsdWUgPSBzdHJpbmdWYWx1ZS5zdWJzdHJpbmcoaW5uZXJWYXJOYW1lLmxlbmd0aCArIDEpO1xuXHRcdFx0XHRcdFx0XHRpZiAoc2hvdWxkRXNjYXBlKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHN0cmljdCAmJiAhaXNQZXJjZW50RW5jb2RlZChzdHJpbmdWYWx1ZSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0c3RyaW5nVmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoc3RyaW5nVmFsdWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlubmVyVmFsdWUgPSBzdHJpbmdWYWx1ZTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHZhciBzdHJpbmdWYWx1ZSA9IGFycmF5VmFsdWVbal1bMF07XG5cdFx0XHRcdFx0XHRcdHZhciBpbm5lclZhck5hbWUgPSBzdHJpbmdWYWx1ZS5zcGxpdChcIj1cIiwgMSlbMF07XG5cdFx0XHRcdFx0XHRcdHZhciBzdHJpbmdWYWx1ZSA9IHN0cmluZ1ZhbHVlLnN1YnN0cmluZyhpbm5lclZhck5hbWUubGVuZ3RoICsgMSk7XG5cdFx0XHRcdFx0XHRcdGlmIChzaG91bGRFc2NhcGUpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoc3RyaWN0ICYmICFpc1BlcmNlbnRFbmNvZGVkKHN0cmluZ1ZhbHVlKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRzdHJpbmdWYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChzdHJpbmdWYWx1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YXJyYXlWYWx1ZVtqXVswXSA9IHN0cmluZ1ZhbHVlO1xuXHRcdFx0XHRcdFx0XHRpbm5lclZhbHVlID0gYXJyYXlWYWx1ZVtqXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChzaG91bGRFc2NhcGUpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHN0cmljdCAmJiAhaXNQZXJjZW50RW5jb2RlZChpbm5lclZhck5hbWUpKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlubmVyVmFyTmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChpbm5lclZhck5hbWUpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAob2JqZWN0VmFsdWVbaW5uZXJWYXJOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KG9iamVjdFZhbHVlW2lubmVyVmFyTmFtZV0pKSB7XG5cdFx0XHRcdFx0XHRcdFx0b2JqZWN0VmFsdWVbaW5uZXJWYXJOYW1lXS5wdXNoKGlubmVyVmFsdWUpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdG9iamVjdFZhbHVlW2lubmVyVmFyTmFtZV0gPSBbb2JqZWN0VmFsdWVbaW5uZXJWYXJOYW1lXSwgaW5uZXJWYWx1ZV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdG9iamVjdFZhbHVlW2lubmVyVmFyTmFtZV0gPSBpbm5lclZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoT2JqZWN0LmtleXMob2JqZWN0VmFsdWUpLmxlbmd0aCA9PSAxICYmIG9iamVjdFZhbHVlW3Zhck5hbWVdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHJlc3VsdE9ialt2YXJOYW1lXSA9IG9iamVjdFZhbHVlW3Zhck5hbWVdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRPYmpbdmFyTmFtZV0gPSBvYmplY3RWYWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKHNob3VsZEVzY2FwZSkge1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBhcnJheVZhbHVlLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBpbm5lckFycmF5VmFsdWUgPSBhcnJheVZhbHVlW2pdO1xuXHRcdFx0XHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShpbm5lckFycmF5VmFsdWUpKSB7XG5cdFx0XHRcdFx0XHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBpbm5lckFycmF5VmFsdWUubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChzdHJpY3QgJiYgIWlzUGVyY2VudEVuY29kZWQoaW5uZXJBcnJheVZhbHVlW2tdKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpbm5lckFycmF5VmFsdWVba10gPSBkZWNvZGVVUklDb21wb25lbnQoaW5uZXJBcnJheVZhbHVlW2tdKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHN0cmljdCAmJiAhaXNQZXJjZW50RW5jb2RlZChpbm5lckFycmF5VmFsdWUpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGFycmF5VmFsdWVbal0gPSBkZWNvZGVVUklDb21wb25lbnQoaW5uZXJBcnJheVZhbHVlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChyZXN1bHRPYmpbdmFyTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkocmVzdWx0T2JqW3Zhck5hbWVdKSkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRPYmpbdmFyTmFtZV0gPSByZXN1bHRPYmpbdmFyTmFtZV0uY29uY2F0KGFycmF5VmFsdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0T2JqW3Zhck5hbWVdID0gW3Jlc3VsdE9ialt2YXJOYW1lXV0uY29uY2F0KGFycmF5VmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAoYXJyYXlWYWx1ZS5sZW5ndGggPT0gMSAmJiAhdmFyU3BlYy5zdWZmaWNlc1snKiddKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdE9ialt2YXJOYW1lXSA9IGFycmF5VmFsdWVbMF07XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRPYmpbdmFyTmFtZV0gPSBhcnJheVZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIGFycmF5VmFsdWUgPSAodmFyU3BlY3MubGVuZ3RoID09IDEpID8gW3N0cmluZ1ZhbHVlXSA6IHN0cmluZ1ZhbHVlLnNwbGl0KHNlcGFyYXRvciB8fCBcIixcIik7XG5cdFx0XHRcdHZhciBzcGVjSW5kZXhNYXAgPSB7fTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheVZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0Ly8gVHJ5IGZyb20gYmVnaW5uaW5nXG5cdFx0XHRcdFx0dmFyIGZpcnN0U3RhcnJlZCA9IDA7XG5cdFx0XHRcdFx0Zm9yICg7IGZpcnN0U3RhcnJlZCA8IHZhclNwZWNzLmxlbmd0aCAtIDEgJiYgZmlyc3RTdGFycmVkIDwgaTsgZmlyc3RTdGFycmVkKyspIHtcblx0XHRcdFx0XHRcdGlmICh2YXJTcGVjc1tmaXJzdFN0YXJyZWRdLnN1ZmZpY2VzWycqJ10pIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChmaXJzdFN0YXJyZWQgPT0gaSkge1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGZpcnN0IFtpXSBvZiB0aGVtIGhhdmUgbm8gXCIqXCIgc3VmZml4XG5cdFx0XHRcdFx0XHRzcGVjSW5kZXhNYXBbaV0gPSBpO1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIFRyeSBmcm9tIHRoZSBlbmRcblx0XHRcdFx0XHRcdGZvciAodmFyIGxhc3RTdGFycmVkID0gdmFyU3BlY3MubGVuZ3RoIC0gMTsgbGFzdFN0YXJyZWQgPiAwICYmICh2YXJTcGVjcy5sZW5ndGggLSBsYXN0U3RhcnJlZCkgPCAoYXJyYXlWYWx1ZS5sZW5ndGggLSBpKTsgbGFzdFN0YXJyZWQtLSkge1xuXHRcdFx0XHRcdFx0XHRpZiAodmFyU3BlY3NbbGFzdFN0YXJyZWRdLnN1ZmZpY2VzWycqJ10pIHtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCh2YXJTcGVjcy5sZW5ndGggLSBsYXN0U3RhcnJlZCkgPT0gKGFycmF5VmFsdWUubGVuZ3RoIC0gaSkpIHtcblx0XHRcdFx0XHRcdFx0Ly8gVGhlIGxhc3QgW2xlbmd0aCAtIGldIG9mIHRoZW0gaGF2ZSBubyBcIipcIiBzdWZmaXhcblx0XHRcdFx0XHRcdFx0c3BlY0luZGV4TWFwW2ldID0gbGFzdFN0YXJyZWQ7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBKdXN0IGdpdmUgdXAgYW5kIHVzZSB0aGUgZmlyc3Qgb25lXG5cdFx0XHRcdFx0c3BlY0luZGV4TWFwW2ldID0gZmlyc3RTdGFycmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlWYWx1ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBzdHJpbmdWYWx1ZSA9IGFycmF5VmFsdWVbaV07XG5cdFx0XHRcdFx0aWYgKCFzdHJpbmdWYWx1ZSAmJiBzaG93VmFyaWFibGVzKSB7XG5cdFx0XHRcdFx0XHQvLyBUaGUgZW1wdHkgc3RyaW5nIGlzbid0IGEgdmFsaWQgdmFyaWFibGUsIHNvIGlmIG91ciB2YWx1ZSBpcyB6ZXJvLWxlbmd0aCB3ZSBoYXZlIG5vdGhpbmdcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgaW5uZXJBcnJheVZhbHVlID0gc3RyaW5nVmFsdWUuc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRcdHZhciBoYXNFcXVhbHMgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmIChzaG93VmFyaWFibGVzKSB7XG5cdFx0XHRcdFx0XHR2YXIgc3RyaW5nVmFsdWUgPSBpbm5lckFycmF5VmFsdWVbMF07IC8vIHVzaW5nIGlubmVyQXJyYXlWYWx1ZVxuXHRcdFx0XHRcdFx0dmFyIHZhck5hbWUgPSBzdHJpbmdWYWx1ZS5zcGxpdChcIj1cIiwgMSlbMF07XG5cdFx0XHRcdFx0XHR2YXIgc3RyaW5nVmFsdWUgPSBzdHJpbmdWYWx1ZS5zdWJzdHJpbmcodmFyTmFtZS5sZW5ndGggKyAxKTtcblx0XHRcdFx0XHRcdGlubmVyQXJyYXlWYWx1ZVswXSA9IHN0cmluZ1ZhbHVlO1xuXHRcdFx0XHRcdFx0dmFyIHZhclNwZWMgPSB2YXJTcGVjTWFwW3Zhck5hbWVdIHx8IHZhclNwZWNzWzBdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2YXIgdmFyU3BlYyA9IHZhclNwZWNzW3NwZWNJbmRleE1hcFtpXV07XG5cdFx0XHRcdFx0XHR2YXIgdmFyTmFtZSA9IHZhclNwZWMubmFtZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGlubmVyQXJyYXlWYWx1ZS5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0aWYgKHNob3VsZEVzY2FwZSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoc3RyaWN0ICYmICFpc1BlcmNlbnRFbmNvZGVkKGlubmVyQXJyYXlWYWx1ZVtqXSkpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aW5uZXJBcnJheVZhbHVlW2pdID0gZGVjb2RlVVJJQ29tcG9uZW50KGlubmVyQXJyYXlWYWx1ZVtqXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKChzaG93VmFyaWFibGVzIHx8IHZhclNwZWMuc3VmZmljZXNbJyonXSkmJiByZXN1bHRPYmpbdmFyTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkocmVzdWx0T2JqW3Zhck5hbWVdKSkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRPYmpbdmFyTmFtZV0gPSByZXN1bHRPYmpbdmFyTmFtZV0uY29uY2F0KGlubmVyQXJyYXlWYWx1ZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRPYmpbdmFyTmFtZV0gPSBbcmVzdWx0T2JqW3Zhck5hbWVdXS5jb25jYXQoaW5uZXJBcnJheVZhbHVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKGlubmVyQXJyYXlWYWx1ZS5sZW5ndGggPT0gMSAmJiAhdmFyU3BlYy5zdWZmaWNlc1snKiddKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdE9ialt2YXJOYW1lXSA9IGlubmVyQXJyYXlWYWx1ZVswXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdE9ialt2YXJOYW1lXSA9IGlubmVyQXJyYXlWYWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiAxO1xuXHRcdH07XG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhck5hbWVzOiB2YXJOYW1lcyxcblx0XHRcdHByZWZpeDogcHJlZml4LFxuXHRcdFx0c3Vic3RpdHV0aW9uOiBzdWJGdW5jdGlvbixcblx0XHRcdHVuU3Vic3RpdHV0aW9uOiBndWVzc0Z1bmN0aW9uXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIFVyaVRlbXBsYXRlKHRlbXBsYXRlKSB7XG5cdFx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIFVyaVRlbXBsYXRlKSkge1xuXHRcdFx0cmV0dXJuIG5ldyBVcmlUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG5cdFx0fVxuXHRcdHZhciBwYXJ0cyA9IHRlbXBsYXRlLnNwbGl0KFwie1wiKTtcblx0XHR2YXIgdGV4dFBhcnRzID0gW3BhcnRzLnNoaWZ0KCldO1xuXHRcdHZhciBwcmVmaXhlcyA9IFtdO1xuXHRcdHZhciBzdWJzdGl0dXRpb25zID0gW107XG5cdFx0dmFyIHVuU3Vic3RpdHV0aW9ucyA9IFtdO1xuXHRcdHZhciB2YXJOYW1lcyA9IFtdO1xuXHRcdHdoaWxlIChwYXJ0cy5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgcGFydCA9IHBhcnRzLnNoaWZ0KCk7XG5cdFx0XHR2YXIgc3BlYyA9IHBhcnQuc3BsaXQoXCJ9XCIpWzBdO1xuXHRcdFx0dmFyIHJlbWFpbmRlciA9IHBhcnQuc3Vic3RyaW5nKHNwZWMubGVuZ3RoICsgMSk7XG5cdFx0XHR2YXIgZnVuY3MgPSB1cmlUZW1wbGF0ZVN1YnN0aXR1dGlvbihzcGVjKTtcblx0XHRcdHN1YnN0aXR1dGlvbnMucHVzaChmdW5jcy5zdWJzdGl0dXRpb24pO1xuXHRcdFx0dW5TdWJzdGl0dXRpb25zLnB1c2goZnVuY3MudW5TdWJzdGl0dXRpb24pO1xuXHRcdFx0cHJlZml4ZXMucHVzaChmdW5jcy5wcmVmaXgpO1xuXHRcdFx0dGV4dFBhcnRzLnB1c2gocmVtYWluZGVyKTtcblx0XHRcdHZhck5hbWVzID0gdmFyTmFtZXMuY29uY2F0KGZ1bmNzLnZhck5hbWVzKTtcblx0XHR9XG5cdFx0dGhpcy5maWxsID0gZnVuY3Rpb24gKHZhbHVlRnVuY3Rpb24pIHtcblx0XHRcdGlmICh2YWx1ZUZ1bmN0aW9uICYmIHR5cGVvZiB2YWx1ZUZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IHZhbHVlRnVuY3Rpb247XG5cdFx0XHRcdHZhbHVlRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyTmFtZSkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZVt2YXJOYW1lXTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJlc3VsdCA9IHRleHRQYXJ0c1swXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic3RpdHV0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgc3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uc1tpXTtcblx0XHRcdFx0cmVzdWx0ICs9IHN1YnN0aXR1dGlvbih2YWx1ZUZ1bmN0aW9uKTtcblx0XHRcdFx0cmVzdWx0ICs9IHRleHRQYXJ0c1tpICsgMV07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH07XG5cdFx0dGhpcy5mcm9tVXJpID0gZnVuY3Rpb24gKHN1YnN0aXR1dGVkLCBvcHRpb25zKSB7XG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XHRcdHZhciByZXN1bHQgPSB7fTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dFBhcnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJ0ID0gdGV4dFBhcnRzW2ldO1xuXHRcdFx0XHRpZiAoc3Vic3RpdHV0ZWQuc3Vic3RyaW5nKDAsIHBhcnQubGVuZ3RoKSAhPT0gcGFydCkge1xuXHRcdFx0XHRcdHJldHVybiAvKnVuZGVmaW5lZCovO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN1YnN0aXR1dGVkID0gc3Vic3RpdHV0ZWQuc3Vic3RyaW5nKHBhcnQubGVuZ3RoKTtcblx0XHRcdFx0aWYgKGkgPj0gdGV4dFBhcnRzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHQvLyBXZSd2ZSBydW4gb3V0IG9mIGlucHV0IC0gaXMgdGhlcmUgYW55IHRlbXBsYXRlIGxlZnQ/XG5cdFx0XHRcdFx0aWYgKHN1YnN0aXR1dGVkID09IFwiXCIpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLyp1bmRlZmluZWQqLztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG5cdFx0XHRcdGlmIChwcmVmaXggJiYgc3Vic3RpdHV0ZWQuc3Vic3RyaW5nKDAsIHByZWZpeC5sZW5ndGgpICE9PSBwcmVmaXgpIHtcblx0XHRcdFx0XHQvLyBBbGwgdmFsdWVzIGFyZSBvcHRpb25hbCAtIGlmIHdlIGhhdmUgYSBwcmVmaXggYW5kIGl0IGRvZXNuJ3QgbWF0Y2gsIG1vdmUgYWxvbmdcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcGFydCB0byB1bi1zdWJzdGl0dXRlXG5cdFx0XHRcdHZhciBuZXh0UGFydCA9IHRleHRQYXJ0c1tpICsgMV07XG5cdFx0XHRcdHZhciBvZmZzZXQgPSBpO1xuXHRcdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRcdGlmIChvZmZzZXQgPT0gdGV4dFBhcnRzLmxlbmd0aCAtIDIpIHtcblx0XHRcdFx0XHRcdHZhciBlbmRQYXJ0ID0gc3Vic3RpdHV0ZWQuc3Vic3RyaW5nKHN1YnN0aXR1dGVkLmxlbmd0aCAtIG5leHRQYXJ0Lmxlbmd0aCk7XG5cdFx0XHRcdFx0XHRpZiAoZW5kUGFydCAhPT0gbmV4dFBhcnQpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIC8qdW5kZWZpbmVkKi87XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgc3RyaW5nVmFsdWUgPSBzdWJzdGl0dXRlZC5zdWJzdHJpbmcoMCwgc3Vic3RpdHV0ZWQubGVuZ3RoIC0gbmV4dFBhcnQubGVuZ3RoKTtcblx0XHRcdFx0XHRcdHN1YnN0aXR1dGVkID0gZW5kUGFydDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG5leHRQYXJ0KSB7XG5cdFx0XHRcdFx0XHR2YXIgbmV4dFBhcnRQb3MgPSBzdWJzdGl0dXRlZC5pbmRleE9mKG5leHRQYXJ0KTtcblx0XHRcdFx0XHRcdHZhciBzdHJpbmdWYWx1ZSA9IHN1YnN0aXR1dGVkLnN1YnN0cmluZygwLCBuZXh0UGFydFBvcyk7XG5cdFx0XHRcdFx0XHRzdWJzdGl0dXRlZCA9IHN1YnN0aXR1dGVkLnN1YnN0cmluZyhuZXh0UGFydFBvcyk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwcmVmaXhlc1tvZmZzZXQgKyAxXSkge1xuXHRcdFx0XHRcdFx0dmFyIG5leHRQYXJ0UG9zID0gc3Vic3RpdHV0ZWQuaW5kZXhPZihwcmVmaXhlc1tvZmZzZXQgKyAxXSk7XG5cdFx0XHRcdFx0XHRpZiAobmV4dFBhcnRQb3MgPT09IC0xKSBuZXh0UGFydFBvcyA9IHN1YnN0aXR1dGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHZhciBzdHJpbmdWYWx1ZSA9IHN1YnN0aXR1dGVkLnN1YnN0cmluZygwLCBuZXh0UGFydFBvcyk7XG5cdFx0XHRcdFx0XHRzdWJzdGl0dXRlZCA9IHN1YnN0aXR1dGVkLnN1YnN0cmluZyhuZXh0UGFydFBvcyk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0ZXh0UGFydHMubGVuZ3RoID4gb2Zmc2V0ICsgMikge1xuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHNlcGFyYXRvciBiZXR3ZWVuIHRoaXMgdmFyaWFibGUgYW5kIHRoZSBuZXh0IGlzIGJsYW5rICh3aXRoIG5vIHByZWZpeCksIGNvbnRpbnVlIG9ud2FyZHNcblx0XHRcdFx0XHRcdG9mZnNldCsrO1xuXHRcdFx0XHRcdFx0bmV4dFBhcnQgPSB0ZXh0UGFydHNbb2Zmc2V0ICsgMV07XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFyIHN0cmluZ1ZhbHVlID0gc3Vic3RpdHV0ZWQ7XG5cdFx0XHRcdFx0XHRzdWJzdGl0dXRlZCA9IFwiXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghdW5TdWJzdGl0dXRpb25zW2ldKHN0cmluZ1ZhbHVlLCByZXN1bHQsIG9wdGlvbnMuc3RyaWN0KSkge1xuXHRcdFx0XHRcdHJldHVybiAvKnVuZGVmaW5lZCovO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0XHR0aGlzLnZhck5hbWVzID0gdmFyTmFtZXM7XG5cdFx0dGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuXHR9XG5cdFVyaVRlbXBsYXRlLnByb3RvdHlwZSA9IHtcblx0XHR0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMudGVtcGxhdGU7XG5cdFx0fSxcblx0XHRmaWxsRnJvbU9iamVjdDogZnVuY3Rpb24gKG9iaikge1xuXHRcdFx0cmV0dXJuIHRoaXMuZmlsbChvYmopO1xuXHRcdH0sXG5cdFx0dGVzdDogZnVuY3Rpb24gKHVyaSwgb3B0aW9ucykge1xuXHRcdFx0cmV0dXJuICEhdGhpcy5mcm9tVXJpKHVyaSwgb3B0aW9ucylcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIFVyaVRlbXBsYXRlO1xufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/uri-templates/uri-templates.js\n");

/***/ })

};
;