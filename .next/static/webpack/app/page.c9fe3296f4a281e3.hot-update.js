"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./data/predefinedContent.ts":
/*!***********************************!*\
  !*** ./data/predefinedContent.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AGE_PROGRESSION: function() { return /* binding */ AGE_PROGRESSION; },\n/* harmony export */   PREDEFINED_BANNER_URLS: function() { return /* binding */ PREDEFINED_BANNER_URLS; },\n/* harmony export */   PREDEFINED_CIVILIZATIONS: function() { return /* binding */ PREDEFINED_CIVILIZATIONS; },\n/* harmony export */   PREDEFINED_EVENTS: function() { return /* binding */ PREDEFINED_EVENTS; }\n/* harmony export */ });\n// In a real project, these images would be located in an `/assets` folder.\n// Using a placeholder service with specific seeds to simulate having unique, static images for each civilization.\nconst PREDEFINED_CIVILIZATIONS = [\n    {\n        name: \"The Sunstone Clan\",\n        lore: \"Masters of stonework, their cities are carved directly into mountainsides.\",\n        bonus: \"Stone gathering is 20% faster.\",\n        uniqueUnit: {\n            name: \"Granite Guard\",\n            description: \"Heavily armored infantry that excels at defense.\"\n        }\n    },\n    {\n        name: \"The River Nomads\",\n        lore: \"A fluid society that follows the great rivers, their culture as rich as the fertile plains.\",\n        bonus: \"Farms produce food 15% faster.\",\n        uniqueUnit: {\n            name: \"River-Watch Rider\",\n            description: \"Fast cavalry adept at scouting and harassing enemy lines.\"\n        }\n    },\n    {\n        name: \"The Ironwood Sentinels\",\n        lore: \"Living in deep forests, they have mastered the art of woodwork and archery.\",\n        bonus: \"Woodcutting is 25% faster.\",\n        uniqueUnit: {\n            name: \"Ironwood Archer\",\n            description: \"A long-ranged archer with superior damage against other archers.\"\n        }\n    },\n    {\n        name: \"The Gilded Syndicate\",\n        lore: \"A civilization built on trade and wealth, their markets are the envy of the world.\",\n        bonus: \"Gold mining generates 10% more resources.\",\n        uniqueUnit: {\n            name: \"Gilded Companion\",\n            description: \"A mercenary unit that costs only gold and is quick to train.\"\n        }\n    }\n];\n// Banner URLs corresponding to the civilizations above.\nconst PREDEFINED_BANNER_URLS = [\n    \"https://picsum.photos/seed/sunstone/512/512\",\n    \"https://picsum.photos/seed/riverfolk/512/512\",\n    \"https://picsum.photos/seed/ironwood/512/512\",\n    \"https://picsum.photos/seed/gilded/512/512\"\n];\nconst PREDEFINED_EVENTS = [\n    {\n        message: \"A traveling merchant has arrived, offering a bulk discount on wood.\",\n        choices: [\n            {\n                text: \"Buy 100 Wood\",\n                cost: {\n                    gold: 40\n                },\n                successEffects: {\n                    resource: \"wood\",\n                    amount: 100,\n                    log: \"The deal is made. The wood is added to your stockpile.\"\n                }\n            },\n            {\n                text: \"Politely decline\",\n                successEffects: {\n                    resource: \"none\",\n                    amount: 0,\n                    log: \"You send the merchant on their way.\"\n                }\n            }\n        ]\n    },\n    {\n        message: \"Your scouts have found an ancient, treasure-filled ruin. It seems risky to explore.\",\n        choices: [\n            {\n                text: \"Send an expedition (70% success)\",\n                cost: {\n                    food: 50\n                },\n                successChance: 0.7,\n                successEffects: {\n                    resource: \"gold\",\n                    amount: [\n                        150,\n                        250\n                    ],\n                    log: \"Success! Your explorers return with a hoard of ancient gold.\"\n                },\n                failureEffects: {\n                    resource: \"food\",\n                    amount: 0,\n                    log: \"The expedition fails, and some supplies are lost, but everyone returns safely.\"\n                }\n            },\n            {\n                text: \"Leave it be\",\n                successEffects: {\n                    resource: \"none\",\n                    amount: 0,\n                    log: \"You decide the potential treasure is not worth the risk.\"\n                }\n            }\n        ]\n    },\n    {\n        message: \"Unusually rich soil has been discovered nearby. A perfect place for a temporary farm.\",\n        choices: [\n            {\n                text: \"Exploit the fertile ground\",\n                successEffects: {\n                    resource: \"food\",\n                    amount: [\n                        200,\n                        300\n                    ],\n                    log: \"Your workers quickly establish a farm and bring in a massive surplus of food.\"\n                }\n            }\n        ]\n    },\n    {\n        message: \"A fire breaks out in one of your storage huts!\",\n        choices: [\n            {\n                text: \"Organize a bucket brigade (80% success)\",\n                successChance: 0.8,\n                successEffects: {\n                    resource: \"wood\",\n                    amount: -25,\n                    log: \"The fire is quickly put out, with only minor losses.\"\n                },\n                failureEffects: {\n                    resource: \"wood\",\n                    amount: [\n                        -100,\n                        -150\n                    ],\n                    log: \"The fire rages out of control before being contained, destroying a large amount of wood.\"\n                }\n            },\n            {\n                text: \"Prioritize saving villagers\",\n                successEffects: {\n                    resource: \"wood\",\n                    amount: [\n                        -80,\n                        -120\n                    ],\n                    log: \"Everyone is safe, but the storage hut and its contents are mostly lost.\"\n                }\n            }\n        ]\n    },\n    {\n        message: \"A neighboring clan sends an envoy with a gift to foster good relations.\",\n        choices: [\n            {\n                text: \"Accept the gift of stone\",\n                successEffects: {\n                    resource: \"stone\",\n                    amount: 75,\n                    log: \"You accept the gift, strengthening ties with your neighbors.\"\n                }\n            },\n            {\n                text: \"Accept the gift of food\",\n                successEffects: {\n                    resource: \"food\",\n                    amount: 100,\n                    log: \"You accept the gift, a welcome addition to your stores.\"\n                }\n            }\n        ]\n    }\n];\nconst AGE_PROGRESSION = {\n    \"Nomadic Age\": {\n        nextAgeName: \"Feudal Age\",\n        description: \"Society organizes under lords and vassals, unlocking new military and economic structures.\"\n    },\n    \"Feudal Age\": {\n        nextAgeName: \"Castle Age\",\n        description: \"Powerful fortifications and advanced siege weaponry mark this new era of warfare and defense.\"\n    },\n    \"Castle Age\": {\n        nextAgeName: \"Imperial Age\",\n        description: \"Your civilization becomes a true empire, with unparalleled economic and military might.\"\n    },\n    \"Imperial Age\": {\n        nextAgeName: \"Post-Imperial Age\",\n        description: \"The pinnacle of technology and culture. All paths are now open to you.\"\n    },\n    \"default\": {\n        nextAgeName: \"Age of Legends\",\n        description: \"Your civilization transcends history and becomes a legend.\"\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/predefinedContent.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./types.ts\");\n/* harmony import */ var _services_geminiService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/geminiService */ \"(app-pages-browser)/./services/geminiService.ts\");\n/* harmony import */ var _services_dbService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/dbService */ \"(app-pages-browser)/./services/dbService.ts\");\n/* harmony import */ var _services_nameService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/nameService */ \"(app-pages-browser)/./services/nameService.ts\");\n/* harmony import */ var _components_GameUI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/GameUI */ \"(app-pages-browser)/./components/GameUI.tsx\");\n/* harmony import */ var _components_StartScreen__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/StartScreen */ \"(app-pages-browser)/./components/StartScreen.tsx\");\n/* harmony import */ var _components_LoadingScreen__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/LoadingScreen */ \"(app-pages-browser)/./components/LoadingScreen.tsx\");\n/* harmony import */ var _components_BuildPanel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/BuildPanel */ \"(app-pages-browser)/./components/BuildPanel.tsx\");\n/* harmony import */ var _components_NotificationManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/NotificationManager */ \"(app-pages-browser)/./components/NotificationManager.tsx\");\n/* harmony import */ var _components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/UnitManagementPanel */ \"(app-pages-browser)/./components/UnitManagementPanel.tsx\");\n/* harmony import */ var _components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/BuildingManagementPanel */ \"(app-pages-browser)/./components/BuildingManagementPanel.tsx\");\n/* harmony import */ var _components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/components/ResourceAssignmentPanel */ \"(app-pages-browser)/./components/ResourceAssignmentPanel.tsx\");\n/* harmony import */ var _components_SettingsPanel__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/components/SettingsPanel */ \"(app-pages-browser)/./components/SettingsPanel.tsx\");\n/* harmony import */ var _components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/components/CivilizationPanel */ \"(app-pages-browser)/./components/CivilizationPanel.tsx\");\n/* harmony import */ var _components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/components/AllBuildingsPanel */ \"(app-pages-browser)/./components/AllBuildingsPanel.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst BUILDINGS_INFO = [\n    {\n        id: \"houses\",\n        name: \"House\",\n        description: \"Increases population capacity by 5.\",\n        cost: {\n            wood: 50\n        },\n        isUnique: false,\n        buildTime: 15\n    },\n    {\n        id: \"barracks\",\n        name: \"Barracks\",\n        description: \"Allows training of Swordsmen.\",\n        cost: {\n            wood: 150,\n            stone: 50\n        },\n        isUnique: true,\n        buildTime: 60\n    },\n    {\n        id: \"archeryRange\",\n        name: \"Archery Range\",\n        description: \"Allows training of Archers.\",\n        cost: {\n            wood: 175\n        },\n        isUnique: true,\n        buildTime: 60\n    },\n    {\n        id: \"stable\",\n        name: \"Stables\",\n        description: \"Allows training of Knights.\",\n        cost: {\n            wood: 175,\n            gold: 75\n        },\n        isUnique: true,\n        buildTime: 75\n    },\n    {\n        id: \"siegeWorkshop\",\n        name: \"Siege Workshop\",\n        description: \"Constructs powerful Catapults.\",\n        cost: {\n            wood: 200,\n            gold: 150\n        },\n        isUnique: true,\n        buildTime: 90\n    },\n    {\n        id: \"blacksmith\",\n        name: \"Blacksmith\",\n        description: \"Researches infantry and cavalry upgrades.\",\n        cost: {\n            wood: 100,\n            gold: 100\n        },\n        isUnique: true,\n        buildTime: 45\n    },\n    {\n        id: \"watchTower\",\n        name: \"Watch Tower\",\n        description: \"Provides defense against raids.\",\n        cost: {\n            stone: 125\n        },\n        isUnique: true,\n        buildTime: 45\n    },\n    {\n        id: \"townCenter\",\n        name: \"Town Center\",\n        description: \"The heart of your settlement.\",\n        cost: {},\n        isUnique: true,\n        buildTime: 0\n    }\n];\nconst UNIT_INFO = [\n    {\n        id: \"swordsman\",\n        name: \"Swordsman\",\n        description: \"Basic melee infantry.\",\n        cost: {\n            food: 60,\n            gold: 20\n        },\n        requiredBuilding: \"barracks\",\n        trainTime: 22\n    },\n    {\n        id: \"archer\",\n        name: \"Archer\",\n        description: \"Ranged unit effective against infantry.\",\n        cost: {\n            food: 30,\n            wood: 40\n        },\n        requiredBuilding: \"archeryRange\",\n        trainTime: 25\n    },\n    {\n        id: \"knight\",\n        name: \"Knight\",\n        description: \"Fast and powerful cavalry.\",\n        cost: {\n            food: 60,\n            gold: 75\n        },\n        requiredBuilding: \"stable\",\n        trainTime: 30\n    },\n    {\n        id: \"catapult\",\n        name: \"Catapult\",\n        description: \"Siege engine devastating to buildings.\",\n        cost: {\n            wood: 150,\n            gold: 150\n        },\n        requiredBuilding: \"siegeWorkshop\",\n        trainTime: 45\n    }\n];\nconst GATHER_INFO = {\n    food: {\n        rate: 10\n    },\n    wood: {\n        rate: 8\n    },\n    gold: {\n        rate: 5\n    },\n    stone: {\n        rate: 6\n    }\n};\nconst initialBuildingsState = {\n    houses: [],\n    barracks: [],\n    archeryRange: [],\n    stable: [],\n    siegeWorkshop: [],\n    blacksmith: [],\n    watchTower: [],\n    townCenter: []\n};\nconst MAP_DIMENSIONS = {\n    width: 25,\n    height: 18\n};\nconst GamePage = ()=>{\n    var _buildings_townCenter;\n    _s();\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n    const [civilization, setCivilization] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resources, setResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        food: 200,\n        wood: 150,\n        gold: 50,\n        stone: 100\n    });\n    const [units, setUnits] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        villagers: [],\n        military: []\n    });\n    const [buildings, setBuildings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialBuildingsState);\n    const [currentAge, setCurrentAge] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Nomadic Age\");\n    const [gameLog, setGameLog] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentEvent, setCurrentEvent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resourceDeltas, setResourceDeltas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [activityStatus, setActivityStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Your story begins...\");\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [unlimitedResources, setUnlimitedResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [allSaves, setAllSaves] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentSaveName, setCurrentSaveName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [playerAction, setPlayerAction] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeTasks, setActiveTasks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [constructingBuildings, setConstructingBuildings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [resourceNodes, setResourceNodes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [panelOpacity, setPanelOpacity] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1.0);\n    // Panel States\n    const [buildPanelState, setBuildPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        villagerId: null,\n        anchorRect: null\n    });\n    const [unitManagementPanel, setUnitManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        anchorRect: null\n    });\n    const [buildingManagementPanel, setBuildingManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        anchorRect: null\n    });\n    const [allBuildingsPanel, setAllBuildingsPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [assignmentPanelState, setAssignmentPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        targetId: null,\n        targetType: null,\n        anchorRect: null\n    });\n    const [settingsPanelState, setSettingsPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [civPanelState, setCivPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const deltaTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const eventTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const population = {\n        current: units.villagers.length + units.military.length,\n        capacity: (((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter.length) > 0 ? 20 : 0) + buildings.houses.length * 5\n    };\n    const fetchSaves = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        const names = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllSaveNames)();\n        setAllSaves(names);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchSaves();\n    }, [\n        fetchSaves\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && civilization && currentSaveName) {\n            const fullState = {\n                civilization,\n                resources,\n                units,\n                buildings,\n                currentAge,\n                gameLog,\n                activeTasks,\n                constructingBuildings,\n                resourceNodes\n            };\n            (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveGameState)(currentSaveName, fullState);\n        }\n    }, [\n        civilization,\n        resources,\n        units,\n        buildings,\n        currentAge,\n        gameLog,\n        gameState,\n        currentSaveName,\n        activeTasks,\n        constructingBuildings,\n        resourceNodes\n    ]);\n    const addNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n        const id = \"\".concat(Date.now(), \"-\").concat(Math.random());\n        setNotifications((prev)=>[\n                ...prev,\n                {\n                    id,\n                    message\n                }\n            ]);\n    }, []);\n    const removeNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{\n        setNotifications((prev)=>prev.filter((n)=>n.id !== id));\n    }, []);\n    const addToLog = (message, icon)=>{\n        setGameLog((prev)=>[\n                {\n                    id: \"\".concat(Date.now(), \"-\").concat(Math.random()),\n                    message,\n                    icon\n                },\n                ...prev.slice(0, 19)\n            ]);\n    };\n    const updateResources = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((deltas)=>{\n        setResources((prev)=>{\n            const newResources = {\n                ...prev\n            };\n            for(const key in deltas){\n                const resourceKey = key;\n                var _deltas_resourceKey;\n                newResources[resourceKey] = Math.max(0, newResources[resourceKey] + ((_deltas_resourceKey = deltas[resourceKey]) !== null && _deltas_resourceKey !== void 0 ? _deltas_resourceKey : 0));\n            }\n            return newResources;\n        });\n        setResourceDeltas((prev)=>({\n                ...prev,\n                ...deltas\n            }));\n        for(const key in deltas){\n            const resourceKey = key;\n            if (deltaTimeoutRef.current[resourceKey]) {\n                window.clearTimeout(deltaTimeoutRef.current[resourceKey]);\n            }\n            deltaTimeoutRef.current[resourceKey] = window.setTimeout(()=>{\n                setResourceDeltas((prev)=>{\n                    const newDeltas = {\n                        ...prev\n                    };\n                    delete newDeltas[resourceKey];\n                    return newDeltas;\n                });\n            }, 1500);\n        }\n    }, []);\n    const handleNewEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!civilization || currentEvent || activeTasks.length > 0) return;\n        addToLog(\"A new chapter unfolds...\", \"event\");\n        const event = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedGameEvent)();\n        setCurrentEvent(event);\n        setActivityStatus(\"A new event requires your attention!\");\n    }, [\n        civilization,\n        currentEvent,\n        activeTasks.length\n    ]);\n    const scheduleNextEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (eventTimerRef.current) {\n            clearTimeout(eventTimerRef.current);\n        }\n        const nextEventTime = (45 + Math.random() * 45) * 1000; // 45-90 seconds\n        eventTimerRef.current = setTimeout(()=>handleNewEvent(), nextEventTime);\n    }, [\n        handleNewEvent\n    ]);\n    const generateResourceNodes = (existingPositions)=>{\n        const nodes = [];\n        const types = [\n            \"food\",\n            \"wood\",\n            \"gold\",\n            \"stone\"\n        ];\n        const numNodes = 20 + Math.floor(Math.random() * 10);\n        for(let i = 0; i < numNodes; i++){\n            let pos;\n            do {\n                pos = {\n                    x: Math.floor(Math.random() * MAP_DIMENSIONS.width),\n                    y: Math.floor(Math.random() * MAP_DIMENSIONS.height)\n                };\n            }while (existingPositions.has(\"\".concat(pos.x, \",\").concat(pos.y)));\n            existingPositions.add(\"\".concat(pos.x, \",\").concat(pos.y));\n            const type = types[Math.floor(Math.random() * types.length)];\n            const amount = Math.floor(Math.random() * (2500 - 500 + 1)) + 500;\n            nodes.push({\n                id: \"\".concat(Date.now(), \"-node-\").concat(i),\n                type,\n                position: pos,\n                amount,\n                assignedVillagers: []\n            });\n        }\n        return nodes;\n    };\n    const handleStartNewGame = (saveName)=>{\n        if (allSaves.includes(saveName)) {\n            addNotification('A saga named \"'.concat(saveName, '\" already exists.'));\n            return;\n        }\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n        setCurrentSaveName(saveName);\n        const civ = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedCivilization)();\n        setCivilization(civ);\n        setResources({\n            food: 200,\n            wood: 150,\n            gold: 50,\n            stone: 100\n        });\n        const initialVillagerNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", 3);\n        const initialVillagers = initialVillagerNames.map((name)=>({\n                id: \"\".concat(Date.now(), \"-\").concat(name),\n                name\n            }));\n        setUnits({\n            villagers: initialVillagers,\n            military: []\n        });\n        const [initialTCName] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n        const tcPosition = {\n            x: Math.floor(MAP_DIMENSIONS.width / 2),\n            y: Math.floor(MAP_DIMENSIONS.height / 2)\n        };\n        const initialTC = {\n            id: \"\".concat(Date.now(), \"-tc\"),\n            name: initialTCName,\n            position: tcPosition\n        };\n        setBuildings({\n            ...initialBuildingsState,\n            townCenter: [\n                initialTC\n            ]\n        });\n        setResourceNodes(generateResourceNodes(new Set([\n            \"\".concat(tcPosition.x, \",\").concat(tcPosition.y)\n        ])));\n        setCurrentAge(\"Nomadic Age\");\n        setGameLog([]);\n        setCurrentEvent(null);\n        setUnlimitedResources(false);\n        setActiveTasks([]);\n        setConstructingBuildings([]);\n        addToLog(\"\".concat(civ.name, \" has been founded!\"), \"system\");\n        addToLog(\"Your story begins...\", \"system\");\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        setActivityStatus(\"Your settlement awaits your command.\");\n        fetchSaves();\n    };\n    const getVillagerTaskDetails = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        const task = activeTasks.find((t)=>{\n            var _t_payload_villagerIds, _t_payload;\n            return (_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : (_t_payload_villagerIds = _t_payload.villagerIds) === null || _t_payload_villagerIds === void 0 ? void 0 : _t_payload_villagerIds.includes(villagerId);\n        });\n        if (task) {\n            if (task.type === \"build\") {\n                const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === task.payload.buildingType);\n                return \"Busy: Constructing \".concat((buildingInfo === null || buildingInfo === void 0 ? void 0 : buildingInfo.name) || \"a building\");\n            }\n            if (task.type === \"gather\") {\n                const node = resourceNodes.find((n)=>n.id === task.payload.resourceNodeId);\n                return \"Busy: Gathering \".concat((node === null || node === void 0 ? void 0 : node.type) || \"resources\");\n            }\n        }\n        return \"Idle\";\n    }, [\n        activeTasks,\n        resourceNodes\n    ]);\n    const isVillagerBusy = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        return getVillagerTaskDetails(villagerId) !== \"Idle\";\n    }, [\n        getVillagerTaskDetails\n    ]);\n    const handleResumeGame = async (saveName)=>{\n        const savedState = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.loadGameState)(saveName);\n        if (savedState) {\n            var _savedState_units;\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n            setCurrentSaveName(saveName);\n            setCivilization(savedState.civilization);\n            setResources(savedState.resources);\n            if ((_savedState_units = savedState.units) === null || _savedState_units === void 0 ? void 0 : _savedState_units.soldiers) {\n                const migratedMilitary = savedState.units.soldiers.map((s)=>({\n                        ...s,\n                        unitType: \"swordsman\"\n                    }));\n                setUnits({\n                    villagers: savedState.units.villagers || [],\n                    military: migratedMilitary\n                });\n            } else {\n                setUnits(savedState.units || {\n                    villagers: [],\n                    military: []\n                });\n            }\n            let finalBuildings = {\n                ...initialBuildingsState,\n                ...savedState.buildings || {}\n            };\n            const occupiedCells = new Set(Object.values(finalBuildings).flat().map((b)=>\"\".concat(b.position.x, \",\").concat(b.position.y)));\n            if (!finalBuildings.townCenter || finalBuildings.townCenter.length === 0) {\n                let tcPos = {\n                    x: 10,\n                    y: 5\n                };\n                while(occupiedCells.has(\"\".concat(tcPos.x, \",\").concat(tcPos.y))){\n                    tcPos.x++;\n                }\n                const [tcName] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                finalBuildings.townCenter = [\n                    {\n                        id: \"\".concat(Date.now(), \"-tc\"),\n                        name: tcName,\n                        position: tcPos\n                    }\n                ];\n                occupiedCells.add(\"\".concat(tcPos.x, \",\").concat(tcPos.y));\n            }\n            const firstBuilding = Object.values(finalBuildings).flat()[0];\n            if (firstBuilding && typeof firstBuilding === \"object\" && !(\"position\" in firstBuilding)) {\n                const migrated = {\n                    ...initialBuildingsState\n                };\n                let y = 3;\n                Object.entries(finalBuildings).forEach((param)=>{\n                    let [type, instances] = param;\n                    let x = 5;\n                    instances.forEach((inst)=>{\n                        while(occupiedCells.has(\"\".concat(x, \",\").concat(y))){\n                            x++;\n                        }\n                        migrated[type].push({\n                            ...inst,\n                            position: {\n                                x,\n                                y\n                            }\n                        });\n                        occupiedCells.add(\"\".concat(x, \",\").concat(y));\n                        x++;\n                    });\n                });\n                finalBuildings = migrated;\n            }\n            setBuildings(finalBuildings);\n            const nodesToSet = (savedState.resourceNodes || []).map((n)=>({\n                    ...n,\n                    assignedVillagers: n.assignedVillagers || []\n                }));\n            if (nodesToSet.length === 0) {\n                setResourceNodes(generateResourceNodes(occupiedCells));\n            } else {\n                setResourceNodes(nodesToSet);\n            }\n            setCurrentAge(savedState.currentAge);\n            setGameLog(savedState.gameLog);\n            setActiveTasks((savedState.activeTasks || []).map((t)=>{\n                var _t_payload;\n                // Migration for old save format\n                if (t.type === \"build\" && ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.villagerId)) {\n                    return {\n                        ...t,\n                        payload: {\n                            ...t.payload,\n                            villagerIds: [\n                                t.payload.villagerId\n                            ],\n                            villagerId: undefined\n                        }\n                    };\n                }\n                return t;\n            }));\n            setConstructingBuildings((savedState.constructingBuildings || []).map((c)=>{\n                // Migration for old save format\n                if (c.villagerId) {\n                    return {\n                        ...c,\n                        villagerIds: [\n                            c.villagerId\n                        ],\n                        villagerId: undefined\n                    };\n                }\n                return c;\n            }));\n            setCurrentEvent(null);\n            setActivityStatus(\"Welcome back to your saga.\");\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        } else {\n            addNotification('Could not find a saved game named \"'.concat(saveName, '\".'));\n        }\n    };\n    const handleTaskCompletion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((task)=>{\n        switch(task.type){\n            case \"build\":\n                {\n                    const { buildingType, villagerIds } = task.payload;\n                    const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === buildingType);\n                    const [name] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                    const newBuilding = {\n                        id: task.id,\n                        name,\n                        position: position\n                    };\n                    setConstructingBuildings((prev)=>prev.filter((b)=>b.id !== task.id));\n                    setBuildings((p)=>({\n                            ...p,\n                            [buildingType]: [\n                                ...p[buildingType],\n                                newBuilding\n                            ]\n                        }));\n                    if (villagerIds && villagerIds.length > 0) {\n                        addToLog(\"\".concat(villagerIds.length, \" builder(s) have constructed \").concat(name, \", a new \").concat(buildingInfo.name, \".\"), buildingType);\n                        setActivityStatus(\"Construction of \".concat(name, \" is complete.\"));\n                    }\n                    break;\n                }\n            case \"gather\":\n                {\n                    const { resourceNodeId } = task.payload;\n                    setResourceNodes((prevNodes)=>{\n                        const node = prevNodes.find((n)=>n.id === resourceNodeId);\n                        if (!node) {\n                            console.warn(\"Gather task completed for a non-existent or already processed node: \".concat(resourceNodeId));\n                            return prevNodes;\n                        }\n                        const amountToAdd = Math.floor(node.amount);\n                        if (amountToAdd > 0) {\n                            updateResources({\n                                [node.type]: amountToAdd\n                            });\n                            addToLog(\"\".concat(node.assignedVillagers.length, \" villager(s) depleted a \").concat(node.type, \" source, gaining \").concat(amountToAdd, \" \").concat(node.type, \".\"), node.type);\n                            setActivityStatus(\"A \".concat(node.type, \" source has been fully depleted.\"));\n                        }\n                        return prevNodes.filter((n)=>n.id !== resourceNodeId);\n                    });\n                    break;\n                }\n            case \"train_villager\":\n                {\n                    const { count } = task.payload;\n                    const newVillagerNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", count);\n                    const newVillagers = newVillagerNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(name),\n                            name\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            villagers: [\n                                ...p.villagers,\n                                ...newVillagers\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" new villager(s) have joined your settlement.\"), \"villager\");\n                    setActivityStatus(\"\".concat(count, \" new villager(s) are ready to work.\"));\n                    break;\n                }\n            case \"train_military\":\n                {\n                    const { unitType, count } = task.payload;\n                    const unitInfo = UNIT_INFO.find((u)=>u.id === unitType);\n                    const newUnitNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"soldier\", count);\n                    const newUnits = newUnitNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(unitType, \"-\").concat(name),\n                            name,\n                            title: \"\",\n                            unitType: unitType\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            military: [\n                                ...p.military,\n                                ...newUnits\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" \").concat(unitInfo.name, \"(s) have been trained.\"), unitType);\n                    setActivityStatus(\"\".concat(count, \" new \").concat(unitInfo.name, \"(s) are ready for battle.\"));\n                    break;\n                }\n            case \"advance_age\":\n                {\n                    const ageResult = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedAge)(currentAge);\n                    setCurrentAge(ageResult.nextAgeName);\n                    addToLog(\"You have advanced to the \".concat(ageResult.nextAgeName, \"!\"), \"age\");\n                    addToLog(ageResult.description, \"age\");\n                    setActivityStatus(\"Welcome to the \".concat(ageResult.nextAgeName, \"!\"));\n                    break;\n                }\n        }\n    }, [\n        currentAge,\n        updateResources\n    ]);\n    // Game Loop\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const gameLoop = setInterval(()=>{\n            const now = Date.now();\n            const completedTasks = [];\n            setActiveTasks((currentTasks)=>{\n                return currentTasks.filter((task)=>{\n                    if (now >= task.startTime + task.duration) {\n                        completedTasks.push(task);\n                        return false;\n                    }\n                    return true;\n                });\n            });\n            if (completedTasks.length > 0) {\n                completedTasks.forEach(handleTaskCompletion);\n            }\n        }, 1000);\n        return ()=>clearInterval(gameLoop);\n    }, [\n        handleTaskCompletion\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && !currentEvent && !playerAction && activeTasks.length === 0) {\n            scheduleNextEvent();\n        } else if (eventTimerRef.current) {\n            clearTimeout(eventTimerRef.current);\n        }\n        return ()=>{\n            if (eventTimerRef.current) {\n                clearTimeout(eventTimerRef.current);\n            }\n        };\n    }, [\n        gameState,\n        currentEvent,\n        playerAction,\n        activeTasks.length,\n        scheduleNextEvent\n    ]);\n    const handleEventChoice = (choice)=>{\n        addToLog('Decision: \"'.concat(choice.text, '\"'), \"event\");\n        // 1. Check and apply cost\n        if (choice.cost) {\n            const missingRes = [];\n            for(const key in choice.cost){\n                const resKey = key;\n                if (resources[resKey] < (choice.cost[resKey] || 0)) {\n                    missingRes.push(resKey);\n                }\n            }\n            if (missingRes.length > 0) {\n                addNotification(\"You lack the required resources: \".concat(missingRes.join(\", \"), \".\"));\n                return;\n            }\n            const negativeCost = {};\n            for(const key in choice.cost){\n                const resKey = key;\n                negativeCost[resKey] = -(choice.cost[resKey] || 0);\n            }\n            updateResources(negativeCost);\n        }\n        // 2. Determine success\n        const isSuccess = choice.successChance === undefined || Math.random() < choice.successChance;\n        const effects = isSuccess ? choice.successEffects : choice.failureEffects;\n        if (!effects) {\n            setCurrentEvent(null);\n            scheduleNextEvent();\n            return;\n        }\n        // 3. Calculate resource change\n        let amount = 0;\n        if (Array.isArray(effects.amount)) {\n            const [min, max] = effects.amount;\n            amount = Math.floor(Math.random() * (max - min + 1)) + min;\n        } else {\n            amount = effects.amount;\n        }\n        // 4. Apply effects\n        if (effects.resource !== \"none\" && amount !== 0) {\n            updateResources({\n                [effects.resource]: amount\n            });\n        }\n        // 5. Log and update UI\n        addToLog(effects.log, effects.resource !== \"none\" ? effects.resource : \"system\");\n        setActivityStatus(effects.log);\n        setCurrentEvent(null);\n        scheduleNextEvent();\n    };\n    const handleInitiateBuild = (villagerId, rect)=>{\n        if (isVillagerBusy(villagerId)) {\n            addNotification(\"This villager is already busy.\");\n            return;\n        }\n        setBuildPanelState({\n            isOpen: true,\n            villagerId,\n            anchorRect: rect\n        });\n        setUnitManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleStartPlacement = (buildingId)=>{\n        const villagerId = buildPanelState.villagerId;\n        if (!villagerId) return;\n        const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === buildingId);\n        if (!buildingInfo) return;\n        if (buildingInfo.isUnique && (buildings[buildingInfo.id].length > 0 || constructingBuildings.some((b)=>b.type === buildingInfo.id))) {\n            addNotification(\"You can only build one \".concat(buildingInfo.name, \".\"));\n            return;\n        }\n        const cost = buildingInfo.cost;\n        if (!unlimitedResources) {\n            const missing = [];\n            for(const res in cost){\n                const resourceKey = res;\n                var _cost_resourceKey;\n                if (resources[resourceKey] < ((_cost_resourceKey = cost[resourceKey]) !== null && _cost_resourceKey !== void 0 ? _cost_resourceKey : 0)) {\n                    var _cost_resourceKey1;\n                    missing.push(\"\".concat(((_cost_resourceKey1 = cost[resourceKey]) !== null && _cost_resourceKey1 !== void 0 ? _cost_resourceKey1 : 0) - resources[resourceKey], \" \").concat(resourceKey));\n                }\n            }\n            if (missing.length > 0) {\n                addNotification(\"Need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n        }\n        setPlayerAction({\n            mode: \"build\",\n            buildingType: buildingId,\n            villagerId\n        });\n        setBuildPanelState({\n            isOpen: false,\n            villagerId: null,\n            anchorRect: null\n        });\n        setActivityStatus(\"Select a location to build a \".concat(buildingInfo.name, \". Right-click to cancel.\"));\n    };\n    const handleConfirmPlacement = (position1)=>{\n        if ((playerAction === null || playerAction === void 0 ? void 0 : playerAction.mode) !== \"build\") return;\n        const { buildingType, villagerId } = playerAction;\n        const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === buildingType);\n        const builder = units.villagers.find((v)=>v.id === villagerId);\n        if (!buildingInfo || !builder) return;\n        if (!unlimitedResources) {\n            const cost = buildingInfo.cost;\n            const negativeCost = {};\n            for(const resource in cost){\n                negativeCost[resource] = -(cost[resource] || 0);\n            }\n            updateResources(negativeCost);\n        }\n        const buildTime = buildingInfo.buildTime * 1000;\n        const taskPayload = {\n            buildingType,\n            villagerIds: [\n                villagerId\n            ],\n            position: position1\n        };\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"\".concat(Date.now(), \"-instant-build\"),\n                type: \"build\",\n                startTime: 0,\n                duration: 0,\n                payload: taskPayload\n            });\n        } else {\n            const taskId = \"\".concat(Date.now(), \"-build-\").concat(buildingType);\n            const newConstruction = {\n                id: taskId,\n                type: buildingType,\n                position: position1,\n                villagerIds: [\n                    villagerId\n                ]\n            };\n            setConstructingBuildings((prev)=>[\n                    ...prev,\n                    newConstruction\n                ]);\n            const newTask = {\n                id: taskId,\n                type: \"build\",\n                startTime: Date.now(),\n                duration: buildTime,\n                payload: taskPayload\n            };\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    newTask\n                ]);\n            setActivityStatus(\"\".concat(builder.name, \" has started constructing a \").concat(buildingInfo.name, \".\"));\n            addToLog(\"\".concat(builder.name, \" began construction of a new \").concat(buildingInfo.name, \".\"), buildingType);\n        }\n        setPlayerAction(null);\n    };\n    const handleCancelPlayerAction = ()=>{\n        setPlayerAction(null);\n        setActivityStatus(\"Command cancelled.\");\n    };\n    const handleDemolishBuilding = (type, id)=>{\n        var _buildings_townCenter;\n        if (activeTasks.some((t)=>{\n            var _t_payload;\n            return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.buildingId) === id;\n        })) {\n            addNotification(\"Cannot demolish a building with an active task.\");\n            return;\n        }\n        const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === type);\n        const buildingInstance = buildings[type].find((b)=>b.id === id);\n        if (!buildingInfo || !buildingInstance) return;\n        if (type === \"houses\" && population.current > (((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter.length) > 0 ? 20 : 0) + (buildings.houses.length - 1) * 5) {\n            addNotification(\"Cannot demolish this house, your people would be homeless.\");\n            return;\n        }\n        const refund = {};\n        let refundMessageParts = [];\n        for(const res in buildingInfo.cost){\n            const resourceKey = res;\n            const cost = buildingInfo.cost[resourceKey] || 0;\n            const amount = Math.floor(cost * 0.5);\n            if (amount > 0) {\n                refund[resourceKey] = amount;\n                refundMessageParts.push(\"\".concat(amount, \" \").concat(resourceKey));\n            }\n        }\n        updateResources(refund);\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((b)=>b.id !== id)\n            }));\n        addToLog(\"\".concat(buildingInstance.name, \" (\").concat(buildingInfo.name, \") was demolished.\"), type);\n        if (refundMessageParts.length > 0) {\n            addNotification(\"Salvaged \".concat(refundMessageParts.join(\", \"), \".\"));\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleUpdateBuilding = (type, id, name)=>{\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].map((b)=>b.id === id ? {\n                        ...b,\n                        name\n                    } : b)\n            }));\n        addNotification(\"Building renamed.\");\n    };\n    const handleTrainVillagers = (count)=>{\n        var _buildings_townCenter;\n        if (activeTasks.some((t)=>t.type === \"train_villager\") || count <= 0) return;\n        const villagerCost = 50;\n        const totalCost = villagerCost * count;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more villagers.\"));\n            return;\n        }\n        const townCenter = (_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter[0];\n        if (!townCenter) {\n            addNotification(\"No Town Center to train villagers.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            if (resources.food < totalCost) {\n                addNotification(\"Need \".concat(totalCost - resources.food, \" more Food.\"));\n                return;\n            }\n            updateResources({\n                food: -totalCost\n            });\n        }\n        const trainTime = 10000 * count; // 10s per villager\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"instant\",\n                type: \"train_villager\",\n                startTime: 0,\n                duration: 0,\n                payload: {\n                    count\n                }\n            });\n        } else {\n            const taskId = \"\".concat(Date.now(), \"-train-villager\");\n            const newTask = {\n                id: taskId,\n                type: \"train_villager\",\n                startTime: Date.now(),\n                duration: trainTime,\n                payload: {\n                    count,\n                    buildingId: townCenter.id\n                }\n            };\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    newTask\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" villager(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new villager(s).\"), \"villager\");\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleTrainUnits = (unitType, count)=>{\n        var _buildings_unitInfo_requiredBuilding;\n        const unitInfo = UNIT_INFO.find((u)=>u.id === unitType);\n        if (!unitInfo || activeTasks.some((t)=>{\n            var _t_payload;\n            return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.unitType) === unitType;\n        }) || count <= 0) return;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more units.\"));\n            return;\n        }\n        const trainingBuilding = (_buildings_unitInfo_requiredBuilding = buildings[unitInfo.requiredBuilding]) === null || _buildings_unitInfo_requiredBuilding === void 0 ? void 0 : _buildings_unitInfo_requiredBuilding[0];\n        if (!trainingBuilding) {\n            addNotification(\"No \".concat(unitInfo.requiredBuilding, \" to train units.\"));\n            return;\n        }\n        if (!unlimitedResources) {\n            const totalCost = {};\n            const missing = [];\n            for(const res in unitInfo.cost){\n                const resourceKey = res;\n                const cost = (unitInfo.cost[resourceKey] || 0) * count;\n                totalCost[resourceKey] = -cost;\n                if (resources[resourceKey] < cost) missing.push(\"\".concat(cost - resources[resourceKey], \" \").concat(resourceKey));\n            }\n            if (missing.length > 0) {\n                addNotification(\"Need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources(totalCost);\n        }\n        const trainTime = unitInfo.trainTime * 1000 * count;\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"instant\",\n                type: \"train_military\",\n                startTime: 0,\n                duration: 0,\n                payload: {\n                    unitType,\n                    count\n                }\n            });\n        } else {\n            const taskId = \"\".concat(Date.now(), \"-train-\").concat(unitType);\n            const newTask = {\n                id: taskId,\n                type: \"train_military\",\n                startTime: Date.now(),\n                duration: trainTime,\n                payload: {\n                    unitType,\n                    count,\n                    buildingId: trainingBuilding.id\n                }\n            };\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    newTask\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" \").concat(unitInfo.name, \"(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new \").concat(unitInfo.name, \"(s).\"), unitType);\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleDismissSpecificUnit = (type, id)=>{\n        if (type === \"villagers\" && isVillagerBusy(id)) {\n            addNotification(\"Cannot dismiss a busy villager.\");\n            return;\n        }\n        const unit = units[type].find((u)=>u.id === id);\n        if (!unit) return;\n        if (type === \"villagers\" && units.villagers.length <= 1) {\n            addNotification(\"Cannot dismiss your last villager.\");\n            return;\n        }\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((u)=>u.id !== id)\n            }));\n        const unitTypeName = type === \"villagers\" ? \"villager\" : unit.unitType;\n        addToLog(\"\".concat(unit.name, \" the \").concat(unitTypeName, \" has been dismissed.\"), type === \"villagers\" ? \"villager\" : unit.unitType);\n        addNotification(\"\".concat(unit.name, \" was dismissed.\"));\n    };\n    const handleUpdateUnit = (type, id, name, title)=>{\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].map((u)=>{\n                    if (u.id === id) {\n                        const updatedUnit = {\n                            ...u,\n                            name\n                        };\n                        if (type === \"military\" && title !== undefined) {\n                            updatedUnit.title = title;\n                        }\n                        return updatedUnit;\n                    }\n                    return u;\n                })\n            }));\n        addNotification(\"Unit updated.\");\n    };\n    const handleAssignVillagersToNode = (nodeId, count)=>{\n        const idleVillagers = units.villagers.filter((v)=>!isVillagerBusy(v.id));\n        if (count <= 0) return;\n        let cappedCount = Math.min(count, idleVillagers.length);\n        if (cappedCount === 0) {\n            addNotification(\"No idle villagers available.\");\n            return;\n        }\n        const villagersToAssign = idleVillagers.slice(0, cappedCount);\n        const villagerIdsToAssign = villagersToAssign.map((v)=>v.id);\n        const targetNode = resourceNodes.find((n)=>n.id === nodeId);\n        if (!targetNode) return;\n        setResourceNodes((prevNodes)=>prevNodes.map((n)=>n.id === nodeId ? {\n                    ...n,\n                    assignedVillagers: [\n                        ...new Set([\n                            ...n.assignedVillagers,\n                            ...villagerIdsToAssign\n                        ])\n                    ]\n                } : n));\n        const existingTask = activeTasks.find((t)=>{\n            var _t_payload;\n            return t.type === \"gather\" && ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.resourceNodeId) === nodeId;\n        });\n        const gatherRatePerVillager = GATHER_INFO[targetNode.type].rate;\n        if (unlimitedResources) {\n            updateResources({\n                [targetNode.type]: targetNode.amount\n            });\n            addToLog(\"\".concat(cappedCount, \" villager(s) instantly gathered \").concat(Math.floor(targetNode.amount), \" \").concat(targetNode.type, \".\"), targetNode.type);\n            setResourceNodes((prev)=>prev.filter((n)=>n.id !== nodeId));\n        } else {\n            const amountPerSecond = gatherRatePerVillager / 10;\n            const gatherInterval = setInterval(()=>{\n                let nodeIsDepleted = false;\n                setResourceNodes((prev)=>prev.map((n)=>{\n                        if (n.id === nodeId) {\n                            const newAmount = n.amount - amountPerSecond;\n                            if (newAmount <= 0) {\n                                nodeIsDepleted = true;\n                                updateResources({\n                                    [n.type]: n.amount\n                                });\n                                addToLog(\"\".concat(n.assignedVillagers.length, \" villager(s) depleted a \").concat(n.type, \" source.\"), n.type);\n                                return null;\n                            }\n                            updateResources({\n                                [n.type]: amountPerSecond\n                            });\n                            return {\n                                ...n,\n                                amount: newAmount\n                            };\n                        }\n                        return n;\n                    }).filter(Boolean));\n                if (nodeIsDepleted) {\n                    clearInterval(gatherInterval);\n                    setActiveTasks((prev)=>prev.filter((t)=>t.id !== \"gather-\".concat(nodeId)));\n                }\n            }, 100);\n            const newTask = {\n                id: \"gather-\".concat(nodeId),\n                type: \"gather\",\n                startTime: Date.now(),\n                duration: 99999999,\n                payload: {\n                    resourceNodeId: nodeId,\n                    villagerIds: villagersToAssign.map((v)=>v.id)\n                }\n            };\n            setActiveTasks((prev)=>[\n                    ...prev.filter((t)=>t.id !== \"gather-\".concat(nodeId)),\n                    newTask\n                ]);\n        }\n        addToLog(\"\".concat(cappedCount, \" villager(s) assigned to gather \").concat(targetNode.type, \".\"), targetNode.type);\n        setActivityStatus(\"\".concat(cappedCount, \" villager(s) are now gathering \").concat(targetNode.type, \".\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAssignVillagersToConstruction = (constructionId, count)=>{\n        var _task_payload_villagerIds, _task_payload;\n        const idleVillagers = units.villagers.filter((v)=>!isVillagerBusy(v.id));\n        if (count <= 0) return;\n        let cappedCount = Math.min(count, idleVillagers.length);\n        if (cappedCount === 0) {\n            addNotification(\"No idle villagers available to assist.\");\n            return;\n        }\n        const villagersToAssign = idleVillagers.slice(0, cappedCount).map((v)=>v.id);\n        const task = activeTasks.find((t)=>t.id === constructionId);\n        const construction = constructingBuildings.find((c)=>c.id === constructionId);\n        if (!task || !construction) return;\n        const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === construction.type);\n        if (!buildingInfo) return;\n        const baseDuration = buildingInfo.buildTime * 1000;\n        const oldWorkerCount = ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 1;\n        const timeElapsed = Date.now() - task.startTime;\n        const workDone = timeElapsed * oldWorkerCount;\n        const totalWork = baseDuration;\n        const workRemaining = Math.max(0, totalWork - workDone);\n        const newWorkerCount = oldWorkerCount + cappedCount;\n        const newRemainingDuration = workRemaining / newWorkerCount;\n        const updatedVillagerIds = [\n            ...task.payload.villagerIds,\n            ...villagersToAssign\n        ];\n        setActiveTasks((prev)=>prev.map((t)=>t.id === constructionId ? {\n                    ...t,\n                    startTime: Date.now(),\n                    duration: newRemainingDuration,\n                    payload: {\n                        ...t.payload,\n                        villagerIds: updatedVillagerIds\n                    }\n                } : t));\n        setConstructingBuildings((prev)=>prev.map((c)=>c.id === constructionId ? {\n                    ...c,\n                    villagerIds: updatedVillagerIds\n                } : c));\n        addToLog(\"\".concat(cappedCount, \" villager(s) are now assisting with the \").concat(buildingInfo.name, \".\"), buildingInfo.id);\n        setActivityStatus(\"Construction of the \".concat(buildingInfo.name, \" is now faster.\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAssignVillagers = (targetId, count)=>{\n        if (assignmentPanelState.targetType === \"resource\") {\n            handleAssignVillagersToNode(targetId, count);\n        } else if (assignmentPanelState.targetType === \"construction\") {\n            handleAssignVillagersToConstruction(targetId, count);\n        }\n    };\n    const handleAdvanceAge = async ()=>{\n        if (activeTasks.some((t)=>t.type === \"advance_age\")) {\n            addNotification(\"Advancement already in progress.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            if (resources.food < 500 || resources.gold < 200) {\n                const missing = [];\n                if (resources.food < 500) missing.push(\"\".concat(500 - resources.food, \" Food\"));\n                if (resources.gold < 200) missing.push(\"\".concat(200 - resources.gold, \" Gold\"));\n                addNotification(\"To advance, you need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources({\n                food: -500,\n                gold: -200\n            });\n        }\n        const duration = 60000;\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"instant\",\n                type: \"advance_age\",\n                startTime: 0,\n                duration: 0\n            });\n        } else {\n            const taskId = \"\".concat(Date.now(), \"-advance_age\");\n            const newTask = {\n                id: taskId,\n                type: \"advance_age\",\n                startTime: Date.now(),\n                duration\n            };\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    newTask\n                ]);\n            setActivityStatus(\"Your people begin the long journey to a new age.\");\n            setBuildingManagementPanel({\n                isOpen: false,\n                type: null,\n                anchorRect: null\n            });\n        }\n    };\n    const handleExitGame = async ()=>{\n        setCurrentSaveName(null);\n        await fetchSaves();\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n    };\n    const handleToggleUnlimitedResources = ()=>{\n        const newMode = !unlimitedResources;\n        setUnlimitedResources(newMode);\n        if (newMode) {\n            setResources({\n                food: 99999,\n                wood: 99999,\n                gold: 99999,\n                stone: 99999\n            });\n            addNotification(\"Test Mode: ON\");\n        } else {\n            addNotification(\"Test Mode: OFF\");\n        }\n    };\n    const buildingCounts = Object.keys(buildings).reduce((acc, key)=>{\n        const buildingType = key;\n        acc[buildingType] = buildings[buildingType].length;\n        return acc;\n    }, {});\n    const idleVillagerCount = units.villagers.filter((v)=>!isVillagerBusy(v.id)).length;\n    const assignmentTarget = assignmentPanelState.targetType === \"resource\" ? resourceNodes.find((n)=>n.id === assignmentPanelState.targetId) : constructingBuildings.find((c)=>c.id === assignmentPanelState.targetId);\n    const closeAllPanels = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setUnitManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                anchorRect: null\n            } : p);\n        setBuildingManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                instanceId: undefined,\n                anchorRect: null\n            } : p);\n        setBuildPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                villagerId: null,\n                anchorRect: null\n            } : p);\n        setAssignmentPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                targetId: null,\n                targetType: null,\n                anchorRect: null\n            } : p);\n        setSettingsPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setCivPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setAllBuildingsPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n    }, []);\n    const handleOpenBuildingPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((type, instanceId, rect)=>{\n        closeAllPanels();\n        setBuildingManagementPanel({\n            isOpen: true,\n            type,\n            instanceId,\n            anchorRect: rect\n        });\n    }, [\n        closeAllPanels\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleClickOutside = (event)=>{\n            const isAnyPanelOpen = unitManagementPanel.isOpen || buildingManagementPanel.isOpen || buildPanelState.isOpen || assignmentPanelState.isOpen || settingsPanelState.isOpen || civPanelState.isOpen || allBuildingsPanel.isOpen;\n            if (!isAnyPanelOpen) {\n                return;\n            }\n            const target = event.target;\n            if (target.closest(\".sci-fi-panel-popup\")) {\n                return;\n            }\n            closeAllPanels();\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return ()=>{\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [\n        unitManagementPanel.isOpen,\n        buildingManagementPanel.isOpen,\n        buildPanelState.isOpen,\n        assignmentPanelState.isOpen,\n        settingsPanelState.isOpen,\n        civPanelState.isOpen,\n        allBuildingsPanel.isOpen,\n        closeAllPanels\n    ]);\n    const renderContent = ()=>{\n        switch(gameState){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 905,\n                    columnNumber: 24\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 907,\n                    columnNumber: 24\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING:\n                if (!civilization) return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 909,\n                    columnNumber: 43\n                }, undefined);\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_GameUI__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                            civilization: civilization,\n                            resources: resources,\n                            units: units,\n                            buildings: buildings,\n                            population: population,\n                            currentAge: currentAge,\n                            gameLog: gameLog,\n                            currentEvent: currentEvent,\n                            onEventChoice: handleEventChoice,\n                            resourceDeltas: resourceDeltas,\n                            activityStatus: activityStatus,\n                            unitList: UNIT_INFO,\n                            buildingList: BUILDINGS_INFO,\n                            onOpenUnitPanel: (type, rect)=>{\n                                closeAllPanels();\n                                setUnitManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            onOpenAllBuildingsPanel: (rect)=>{\n                                closeAllPanels();\n                                setAllBuildingsPanel({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            playerAction: playerAction,\n                            onConfirmPlacement: handleConfirmPlacement,\n                            onCancelPlayerAction: handleCancelPlayerAction,\n                            onBuildingClick: (building, rect)=>{\n                                closeAllPanels();\n                                const type = Object.keys(buildings).find((key)=>buildings[key].some((b)=>b.id === building.id));\n                                if (type) setBuildingManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    instanceId: building.id,\n                                    anchorRect: rect\n                                });\n                            },\n                            mapDimensions: MAP_DIMENSIONS,\n                            constructingBuildings: constructingBuildings,\n                            activeTasks: activeTasks,\n                            onExitGame: handleExitGame,\n                            onOpenSettingsPanel: (rect)=>{\n                                closeAllPanels();\n                                setSettingsPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenCivPanel: (rect)=>{\n                                closeAllPanels();\n                                setCivPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            resourceNodes: resourceNodes,\n                            onOpenAssignmentPanel: (nodeId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: nodeId,\n                                    targetType: \"resource\",\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenConstructionPanel: (constructionId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: constructionId,\n                                    targetType: \"construction\",\n                                    anchorRect: rect\n                                });\n                            },\n                            gatherInfo: GATHER_INFO\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 912,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildPanel__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                            isOpen: buildPanelState.isOpen,\n                            onClose: ()=>setBuildPanelState({\n                                    isOpen: false,\n                                    villagerId: null,\n                                    anchorRect: null\n                                }),\n                            onStartPlacement: handleStartPlacement,\n                            resources: resources,\n                            buildingCounts: buildingCounts,\n                            buildingList: BUILDINGS_INFO,\n                            anchorRect: buildPanelState.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 948,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                            isOpen: unitManagementPanel.isOpen,\n                            onClose: ()=>setUnitManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            type: unitManagementPanel.type,\n                            units: units,\n                            onUpdateUnit: handleUpdateUnit,\n                            onDismissUnit: handleDismissSpecificUnit,\n                            onInitiateBuild: (villagerId, rect)=>{\n                                closeAllPanels();\n                                handleInitiateBuild(villagerId, rect);\n                            },\n                            getVillagerTaskDetails: getVillagerTaskDetails,\n                            anchorRect: unitManagementPanel.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 958,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                            isOpen: buildingManagementPanel.isOpen,\n                            onClose: ()=>setBuildingManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            panelState: buildingManagementPanel,\n                            buildings: buildings,\n                            buildingList: BUILDINGS_INFO,\n                            onUpdateBuilding: handleUpdateBuilding,\n                            onDemolishBuilding: handleDemolishBuilding,\n                            onTrainUnits: handleTrainUnits,\n                            onTrainVillagers: handleTrainVillagers,\n                            resources: resources,\n                            population: population,\n                            unitList: UNIT_INFO,\n                            onAdvanceAge: handleAdvanceAge,\n                            activeTasks: activeTasks,\n                            anchorRect: buildingManagementPanel.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 970,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                            isOpen: assignmentPanelState.isOpen,\n                            onClose: ()=>setAssignmentPanelState({\n                                    isOpen: false,\n                                    targetId: null,\n                                    targetType: null,\n                                    anchorRect: null\n                                }),\n                            assignmentTarget: assignmentTarget || null,\n                            idleVillagerCount: idleVillagerCount,\n                            onAssignVillagers: handleAssignVillagers,\n                            gatherInfo: GATHER_INFO,\n                            buildingList: BUILDINGS_INFO,\n                            anchorRect: assignmentPanelState.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 988,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SettingsPanel__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n                            isOpen: settingsPanelState.isOpen,\n                            onClose: ()=>setSettingsPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            anchorRect: settingsPanelState.anchorRect,\n                            opacity: panelOpacity,\n                            onOpacityChange: setPanelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 999,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                            isOpen: civPanelState.isOpen,\n                            onClose: ()=>setCivPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            civilization: civilization,\n                            anchorRect: civPanelState.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 1006,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                            isOpen: allBuildingsPanel.isOpen,\n                            onClose: ()=>setAllBuildingsPanel({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            buildingList: BUILDINGS_INFO,\n                            buildingCounts: buildingCounts,\n                            constructingBuildings: constructingBuildings,\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            anchorRect: allBuildingsPanel.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 1013,\n                            columnNumber: 25\n                        }, undefined)\n                    ]\n                }, void 0, true);\n            default:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 1026,\n                    columnNumber: 24\n                }, undefined);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-stone-dark flex items-center justify-center p-4\",\n        children: [\n            gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: handleToggleUnlimitedResources,\n                className: \"fixed bottom-4 left-4 z-[101] bg-brand-gold text-stone-dark font-bold py-1 px-3 rounded-full text-xs shadow-lg hover:scale-105 transition-transform\",\n                \"aria-label\": \"Toggle unlimited resources test mode\",\n                children: [\n                    \"Test Mode: \",\n                    unlimitedResources ? \"ON\" : \"OFF\"\n                ]\n            }, void 0, true, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 1033,\n                columnNumber: 18\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_NotificationManager__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                notifications: notifications,\n                onRemoveNotification: removeNotification\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 1041,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: \"w-full max-w-7xl mx-auto\",\n                children: renderContent()\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 1042,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/user/studio/src/app/page.tsx\",\n        lineNumber: 1031,\n        columnNumber: 9\n    }, undefined);\n};\n_s(GamePage, \"3VWtJBrnfteaRQARupOZKhjoCEk=\");\n_c = GamePage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GamePage);\nvar _c;\n$RefreshReg$(_c, \"GamePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./types.ts":
/*!******************!*\
  !*** ./types.ts ***!
  \******************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameStatus: function() { return /* binding */ GameStatus; }\n/* harmony export */ });\nvar GameStatus;\n(function(GameStatus) {\n    GameStatus[GameStatus[\"MENU\"] = 0] = \"MENU\";\n    GameStatus[GameStatus[\"LOADING\"] = 1] = \"LOADING\";\n    GameStatus[GameStatus[\"PLAYING\"] = 2] = \"PLAYING\";\n    GameStatus[GameStatus[\"GAME_OVER\"] = 3] = \"GAME_OVER\";\n})(GameStatus || (GameStatus = {}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3R5cGVzLnRzIiwibWFwcGluZ3MiOiI7Ozs7O1VBRVlBOzs7OztHQUFBQSxlQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi90eXBlcy50cz81NjUyIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgZW51bSBHYW1lU3RhdHVzIHtcbiAgICBNRU5VLFxuICAgIExPQURJTkcsXG4gICAgUExBWUlORyxcbiAgICBHQU1FX09WRVIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2l2aWxpemF0aW9uIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbG9yZTogc3RyaW5nO1xuICAgIGJvbnVzOiBzdHJpbmc7XG4gICAgdW5pcXVlVW5pdDoge1xuICAgICAgICBuYW1lOnN0cmluZztcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICB9O1xuICAgIGJhbm5lclVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc291cmNlcyB7XG4gICAgZm9vZDogbnVtYmVyO1xuICAgIHdvb2Q6IG51bWJlcjtcbiAgICBnb2xkOiBudW1iZXI7XG4gICAgc3RvbmU6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgUmVzb3VyY2VEZWx0YXMgPSBQYXJ0aWFsPFJlc291cmNlcz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlsbGFnZXIge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBNaWxpdGFyeVVuaXRUeXBlID0gJ3N3b3Jkc21hbicgfCAnYXJjaGVyJyB8ICdrbmlnaHQnIHwgJ2NhdGFwdWx0JztcblxuZXhwb3J0IGludGVyZmFjZSBNaWxpdGFyeVVuaXQge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgdW5pdFR5cGU6IE1pbGl0YXJ5VW5pdFR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pdHMge1xuICAgIHZpbGxhZ2VyczogVmlsbGFnZXJbXTtcbiAgICBtaWxpdGFyeTogTWlsaXRhcnlVbml0W107XG59XG5cbmV4cG9ydCB0eXBlIEJ1aWxkaW5nVHlwZSA9ICdob3VzZXMnIHwgJ2JhcnJhY2tzJyB8ICdhcmNoZXJ5UmFuZ2UnIHwgJ3N0YWJsZScgfCAnc2llZ2VXb3Jrc2hvcCcgfCAnYmxhY2tzbWl0aCcgfCAnd2F0Y2hUb3dlcicgfCAndG93bkNlbnRlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVpbGRpbmdJbnN0YW5jZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcG9zaXRpb246IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVpbGRpbmdzIHtcbiAgICBob3VzZXM6IEJ1aWxkaW5nSW5zdGFuY2VbXTtcbiAgICBiYXJyYWNrczogQnVpbGRpbmdJbnN0YW5jZVtdO1xuICAgIGFyY2hlcnlSYW5nZTogQnVpbGRpbmdJbnN0YW5jZVtdO1xuICAgIHN0YWJsZTogQnVpbGRpbmdJbnN0YW5jZVtdO1xuICAgIHNpZWdlV29ya3Nob3A6IEJ1aWxkaW5nSW5zdGFuY2VbXTtcbiAgICBibGFja3NtaXRoOiBCdWlsZGluZ0luc3RhbmNlW107XG4gICAgd2F0Y2hUb3dlcjogQnVpbGRpbmdJbnN0YW5jZVtdO1xuICAgIHRvd25DZW50ZXI6IEJ1aWxkaW5nSW5zdGFuY2VbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHYW1lU3RhdGVQYXlsb2FkIHtcbiAgICBjaXY6IENpdmlsaXphdGlvbjtcbiAgICBhZ2U6IHN0cmluZztcbiAgICByZXM6IFJlc291cmNlcztcbiAgICB1bml0czoge1xuICAgICAgICB2aWxsYWdlcnM6IG51bWJlcjtcbiAgICAgICAgc3dvcmRzbWVuOiBudW1iZXI7XG4gICAgICAgIGFyY2hlcnM6IG51bWJlcjtcbiAgICAgICAga25pZ2h0czogbnVtYmVyO1xuICAgICAgICBjYXRhcHVsdHM6IG51bWJlcjtcbiAgICB9O1xuICAgIGJ1aWxkaW5nczogeyBba2V5IGluIEJ1aWxkaW5nVHlwZV0/OiBudW1iZXIgfTtcbn1cblxuZXhwb3J0IHR5cGUgQnVpbGRpbmdDb3N0cyA9IHsgW2tleSBpbiBrZXlvZiBSZXNvdXJjZXNdPzogbnVtYmVyIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRFZmZlY3Qge1xuICAgIHJlc291cmNlOiBrZXlvZiBSZXNvdXJjZXMgfCAnbm9uZSc7XG4gICAgYW1vdW50OiBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdOyAvLyBlLmcuLCA1MCBvciBbNTAsIDEwMF1cbiAgICBsb2c6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHYW1lRXZlbnRDaG9pY2Uge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBjb3N0PzogQnVpbGRpbmdDb3N0cztcbiAgICBzdWNjZXNzQ2hhbmNlPzogbnVtYmVyOyAvLyAwLTEsIHVuZGVmaW5lZCBtZWFucyAxMDAlXG4gICAgc3VjY2Vzc0VmZmVjdHM6IEV2ZW50RWZmZWN0O1xuICAgIGZhaWx1cmVFZmZlY3RzPzogRXZlbnRFZmZlY3Q7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2FtZUV2ZW50IHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgY2hvaWNlczogR2FtZUV2ZW50Q2hvaWNlW107XG59XG5cbmV4cG9ydCB0eXBlIExvZ0ljb25UeXBlID0ga2V5b2YgUmVzb3VyY2VzIHwgJ3ZpbGxhZ2VyJyB8IE1pbGl0YXJ5VW5pdFR5cGUgfCAnYWdlJyB8ICdldmVudCcgfCAnc3lzdGVtJyB8IEJ1aWxkaW5nVHlwZTtcblxuZXhwb3J0IGludGVyZmFjZSBHYW1lTG9nRW50cnkge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGljb246IExvZ0ljb25UeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkaW5nSW5mbyB7XG4gICAgaWQ6IEJ1aWxkaW5nVHlwZTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBjb3N0OiBCdWlsZGluZ0Nvc3RzO1xuICAgIGlzVW5pcXVlOiBib29sZWFuO1xuICAgIGJ1aWxkVGltZTogbnVtYmVyOyAvLyBpbiBzZWNvbmRzXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pdEluZm8ge1xuICAgIGlkOiBNaWxpdGFyeVVuaXRUeXBlO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGNvc3Q6IEJ1aWxkaW5nQ29zdHM7XG4gICAgcmVxdWlyZWRCdWlsZGluZzogQnVpbGRpbmdUeXBlO1xuICAgIHRyYWluVGltZTogbnVtYmVyOyAvLyBpbiBzZWNvbmRzIHBlciB1bml0XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVUlOb3RpZmljYXRpb24ge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnN0cnVjdGluZ0J1aWxkaW5nIHtcbiAgICBpZDogc3RyaW5nOyAvLyBDb3JyZXNwb25kcyB0byB0YXNrIElEXG4gICAgdHlwZTogQnVpbGRpbmdUeXBlO1xuICAgIHBvc2l0aW9uOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB9O1xuICAgIHZpbGxhZ2VySWRzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IHR5cGUgUmVzb3VyY2VOb2RlVHlwZSA9ICdmb29kJyB8ICd3b29kJyB8ICdnb2xkJyB8ICdzdG9uZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VOb2RlIHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogUmVzb3VyY2VOb2RlVHlwZTtcbiAgcG9zaXRpb246IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH07XG4gIGFtb3VudDogbnVtYmVyO1xuICBhc3NpZ25lZFZpbGxhZ2Vyczogc3RyaW5nW107XG59XG5cbmV4cG9ydCB0eXBlIFRhc2tUeXBlID0gJ2dhdGhlcicgfCAnYnVpbGQnIHwgJ3RyYWluX3ZpbGxhZ2VyJyB8ICd0cmFpbl9taWxpdGFyeScgfCAnYWR2YW5jZV9hZ2UnO1xuXG5leHBvcnQgdHlwZSBQbGF5ZXJBY3Rpb25TdGF0ZSA9IHtcbiAgICBtb2RlOiAnYnVpbGQnO1xuICAgIGJ1aWxkaW5nVHlwZTogQnVpbGRpbmdUeXBlO1xuICAgIHZpbGxhZ2VySWQ6IHN0cmluZztcbn0gfCBudWxsO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgR2FtZVRhc2sge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdHlwZTogVGFza1R5cGU7XG4gICAgc3RhcnRUaW1lOiBudW1iZXI7XG4gICAgZHVyYXRpb246IG51bWJlcjsgLy8gaW4gbWlsbGlzZWNvbmRzXG4gICAgcGF5bG9hZD86IHtcbiAgICAgICAgYnVpbGRpbmdJZD86IHN0cmluZztcbiAgICAgICAgYnVpbGRpbmdUeXBlPzogQnVpbGRpbmdUeXBlO1xuICAgICAgICB1bml0VHlwZT86IE1pbGl0YXJ5VW5pdFR5cGU7XG4gICAgICAgIGNvdW50PzogbnVtYmVyO1xuICAgICAgICB2aWxsYWdlcklkcz86IHN0cmluZ1tdO1xuICAgICAgICBwb3NpdGlvbj86IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfTtcbiAgICAgICAgcmVzb3VyY2VOb2RlSWQ/OiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGdWxsR2FtZVN0YXRlIHtcbiAgICBjaXZpbGl6YXRpb246IENpdmlsaXphdGlvbjtcbiAgICByZXNvdXJjZXM6IFJlc291cmNlcztcbiAgICB1bml0czogVW5pdHM7XG4gICAgYnVpbGRpbmdzOiBCdWlsZGluZ3M7XG4gICAgY3VycmVudEFnZTogc3RyaW5nO1xuICAgIGdhbWVMb2c6IEdhbWVMb2dFbnRyeVtdO1xuICAgIGNvbnN0cnVjdGluZ0J1aWxkaW5nczogQ29uc3RydWN0aW5nQnVpbGRpbmdbXTtcbiAgICBhY3RpdmVUYXNrczogR2FtZVRhc2tbXTtcbiAgICByZXNvdXJjZU5vZGVzOiBSZXNvdXJjZU5vZGVbXTtcbn1cbiJdLCJuYW1lcyI6WyJHYW1lU3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./types.ts\n"));

/***/ })

});