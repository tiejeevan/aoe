"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./types.ts\");\n/* harmony import */ var _services_geminiService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/geminiService */ \"(app-pages-browser)/./services/geminiService.ts\");\n/* harmony import */ var _services_dbService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/dbService */ \"(app-pages-browser)/./services/dbService.ts\");\n/* harmony import */ var _services_nameService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/nameService */ \"(app-pages-browser)/./services/nameService.ts\");\n/* harmony import */ var _data_itemContent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/data/itemContent */ \"(app-pages-browser)/./data/itemContent.ts\");\n/* harmony import */ var _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/data/ageInfo */ \"(app-pages-browser)/./data/ageInfo.ts\");\n/* harmony import */ var _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/data/buildingInfo */ \"(app-pages-browser)/./data/buildingInfo.ts\");\n/* harmony import */ var _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/data/unitInfo */ \"(app-pages-browser)/./data/unitInfo.ts\");\n/* harmony import */ var _components_GameUI__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/GameUI */ \"(app-pages-browser)/./components/GameUI.tsx\");\n/* harmony import */ var _components_StartScreen__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/StartScreen */ \"(app-pages-browser)/./components/StartScreen.tsx\");\n/* harmony import */ var _components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/LoadingScreen */ \"(app-pages-browser)/./components/LoadingScreen.tsx\");\n/* harmony import */ var _components_BuildPanel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/components/BuildPanel */ \"(app-pages-browser)/./components/BuildPanel.tsx\");\n/* harmony import */ var _components_NotificationManager__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/components/NotificationManager */ \"(app-pages-browser)/./components/NotificationManager.tsx\");\n/* harmony import */ var _components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/components/UnitManagementPanel */ \"(app-pages-browser)/./components/UnitManagementPanel.tsx\");\n/* harmony import */ var _components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/components/BuildingManagementPanel */ \"(app-pages-browser)/./components/BuildingManagementPanel.tsx\");\n/* harmony import */ var _components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @/components/ResourceAssignmentPanel */ \"(app-pages-browser)/./components/ResourceAssignmentPanel.tsx\");\n/* harmony import */ var _components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @/components/CivilizationPanel */ \"(app-pages-browser)/./components/CivilizationPanel.tsx\");\n/* harmony import */ var _components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @/components/AllBuildingsPanel */ \"(app-pages-browser)/./components/AllBuildingsPanel.tsx\");\n/* harmony import */ var _components_InventoryPanel__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @/components/InventoryPanel */ \"(app-pages-browser)/./components/InventoryPanel.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst GATHER_INFO = {\n    food: {\n        rate: 10\n    },\n    wood: {\n        rate: 8\n    },\n    gold: {\n        rate: 5\n    },\n    stone: {\n        rate: 6\n    }\n};\nconst initialBuildingsState = {\n    houses: [],\n    barracks: [],\n    archeryRange: [],\n    stable: [],\n    siegeWorkshop: [],\n    blacksmith: [],\n    watchTower: [],\n    townCenter: []\n};\nconst MAP_DIMENSIONS = {\n    width: 25,\n    height: 18\n};\nconst GamePage = ()=>{\n    var _buildings_townCenter, _buildings_houses;\n    _s();\n    // Core Game State\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n    const [civilization, setCivilization] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resources, setResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        food: 200,\n        wood: 150,\n        gold: 50,\n        stone: 100\n    });\n    const [units, setUnits] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        villagers: [],\n        military: []\n    });\n    const [buildings, setBuildings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialBuildingsState);\n    const [currentAge, setCurrentAge] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Nomadic Age\");\n    const [gameLog, setGameLog] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentEvent, setCurrentEvent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resourceDeltas, setResourceDeltas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [activityStatus, setActivityStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Your story begins...\");\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [unlimitedResources, setUnlimitedResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [allSaves, setAllSaves] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentSaveName, setCurrentSaveName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [playerAction, setPlayerAction] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeTasks, setActiveTasks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [resourceNodes, setResourceNodes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [inventory, setInventory] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [activeBuffs, setActiveBuffs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        resourceBoost: []\n    });\n    // Master lists of all configurations from DB\n    const [masterAgeList, setMasterAgeList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [masterBuildingList, setMasterBuildingList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [masterUnitList, setMasterUnitList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // App Loading State\n    const [isAppLoading, setIsAppLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Panel States\n    const [buildPanelState, setBuildPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        villagerId: null,\n        anchorRect: null\n    });\n    const [unitManagementPanel, setUnitManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        anchorRect: null\n    });\n    const [buildingManagementPanel, setBuildingManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        instanceId: null,\n        anchorRect: null\n    });\n    const [allBuildingsPanel, setAllBuildingsPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [assignmentPanelState, setAssignmentPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        targetId: null,\n        targetType: null,\n        anchorRect: null\n    });\n    const [civPanelState, setCivPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [inventoryPanelState, setInventoryPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const deltaTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const eventTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastTickRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(Date.now());\n    const animationFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    // Derived state for active game configurations\n    const ageProgressionList = masterAgeList.filter((age)=>age.isActive);\n    const buildingList = masterBuildingList; // Keep all for lookups, filter on use\n    const unitList = masterUnitList; // Keep all for lookups, filter on use\n    const population = {\n        current: units.villagers.length + units.military.length,\n        capacity: (((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter.length) > 0 ? 20 : 0) + (((_buildings_houses = buildings.houses) === null || _buildings_houses === void 0 ? void 0 : _buildings_houses.length) || 0) * 5\n    };\n    const fetchSavesAndConfigs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        setIsAppLoading(true);\n        try {\n            const names = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllSaveNames)();\n            setAllSaves(names);\n            // --- Smart Seeding for Ages ---\n            let allAgeConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllAgeConfigs)();\n            const existingAgeIds = new Set(allAgeConfigs.map((a)=>a.id));\n            let hasSeededAges = false;\n            for (const [index, pa] of _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES.entries()){\n                if (!existingAgeIds.has(pa.name)) {\n                    const newPredefinedAge = {\n                        id: pa.name,\n                        name: pa.name,\n                        description: pa.description,\n                        isActive: true,\n                        isPredefined: true,\n                        order: index\n                    };\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveAgeConfig)(newPredefinedAge);\n                    hasSeededAges = true;\n                }\n            }\n            if (hasSeededAges) allAgeConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllAgeConfigs)(); // Refetch if seeded\n            setMasterAgeList(allAgeConfigs);\n            // --- Smart Seeding for Buildings ---\n            let allBuildingConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllBuildingConfigs)();\n            const existingBuildingIds = new Set(allBuildingConfigs.map((b)=>b.id));\n            let hasSeededBuildings = false;\n            for (const [index, pb] of _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__.INITIAL_BUILDINGS.entries()){\n                if (!existingBuildingIds.has(pb.id)) {\n                    var _allAgeConfigs_find;\n                    const defaultAge = ((_allAgeConfigs_find = allAgeConfigs.find((a)=>a.order === 0)) === null || _allAgeConfigs_find === void 0 ? void 0 : _allAgeConfigs_find.name) || _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES[0].name;\n                    const newPredefinedBuilding = {\n                        ...pb,\n                        buildLimit: pb.isUnique ? 1 : pb.buildLimit || 0,\n                        isActive: true,\n                        isPredefined: true,\n                        order: index,\n                        unlockedInAge: defaultAge,\n                        iconId: pb.id,\n                        canTrainUnits: pb.canTrainUnits,\n                        upgradesTo: pb.upgradesTo || []\n                    };\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveBuildingConfig)(newPredefinedBuilding);\n                    hasSeededBuildings = true;\n                }\n            }\n            if (hasSeededBuildings) allBuildingConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllBuildingConfigs)(); // Refetch if seeded\n            setMasterBuildingList(allBuildingConfigs);\n            // --- Smart Seeding for Units ---\n            let allUnitConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllUnitConfigs)();\n            const existingUnitIds = new Set(allUnitConfigs.map((u)=>u.id));\n            let hasSeededUnits = false;\n            for (const [index, pu] of _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__.INITIAL_UNITS.entries()){\n                if (!existingUnitIds.has(pu.id)) {\n                    const newPredefinedUnit = {\n                        ...pu,\n                        isActive: true,\n                        isPredefined: true,\n                        order: index\n                    };\n                    await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveUnitConfig)(newPredefinedUnit);\n                    hasSeededUnits = true;\n                }\n            }\n            if (hasSeededUnits) allUnitConfigs = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllUnitConfigs)(); // Refetch if seeded\n            setMasterUnitList(allUnitConfigs);\n            return {\n                allAgeConfigs,\n                allBuildingConfigs,\n                allUnitConfigs\n            };\n        } catch (error) {\n            console.error(\"Error during initial config fetch:\", error);\n            // Fallback to static data if IndexedDB fails catastrophically\n            const ages = _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES.map((a, i)=>({\n                    ...a,\n                    id: a.name,\n                    isActive: true,\n                    isPredefined: true,\n                    order: i\n                }));\n            const buildings = _data_buildingInfo__WEBPACK_IMPORTED_MODULE_8__.INITIAL_BUILDINGS.map((b, i)=>({\n                    ...b,\n                    buildLimit: b.isUnique ? 1 : 0,\n                    isActive: true,\n                    isPredefined: true,\n                    order: i,\n                    unlockedInAge: \"Nomadic Age\",\n                    iconId: b.id,\n                    canTrainUnits: b.canTrainUnits,\n                    upgradesTo: b.upgradesTo || []\n                }));\n            const units = _data_unitInfo__WEBPACK_IMPORTED_MODULE_9__.INITIAL_UNITS.map((u, i)=>({\n                    ...u,\n                    isActive: true,\n                    isPredefined: true,\n                    order: i\n                }));\n            setMasterAgeList(ages);\n            setMasterBuildingList(buildings);\n            setMasterUnitList(units);\n            return {\n                allAgeConfigs: ages,\n                allBuildingConfigs: buildings,\n                allUnitConfigs: units\n            };\n        } finally{\n            setIsAppLoading(false);\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchSavesAndConfigs();\n    }, [\n        fetchSavesAndConfigs\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && civilization && currentSaveName) {\n            const fullState = {\n                civilization,\n                resources,\n                units,\n                buildings,\n                currentAge,\n                gameLog,\n                activeTasks,\n                resourceNodes,\n                inventory,\n                activeBuffs\n            };\n            (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveGameState)(currentSaveName, fullState);\n        }\n    }, [\n        civilization,\n        resources,\n        units,\n        buildings,\n        currentAge,\n        gameLog,\n        gameState,\n        currentSaveName,\n        activeTasks,\n        resourceNodes,\n        inventory,\n        activeBuffs\n    ]);\n    const addNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n        const id = \"\".concat(Date.now(), \"-\").concat(Math.random());\n        setNotifications((prev)=>[\n                {\n                    id,\n                    message\n                }\n            ]);\n    }, []);\n    const removeNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{\n        setNotifications((prev)=>prev.filter((n)=>n.id !== id));\n    }, []);\n    const addToLog = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message, icon)=>{\n        setGameLog((prev)=>[\n                {\n                    id: \"\".concat(Date.now(), \"-\").concat(Math.random()),\n                    message,\n                    icon\n                },\n                ...prev.slice(0, 19)\n            ]);\n    }, []);\n    const updateResources = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((deltas)=>{\n        setResources((prev)=>{\n            const newResources = {\n                ...prev\n            };\n            for(const key in deltas){\n                const resourceKey = key;\n                var _deltas_resourceKey;\n                newResources[resourceKey] = Math.max(0, newResources[resourceKey] + ((_deltas_resourceKey = deltas[resourceKey]) !== null && _deltas_resourceKey !== void 0 ? _deltas_resourceKey : 0));\n            }\n            return newResources;\n        });\n        setResourceDeltas((prev)=>({\n                ...prev,\n                ...deltas\n            }));\n        for(const key in deltas){\n            const resourceKey = key;\n            if (deltaTimeoutRef.current[resourceKey]) {\n                window.clearTimeout(deltaTimeoutRef.current[resourceKey]);\n            }\n            deltaTimeoutRef.current[resourceKey] = window.setTimeout(()=>{\n                setResourceDeltas((prev)=>{\n                    const newDeltas = {\n                        ...prev\n                    };\n                    delete newDeltas[resourceKey];\n                    return newDeltas;\n                });\n            }, 1500);\n        }\n    }, []);\n    const handleTaskCompletion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((task)=>{\n        var _task_payload;\n        if (((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.villagerIds) && task.payload.villagerIds.length > 0) {\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>task.payload.villagerIds.includes(v.id) ? {\n                            ...v,\n                            currentTask: null\n                        } : v)\n                }));\n        }\n        switch(task.type){\n            case \"build\":\n                {\n                    const { buildingType, position } = task.payload;\n                    const buildingInfo = buildingList.find((b)=>b.id === buildingType);\n                    const [name] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                    const newBuilding = {\n                        id: task.id,\n                        name,\n                        position: position,\n                        currentHp: buildingInfo.hp\n                    };\n                    setBuildings((p)=>{\n                        const currentBuildings = p[buildingType] || [];\n                        return {\n                            ...p,\n                            [buildingType]: [\n                                ...currentBuildings,\n                                newBuilding\n                            ]\n                        };\n                    });\n                    addToLog(\"\".concat(task.payload.villagerIds.length, \" builder(s) have constructed \").concat(name, \", a new \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n                    setActivityStatus(\"Construction of \".concat(name, \" is complete.\"));\n                    break;\n                }\n            case \"gather\":\n                break;\n            case \"train_villager\":\n                {\n                    const { count } = task.payload;\n                    const newVillagerNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", count);\n                    const newVillagers = newVillagerNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(name),\n                            name,\n                            currentTask: null\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            villagers: [\n                                ...p.villagers,\n                                ...newVillagers\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" new villager(s) have joined your settlement.\"), \"villager\");\n                    setActivityStatus(\"\".concat(count, \" new villager(s) are ready to work.\"));\n                    break;\n                }\n            case \"train_military\":\n                {\n                    const { unitType, count } = task.payload;\n                    const unitInfo = unitList.find((u)=>u.id === unitType);\n                    const newUnitNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"soldier\", count);\n                    const newUnits = newUnitNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(unitType, \"-\").concat(name),\n                            name,\n                            title: \"\",\n                            unitType: unitType\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            military: [\n                                ...p.military,\n                                ...newUnits\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" \").concat(unitInfo.name, \"(s) have been trained.\"), unitType);\n                    setActivityStatus(\"\".concat(count, \" new \").concat(unitInfo.name, \"(s) are ready for battle.\"));\n                    break;\n                }\n            case \"advance_age\":\n                {\n                    const activeAges = masterAgeList.filter((a)=>a.isActive);\n                    const currentIndex = activeAges.findIndex((age)=>age.name === currentAge);\n                    const ageResult = activeAges[currentIndex + 1] || {\n                        name: \"Age of Legends\",\n                        description: \"Your civilization transcends history and becomes a legend.\"\n                    };\n                    setCurrentAge(ageResult.name);\n                    addToLog(\"You have advanced to the \".concat(ageResult.name, \"!\"), \"age\");\n                    addToLog(ageResult.description, \"age\");\n                    setActivityStatus(\"Welcome to the \".concat(ageResult.name, \"!\"));\n                    break;\n                }\n        }\n    }, [\n        currentAge,\n        addToLog,\n        buildingList,\n        unitList,\n        masterAgeList\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState !== _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING) {\n            if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n            return;\n        }\n        const gameLoop = ()=>{\n            const now = Date.now();\n            const deltaTime = now - lastTickRef.current;\n            lastTickRef.current = now;\n            let completedTasks = [];\n            let resourceDeltasThisTick = {};\n            setActiveBuffs((prev)=>{\n                var _prev_resourceBoost, _prev_resourceBoost1;\n                const newResourceBoosts = (_prev_resourceBoost = prev.resourceBoost) === null || _prev_resourceBoost === void 0 ? void 0 : _prev_resourceBoost.filter((b)=>b.endTime > now);\n                if ((newResourceBoosts === null || newResourceBoosts === void 0 ? void 0 : newResourceBoosts.length) !== ((_prev_resourceBoost1 = prev.resourceBoost) === null || _prev_resourceBoost1 === void 0 ? void 0 : _prev_resourceBoost1.length)) {\n                    addToLog(\"A resource gathering bonus has expired.\", \"system\");\n                }\n                return {\n                    ...prev,\n                    resourceBoost: newResourceBoosts\n                };\n            });\n            const tasksInProgress = activeTasks.map((task)=>{\n                if (now >= task.startTime + task.duration) {\n                    completedTasks.push(task);\n                    return null;\n                }\n                if (task.type === \"gather\") {\n                    var _task_payload_villagerIds, _task_payload, _activeBuffs_resourceBoost_find, _activeBuffs_resourceBoost;\n                    const node = resourceNodes.find((n)=>{\n                        var _task_payload;\n                        return n.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.resourceNodeId);\n                    });\n                    const villagerCount = ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 0;\n                    if (!node || villagerCount === 0) {\n                        completedTasks.push(task);\n                        return null;\n                    }\n                    const baseRatePerSecond = GATHER_INFO[node.type].rate;\n                    let civBonusMultiplier = 1;\n                    if (civilization === null || civilization === void 0 ? void 0 : civilization.bonus.toLowerCase().includes(node.type.toLowerCase())) {\n                        const match = civilization.bonus.match(/(\\d+)%/);\n                        if (match === null || match === void 0 ? void 0 : match[1]) civBonusMultiplier = 1 + parseInt(match[1], 10) / 100;\n                    }\n                    const itemBoostMultiplier = ((_activeBuffs_resourceBoost = activeBuffs.resourceBoost) === null || _activeBuffs_resourceBoost === void 0 ? void 0 : (_activeBuffs_resourceBoost_find = _activeBuffs_resourceBoost.find((b)=>b.resource === node.type)) === null || _activeBuffs_resourceBoost_find === void 0 ? void 0 : _activeBuffs_resourceBoost_find.multiplier) || 1;\n                    const finalRatePerSecond = baseRatePerSecond * civBonusMultiplier * itemBoostMultiplier;\n                    resourceDeltasThisTick[node.type] = (resourceDeltasThisTick[node.type] || 0) + finalRatePerSecond / 1000 * deltaTime * villagerCount;\n                }\n                return task;\n            }).filter(Boolean);\n            if (Object.keys(resourceDeltasThisTick).length > 0) {\n                updateResources(resourceDeltasThisTick);\n                setResourceNodes((prevNodes)=>prevNodes.map((node)=>{\n                        const amountToDecrement = resourceDeltasThisTick[node.type];\n                        if (!amountToDecrement) return node;\n                        const newAmount = node.amount - amountToDecrement;\n                        if (newAmount <= 0) {\n                            const taskId = \"gather-\".concat(node.id);\n                            const task = tasksInProgress.find((t)=>t.id === taskId);\n                            if (task) {\n                                var _task_payload_villagerIds, _task_payload;\n                                addToLog(\"\".concat(((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 0, \" villager(s) depleted a \").concat(node.type, \" source, gaining \").concat(Math.floor(node.amount), \" \").concat(node.type, \".\"), node.type);\n                                setActivityStatus(\"A \".concat(node.type, \" source has been fully depleted.\"));\n                                completedTasks.push(task);\n                            }\n                            return null;\n                        }\n                        return {\n                            ...node,\n                            amount: newAmount\n                        };\n                    }).filter(Boolean));\n            }\n            const finalActiveTasks = tasksInProgress.filter((t)=>!completedTasks.some((ct)=>ct.id === t.id));\n            setActiveTasks(finalActiveTasks);\n            if (completedTasks.length > 0) completedTasks.forEach(handleTaskCompletion);\n            animationFrameRef.current = requestAnimationFrame(gameLoop);\n        };\n        animationFrameRef.current = requestAnimationFrame(gameLoop);\n        return ()=>{\n            if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n        };\n    }, [\n        gameState,\n        activeTasks,\n        resourceNodes,\n        handleTaskCompletion,\n        addToLog,\n        updateResources,\n        units.villagers,\n        civilization,\n        activeBuffs\n    ]);\n    const handleNewEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!civilization || currentEvent) return;\n        const event = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedGameEvent)();\n        setCurrentEvent(event);\n        setActivityStatus(\"A new event requires your attention!\");\n    }, [\n        civilization,\n        currentEvent\n    ]);\n    const scheduleNextEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        eventTimerRef.current = setTimeout(()=>handleNewEvent(), (10 + Math.random() * 15) * 1000);\n    }, [\n        handleNewEvent\n    ]);\n    const generateResourceNodes = (existingPositions)=>{\n        const nodes = [];\n        const types = [\n            \"food\",\n            \"wood\",\n            \"gold\",\n            \"stone\"\n        ];\n        const numNodes = 20 + Math.floor(Math.random() * 10);\n        for(let i = 0; i < numNodes; i++){\n            let pos;\n            do {\n                pos = {\n                    x: Math.floor(Math.random() * MAP_DIMENSIONS.width),\n                    y: Math.floor(Math.random() * MAP_DIMENSIONS.height)\n                };\n            }while (existingPositions.has(\"\".concat(pos.x, \",\").concat(pos.y)));\n            existingPositions.add(\"\".concat(pos.x, \",\").concat(pos.y));\n            const type = types[Math.floor(Math.random() * types.length)];\n            nodes.push({\n                id: \"\".concat(Date.now(), \"-node-\").concat(i),\n                type,\n                position: pos,\n                amount: Math.floor(Math.random() * 2001) + 500\n            });\n        }\n        return nodes;\n    };\n    const handleStartNewGame = async (saveName)=>{\n        var _localAgeProgressionList_;\n        if (allSaves.includes(saveName)) {\n            addNotification('A saga named \"'.concat(saveName, '\" already exists.'));\n            return;\n        }\n        const configs = await fetchSavesAndConfigs();\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n        setCurrentSaveName(saveName);\n        const localAgeProgressionList = configs.allAgeConfigs.filter((a)=>a.isActive);\n        const civ = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedCivilization)();\n        setCivilization(civ);\n        setResources({\n            food: 200,\n            wood: 150,\n            gold: 50,\n            stone: 100\n        });\n        const initialVillagers = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", 3).map((name)=>({\n                id: \"\".concat(Date.now(), \"-\").concat(name),\n                name,\n                currentTask: null\n            }));\n        setUnits({\n            villagers: initialVillagers,\n            military: []\n        });\n        const tcPosition = {\n            x: Math.floor(MAP_DIMENSIONS.width / 2),\n            y: Math.floor(MAP_DIMENSIONS.height / 2)\n        };\n        const tcInfo = configs.allBuildingConfigs.find((b)=>b.id === \"townCenter\");\n        const initialTC = {\n            id: \"\".concat(Date.now(), \"-tc\"),\n            name: (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1)[0],\n            position: tcPosition,\n            currentHp: tcInfo.hp\n        };\n        setBuildings({\n            ...initialBuildingsState,\n            townCenter: [\n                initialTC\n            ]\n        });\n        setResourceNodes(generateResourceNodes(new Set([\n            \"\".concat(tcPosition.x, \",\").concat(tcPosition.y)\n        ])));\n        setCurrentAge(((_localAgeProgressionList_ = localAgeProgressionList[0]) === null || _localAgeProgressionList_ === void 0 ? void 0 : _localAgeProgressionList_.name) || _data_ageInfo__WEBPACK_IMPORTED_MODULE_7__.INITIAL_AGES[0].name);\n        setGameLog([]);\n        setCurrentEvent(null);\n        setUnlimitedResources(false);\n        setActiveTasks([]);\n        setInventory([]);\n        setActiveBuffs({\n            resourceBoost: []\n        });\n        addToLog(\"\".concat(civ.name, \" has been founded!\"), \"system\");\n        addToLog(\"Your story begins...\", \"system\");\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        setActivityStatus(\"Your settlement awaits your command.\");\n    };\n    const isVillagerBusy = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        var _units_villagers_find;\n        return !!((_units_villagers_find = units.villagers.find((v)=>v.id === villagerId)) === null || _units_villagers_find === void 0 ? void 0 : _units_villagers_find.currentTask);\n    }, [\n        units.villagers\n    ]);\n    const getVillagerTaskDetails = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        var _buildingList_find, _resourceNodes_find;\n        const villager = units.villagers.find((v)=>v.id === villagerId);\n        if (!(villager === null || villager === void 0 ? void 0 : villager.currentTask)) return \"Idle\";\n        const task = activeTasks.find((t)=>t.id === villager.currentTask);\n        if (!task) return \"Idle (Finalizing Task)\";\n        if (task.type === \"build\") return \"Busy: Constructing \".concat(((_buildingList_find = buildingList.find((b)=>b.id === task.payload.buildingType)) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name) || \"a building\");\n        if (task.type === \"gather\") return \"Busy: Gathering \".concat(((_resourceNodes_find = resourceNodes.find((n)=>n.id === task.payload.resourceNodeId)) === null || _resourceNodes_find === void 0 ? void 0 : _resourceNodes_find.type) || \"resources\");\n        return \"Idle\";\n    }, [\n        activeTasks,\n        resourceNodes,\n        units.villagers,\n        buildingList\n    ]);\n    const handleResumeGame = async (saveName)=>{\n        const configs = await fetchSavesAndConfigs();\n        const savedState = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.loadGameState)(saveName);\n        if (savedState) {\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n            setCurrentSaveName(saveName);\n            setCivilization(savedState.civilization);\n            setResources(savedState.resources);\n            const migratedVillagers = (savedState.units.villagers || []).map((v)=>({\n                    ...v,\n                    currentTask: v.currentTask !== undefined ? v.currentTask : null\n                }));\n            const migratedTasks = (savedState.activeTasks || []).map((t)=>{\n                var _t_payload;\n                return t.type === \"build\" && !((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.villagerIds) ? {\n                    ...t,\n                    payload: {\n                        ...t.payload,\n                        villagerIds: []\n                    }\n                } : t;\n            });\n            migratedTasks.forEach((task)=>{\n                var _task_payload_villagerIds, _task_payload;\n                return (_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.forEach((vid)=>{\n                    const v = migratedVillagers.find((v)=>v.id === vid);\n                    if (v) v.currentTask = task.id;\n                });\n            });\n            setUnits({\n                ...savedState.units,\n                villagers: migratedVillagers\n            });\n            const constructionTasks = migratedTasks.filter((t)=>t.type === \"build\");\n            const occupiedCells = new Set([\n                ...Object.values(savedState.buildings || {}).flat().map((b)=>\"\".concat(b.position.x, \",\").concat(b.position.y)),\n                ...constructionTasks.map((t)=>\"\".concat(t.payload.position.x, \",\").concat(t.payload.position.y))\n            ]);\n            let finalBuildings = {\n                ...initialBuildingsState,\n                ...savedState.buildings || {}\n            };\n            Object.keys(finalBuildings).forEach((bType)=>{\n                const info = configs.allBuildingConfigs.find((b)=>b.id === bType);\n                if (info) finalBuildings[bType] = finalBuildings[bType].map((b)=>({\n                        ...b,\n                        currentHp: b.currentHp === undefined ? info.hp : b.currentHp\n                    }));\n            });\n            if (!finalBuildings.townCenter || finalBuildings.townCenter.length === 0) {\n                let tcPos = {\n                    x: 10,\n                    y: 5\n                };\n                while(occupiedCells.has(\"\".concat(tcPos.x, \",\").concat(tcPos.y))){\n                    tcPos.x++;\n                }\n                const tcInfo = configs.allBuildingConfigs.find((b)=>b.id === \"townCenter\");\n                finalBuildings.townCenter = [\n                    {\n                        id: \"\".concat(Date.now(), \"-tc\"),\n                        name: (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1)[0],\n                        position: tcPos,\n                        currentHp: tcInfo.hp\n                    }\n                ];\n                occupiedCells.add(\"\".concat(tcPos.x, \",\").concat(tcPos.y));\n            }\n            setBuildings(finalBuildings);\n            setResourceNodes((savedState.resourceNodes || []).length === 0 ? generateResourceNodes(occupiedCells) : savedState.resourceNodes || []);\n            setCurrentAge(savedState.currentAge);\n            setGameLog(savedState.gameLog);\n            setActiveTasks(migratedTasks);\n            setInventory(savedState.inventory || []);\n            setActiveBuffs(savedState.activeBuffs || {\n                resourceBoost: []\n            });\n            setCurrentEvent(null);\n            setActivityStatus(\"Welcome back to your saga.\");\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        } else {\n            addNotification('Could not find a saved game named \"'.concat(saveName, '\".'));\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState !== _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING) return;\n        if (!currentEvent) scheduleNextEvent();\n        else if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        return ()=>{\n            if (eventTimerRef.current) clearTimeout(eventTimerRef.current);\n        };\n    }, [\n        gameState,\n        currentEvent,\n        scheduleNextEvent\n    ]);\n    const handleEventChoice = (choice)=>{\n        if (choice.cost) {\n            const missing = Object.keys(choice.cost).filter((res)=>resources[res] < (choice.cost[res] || 0));\n            if (missing.length > 0) {\n                addNotification(\"You lack the required resources: \".concat(missing.join(\", \"), \".\"));\n                return;\n            }\n            updateResources(Object.entries(choice.cost).reduce((acc, param)=>{\n                let [k, v] = param;\n                return {\n                    ...acc,\n                    [k]: -v\n                };\n            }, {}));\n        }\n        const isSuccess = choice.successChance === undefined || Math.random() < choice.successChance;\n        const effects = isSuccess ? choice.successEffects : choice.failureEffects;\n        if (!effects) {\n            setCurrentEvent(null);\n            scheduleNextEvent();\n            return;\n        }\n        let logMessage = 'Decision: \"'.concat(choice.text, '\". Outcome: ').concat(isSuccess ? \"Success\" : \"Failure\", \". \").concat(effects.log);\n        effects.rewards.forEach((reward)=>{\n            if (reward.type === \"resource\") {\n                const amount = Array.isArray(reward.amount) ? Math.floor(Math.random() * (reward.amount[1] - reward.amount[0] + 1)) + reward.amount[0] : reward.amount;\n                if (amount !== 0) {\n                    updateResources({\n                        [reward.resource]: amount\n                    });\n                    logMessage += \" You \".concat(amount > 0 ? \"gained\" : \"lost\", \" \").concat(Math.abs(amount), \" \").concat(reward.resource, \".\");\n                }\n            } else if (reward.type === \"item\") {\n                const itemInfo = _data_itemContent__WEBPACK_IMPORTED_MODULE_6__.GAME_ITEMS[reward.itemId];\n                if (itemInfo) {\n                    const newItems = Array.from({\n                        length: reward.amount\n                    }, (_, i)=>({\n                            ...itemInfo,\n                            id: \"\".concat(reward.itemId, \"-\").concat(Date.now(), \"-\").concat(i)\n                        }));\n                    setInventory((prev)=>[\n                            ...prev,\n                            ...newItems\n                        ]);\n                    logMessage += \" You received \".concat(reward.amount, \"x \").concat(itemInfo.name, \"!\");\n                }\n            } else if (reward.type === \"unit\" && reward.unitType === \"villager\") {\n                const newVillagers = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", reward.amount).map((name)=>({\n                        id: \"\".concat(Date.now(), \"-\").concat(name),\n                        name,\n                        currentTask: null\n                    }));\n                setUnits((p)=>({\n                        ...p,\n                        villagers: [\n                            ...p.villagers,\n                            ...newVillagers\n                        ]\n                    }));\n                logMessage += \" You gained \".concat(reward.amount, \" villager(s).\");\n            } else if (reward.type === \"building\") {\n                const buildingInfo = buildingList.find((b)=>b.id === reward.buildingId);\n                if (buildingInfo) {\n                    const occupiedCells = new Set();\n                    Object.values(buildings).flat().forEach((b)=>occupiedCells.add(\"\".concat(b.position.x, \",\").concat(b.position.y)));\n                    activeTasks.filter((t)=>t.type === \"build\").forEach((t)=>{\n                        var _t_payload;\n                        return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.position) && occupiedCells.add(\"\".concat(t.payload.position.x, \",\").concat(t.payload.position.y));\n                    });\n                    resourceNodes.forEach((n)=>occupiedCells.add(\"\".concat(n.position.x, \",\").concat(n.position.y)));\n                    let placed = false;\n                    for(let i = 0; i < MAP_DIMENSIONS.width * MAP_DIMENSIONS.height; i++){\n                        const x = Math.floor(Math.random() * MAP_DIMENSIONS.width);\n                        const y = Math.floor(Math.random() * MAP_DIMENSIONS.height);\n                        if (!occupiedCells.has(\"\".concat(x, \",\").concat(y))) {\n                            const [name] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                            const newBuilding = {\n                                id: \"reward-\".concat(Date.now()),\n                                name,\n                                position: {\n                                    x,\n                                    y\n                                },\n                                currentHp: buildingInfo.hp\n                            };\n                            setBuildings((p)=>({\n                                    ...p,\n                                    [reward.buildingId]: [\n                                        ...p[reward.buildingId] || [],\n                                        newBuilding\n                                    ]\n                                }));\n                            logMessage += \" You were gifted a new \".concat(buildingInfo.name, \"!\");\n                            placed = true;\n                            break;\n                        }\n                    }\n                    if (!placed) logMessage += \" You were to be gifted a \".concat(buildingInfo.name, \", but there was no room to build it!\");\n                }\n            }\n        });\n        addToLog(logMessage, \"event\");\n        setActivityStatus(effects.log);\n        setCurrentEvent(null);\n        scheduleNextEvent();\n    };\n    const handleInitiateBuild = (villagerId, rect)=>{\n        if (isVillagerBusy(villagerId)) {\n            addNotification(\"This villager is already busy.\");\n            return;\n        }\n        setBuildPanelState({\n            isOpen: true,\n            villagerId,\n            anchorRect: rect\n        });\n        setUnitManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleStartPlacement = (buildingId)=>{\n        var _buildings_buildingInfo_id;\n        const villagerId = buildPanelState.villagerId;\n        if (!villagerId) return;\n        const buildingInfo = buildingList.find((b)=>b.id === buildingId);\n        if (!buildingInfo) return;\n        const existingCount = ((_buildings_buildingInfo_id = buildings[buildingInfo.id]) === null || _buildings_buildingInfo_id === void 0 ? void 0 : _buildings_buildingInfo_id.length) || 0;\n        const constructingCount = activeTasks.filter((t)=>{\n            var _t_payload;\n            return t.type === \"build\" && ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.buildingType) === buildingInfo.id;\n        }).length;\n        const totalCount = existingCount + constructingCount;\n        const limit = buildingInfo.buildLimit || 0;\n        if (limit > 0 && totalCount >= limit) {\n            addNotification(\"You have reached the build limit for \".concat(buildingInfo.name, \" (\").concat(limit, \").\"));\n            return;\n        }\n        const missing = unlimitedResources ? [] : Object.keys(buildingInfo.cost).filter((res)=>resources[res] < (buildingInfo.cost[res] || 0));\n        if (missing.length > 0) {\n            addNotification(\"Need more \".concat(missing.join(\", \"), \".\"));\n            return;\n        }\n        setPlayerAction({\n            mode: \"build\",\n            buildingType: buildingId,\n            villagerId\n        });\n        setBuildPanelState({\n            isOpen: false,\n            villagerId: null,\n            anchorRect: null\n        });\n        setActivityStatus(\"Select a location to build a \".concat(buildingInfo.name, \". Right-click to cancel.\"));\n    };\n    const handleConfirmPlacement = (position)=>{\n        if ((playerAction === null || playerAction === void 0 ? void 0 : playerAction.mode) !== \"build\") return;\n        const { buildingType, villagerId } = playerAction;\n        const buildingInfo = buildingList.find((b)=>b.id === buildingType);\n        const builder = units.villagers.find((v)=>v.id === villagerId);\n        if (!buildingInfo || !builder) return;\n        if (!unlimitedResources) updateResources(Object.entries(buildingInfo.cost).reduce((acc, param)=>{\n            let [k, v] = param;\n            return {\n                ...acc,\n                [k]: -v\n            };\n        }, {}));\n        let buildTime = buildingInfo.buildTime * 1000;\n        if (activeBuffs.buildTimeReduction) {\n            buildTime *= 1 - activeBuffs.buildTimeReduction.percentage;\n            addToLog(\"A Builder's Charm reduced construction time by \".concat(activeBuffs.buildTimeReduction.percentage * 100, \"%!\"), \"item\");\n            setActiveBuffs((prev)=>({\n                    ...prev,\n                    buildTimeReduction: prev.buildTimeReduction.uses - 1 > 0 ? {\n                        ...prev.buildTimeReduction,\n                        uses: prev.buildTimeReduction.uses - 1\n                    } : undefined\n                }));\n        }\n        const taskId = \"\".concat(Date.now(), \"-build-\").concat(buildingType);\n        const taskPayload = {\n            buildingType,\n            villagerIds: [\n                villagerId\n            ],\n            position\n        };\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: taskId,\n                type: \"build\",\n                startTime: 0,\n                duration: 0,\n                payload: {\n                    ...taskPayload,\n                    position\n                }\n            });\n        } else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: taskId,\n                        type: \"build\",\n                        startTime: Date.now(),\n                        duration: buildTime,\n                        payload: taskPayload\n                    }\n                ]);\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>v.id === villagerId ? {\n                            ...v,\n                            currentTask: taskId\n                        } : v)\n                }));\n            setActivityStatus(\"\".concat(builder.name, \" has started constructing a \").concat(buildingInfo.name, \".\"));\n            addToLog(\"\".concat(builder.name, \" began construction of a new \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n        }\n        setPlayerAction(null);\n    };\n    const handleCancelPlayerAction = ()=>{\n        setPlayerAction(null);\n        setActivityStatus(\"Command cancelled.\");\n    };\n    const handleDemolishBuilding = (type, id)=>{\n        var _buildings_townCenter;\n        if (type === \"townCenter\") {\n            addNotification(\"The Town Center is the heart of your civilization and cannot be demolished.\");\n            return;\n        }\n        if (activeTasks.some((t)=>{\n            var _t_payload;\n            return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.buildingId) === id;\n        })) {\n            addNotification(\"Cannot demolish a building with an active task.\");\n            return;\n        }\n        const buildingInfo = buildingList.find((b)=>b.id === type);\n        const buildingInstance = buildings[type].find((b)=>b.id === id);\n        if (!buildingInfo || !buildingInstance) return;\n        if (type === \"houses\" && population.current > (((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter.length) > 0 ? 20 : 0) + (buildings.houses.length - 1) * 5) {\n            addNotification(\"Cannot demolish this house, your people would be homeless.\");\n            return;\n        }\n        const refund = Object.entries(buildingInfo.cost).reduce((acc, param)=>{\n            let [res, cost] = param;\n            const amount = Math.floor((cost || 0) * 0.5);\n            if (amount > 0) acc[res] = amount;\n            return acc;\n        }, {});\n        if (Object.keys(refund).length > 0) {\n            updateResources(refund);\n            addNotification(\"Salvaged \".concat(Object.entries(refund).map((param)=>{\n                let [r, a] = param;\n                return \"\".concat(a, \" \").concat(r);\n            }).join(\", \"), \".\"));\n        }\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((b)=>b.id !== id)\n            }));\n        addToLog(\"\".concat(buildingInstance.name, \" (\").concat(buildingInfo.name, \") was demolished.\"), buildingInfo.iconId);\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleUpdateBuilding = (type, id, name)=>{\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].map((b)=>b.id === id ? {\n                        ...b,\n                        name\n                    } : b)\n            }));\n        addNotification(\"Building renamed.\");\n    };\n    const handleTrainVillagers = (count)=>{\n        var _buildings_townCenter;\n        if (activeTasks.some((t)=>t.type === \"train_villager\") || count <= 0) return;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more villagers.\"));\n            return;\n        }\n        if (!((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter[0])) {\n            addNotification(\"No Town Center to train villagers.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            const totalCost = 50 * count;\n            if (resources.food < totalCost) {\n                addNotification(\"Need \".concat(totalCost - resources.food, \" more Food.\"));\n                return;\n            }\n            updateResources({\n                food: -totalCost\n            });\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"train_villager\",\n            startTime: 0,\n            duration: 0,\n            payload: {\n                count\n            }\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-train-villager\"),\n                        type: \"train_villager\",\n                        startTime: Date.now(),\n                        duration: 10000 * count,\n                        payload: {\n                            count,\n                            buildingId: buildings.townCenter[0].id\n                        }\n                    }\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" villager(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new villager(s).\"), \"villager\");\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleTrainUnits = (unitType, count)=>{\n        var _buildings_unitInfo_requiredBuilding;\n        const unitInfo = unitList.find((u)=>u.id === unitType);\n        if (!unitInfo || activeTasks.some((t)=>{\n            var _t_payload;\n            return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.unitType) === unitType;\n        }) || count <= 0) return;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more units.\"));\n            return;\n        }\n        const trainingBuilding = (_buildings_unitInfo_requiredBuilding = buildings[unitInfo.requiredBuilding]) === null || _buildings_unitInfo_requiredBuilding === void 0 ? void 0 : _buildings_unitInfo_requiredBuilding[0];\n        if (!trainingBuilding) {\n            var _buildingList_find;\n            addNotification(\"No \".concat((_buildingList_find = buildingList.find((b)=>b.id === unitInfo.requiredBuilding)) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name, \" to train units.\"));\n            return;\n        }\n        if (!unlimitedResources) {\n            const missing = Object.keys(unitInfo.cost).filter((res)=>resources[res] < (unitInfo.cost[res] || 0) * count);\n            if (missing.length > 0) {\n                addNotification(\"Need more \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources(Object.entries(unitInfo.cost).reduce((acc, param)=>{\n                let [k, v] = param;\n                return {\n                    ...acc,\n                    [k]: -(v || 0) * count\n                };\n            }, {}));\n        }\n        let trainTime = unitInfo.trainTime * 1000 * count;\n        if (activeBuffs.permanentTrainTimeReduction) trainTime *= 1 - activeBuffs.permanentTrainTimeReduction;\n        if (activeBuffs.trainTimeReduction) {\n            const applicable = Math.min(count, activeBuffs.trainTimeReduction.uses);\n            trainTime = unitInfo.trainTime * 1000 * applicable * (1 - activeBuffs.trainTimeReduction.percentage) + unitInfo.trainTime * 1000 * (count - applicable);\n            if (activeBuffs.trainTimeReduction.uses - applicable > 0) setActiveBuffs((prev)=>({\n                    ...prev,\n                    trainTimeReduction: {\n                        ...prev.trainTimeReduction,\n                        uses: prev.trainTimeReduction.uses - applicable\n                    }\n                }));\n            else {\n                setActiveBuffs((prev)=>({\n                        ...prev,\n                        trainTimeReduction: undefined\n                    }));\n                addToLog(\"The Drillmaster's Whistle buff has been fully used.\", \"item\");\n            }\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"train_military\",\n            startTime: 0,\n            duration: 0,\n            payload: {\n                unitType,\n                count\n            }\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-train-\").concat(unitType),\n                        type: \"train_military\",\n                        startTime: Date.now(),\n                        duration: trainTime,\n                        payload: {\n                            unitType,\n                            count,\n                            buildingId: trainingBuilding.id\n                        }\n                    }\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" \").concat(unitInfo.name, \"(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new \").concat(unitInfo.name, \"(s).\"), unitType);\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            instanceId: null,\n            anchorRect: null\n        });\n    };\n    const handleDismissSpecificUnit = (type, id)=>{\n        if (type === \"villagers\" && isVillagerBusy(id)) {\n            addNotification(\"Cannot dismiss a busy villager.\");\n            return;\n        }\n        const unit = units[type].find((u)=>u.id === id);\n        if (!unit) return;\n        if (type === \"villagers\" && units.villagers.length <= 1) {\n            addNotification(\"Cannot dismiss your last villager.\");\n            return;\n        }\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((u)=>u.id !== id)\n            }));\n        const unitTypeName = type === \"villagers\" ? \"villager\" : unit.unitType;\n        addToLog(\"\".concat(unit.name, \" the \").concat(unitTypeName, \" has been dismissed.\"), type === \"villagers\" ? \"villager\" : unit.unitType);\n        addNotification(\"\".concat(unit.name, \" was dismissed.\"));\n    };\n    const handleUpdateUnit = (type, id, name, title)=>{\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].map((u)=>u.id === id ? type === \"military\" && title !== undefined ? {\n                        ...u,\n                        name,\n                        title\n                    } : {\n                        ...u,\n                        name\n                    } : u)\n            }));\n        addNotification(\"Unit updated.\");\n    };\n    const handleAssignVillagersToConstruction = (constructionId, count)=>{\n        var _task_payload_villagerIds, _task_payload, _task_payload_villagerIds1, _task_payload1;\n        const idleVillagers = units.villagers.filter((v)=>!v.currentTask);\n        if (count <= 0 || idleVillagers.length === 0) {\n            addNotification(\"No idle villagers available.\");\n            return;\n        }\n        const task = activeTasks.find((t)=>t.id === constructionId);\n        if (!task || task.type !== \"build\") return;\n        const buildingInfo = buildingList.find((b)=>{\n            var _task_payload;\n            return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n        });\n        if (!buildingInfo) return;\n        const cappedCount = Math.min(count, idleVillagers.length);\n        const villagersToAssign = idleVillagers.slice(0, cappedCount).map((v)=>v.id);\n        const workDone = (Date.now() - task.startTime) * (((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 1);\n        const workRemaining = Math.max(0, buildingInfo.buildTime * 1000 - workDone);\n        const newWorkerCount = (((_task_payload1 = task.payload) === null || _task_payload1 === void 0 ? void 0 : (_task_payload_villagerIds1 = _task_payload1.villagerIds) === null || _task_payload_villagerIds1 === void 0 ? void 0 : _task_payload_villagerIds1.length) || 0) + cappedCount;\n        const newRemainingDuration = workRemaining / newWorkerCount;\n        setUnits((prev)=>({\n                ...prev,\n                villagers: prev.villagers.map((v)=>villagersToAssign.includes(v.id) ? {\n                        ...v,\n                        currentTask: constructionId\n                    } : v)\n            }));\n        setActiveTasks((prev)=>prev.map((t)=>t.id === constructionId ? {\n                    ...t,\n                    startTime: Date.now(),\n                    duration: newRemainingDuration,\n                    payload: {\n                        ...t.payload,\n                        villagerIds: [\n                            ...t.payload.villagerIds,\n                            ...villagersToAssign\n                        ]\n                    }\n                } : t));\n        addToLog(\"\".concat(cappedCount, \" villager(s) are now assisting with the \").concat(buildingInfo.name, \".\"), buildingInfo.iconId);\n        setActivityStatus(\"Construction of the \".concat(buildingInfo.name, \" is now faster.\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAssignVillagers = (targetId, count)=>{\n        if (assignmentPanelState.targetType === \"construction\") return handleAssignVillagersToConstruction(targetId, count);\n        const idleVillagers = units.villagers.filter((v)=>!v.currentTask);\n        if (count <= 0 || idleVillagers.length === 0) {\n            addNotification(\"No idle villagers available.\");\n            return;\n        }\n        const targetNode = resourceNodes.find((n)=>n.id === targetId);\n        if (!targetNode) return;\n        const cappedCount = Math.min(count, idleVillagers.length);\n        const villagersToAssign = idleVillagers.slice(0, cappedCount).map((v)=>v.id);\n        const taskId = \"gather-\".concat(targetId);\n        const existingTask = activeTasks.find((t)=>t.id === taskId);\n        if (unlimitedResources) {\n            updateResources({\n                [targetNode.type]: targetNode.amount\n            });\n            addToLog(\"\".concat(cappedCount, \" villager(s) instantly gathered \").concat(Math.floor(targetNode.amount), \" \").concat(targetNode.type, \".\"), targetNode.type);\n            setResourceNodes((prev)=>prev.filter((n)=>n.id !== targetId));\n        } else {\n            if (existingTask) setActiveTasks((prev)=>prev.map((t)=>t.id === taskId ? {\n                        ...t,\n                        payload: {\n                            ...t.payload,\n                            villagerIds: [\n                                ...new Set([\n                                    ...t.payload.villagerIds,\n                                    ...villagersToAssign\n                                ])\n                            ]\n                        }\n                    } : t));\n            else setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: taskId,\n                        type: \"gather\",\n                        startTime: Date.now(),\n                        duration: 999999999,\n                        payload: {\n                            resourceNodeId: targetId,\n                            villagerIds: villagersToAssign\n                        }\n                    }\n                ]);\n            setUnits((prev)=>({\n                    ...prev,\n                    villagers: prev.villagers.map((v)=>villagersToAssign.includes(v.id) ? {\n                            ...v,\n                            currentTask: taskId\n                        } : v)\n                }));\n        }\n        addToLog(\"\".concat(cappedCount, \" villager(s) assigned to gather \").concat(targetNode.type, \".\"), targetNode.type);\n        setActivityStatus(\"\".concat(cappedCount, \" villager(s) are now gathering \").concat(targetNode.type, \".\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleRecallVillagers = (targetId, count, type)=>{\n        var _task_payload_villagerIds, _task_payload;\n        const task = activeTasks.find((t)=>t.id === targetId);\n        var _task_payload_villagerIds_length;\n        if (!task || ((_task_payload_villagerIds_length = (_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) !== null && _task_payload_villagerIds_length !== void 0 ? _task_payload_villagerIds_length : 0) < count) return;\n        const villagersToRecall = task.payload.villagerIds.slice(task.payload.villagerIds.length - count);\n        if (type === \"construction\" && villagersToRecall.length === task.payload.villagerIds.length) {\n            addNotification(\"Cannot recall the last builder from a project.\");\n            return;\n        }\n        setUnits((prev)=>({\n                ...prev,\n                villagers: prev.villagers.map((v)=>villagersToRecall.includes(v.id) ? {\n                        ...v,\n                        currentTask: null\n                    } : v)\n            }));\n        const remainingVillagers = task.payload.villagerIds.filter((id)=>!villagersToRecall.includes(id));\n        if (remainingVillagers.length === 0) {\n            setActiveTasks((prev)=>prev.filter((t)=>t.id !== targetId));\n            const node = resourceNodes.find((n)=>n.id === targetId);\n            if (node) addToLog(\"All villagers recalled from gathering \".concat(node.type, \".\"), \"villager\");\n        } else {\n            const buildingInfo = buildingList.find((b)=>{\n                var _task_payload;\n                return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n            });\n            const workDone = (Date.now() - task.startTime) * task.payload.villagerIds.length;\n            const newRemainingDuration = (buildingInfo.buildTime * 1000 - workDone) / remainingVillagers.length;\n            setActiveTasks((prev)=>prev.map((t)=>t.id === targetId ? {\n                        ...t,\n                        startTime: Date.now(),\n                        duration: newRemainingDuration,\n                        payload: {\n                            ...t.payload,\n                            villagerIds: remainingVillagers\n                        }\n                    } : t));\n            if (type === \"construction\") addToLog(\"\".concat(count, \" builder(s) recalled. Construction will now be slower.\"), \"villager\");\n        }\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAdvanceAge = async ()=>{\n        if (activeTasks.some((t)=>t.type === \"advance_age\")) {\n            addNotification(\"Advancement already in progress.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            const missing = [];\n            if (resources.food < 500) missing.push(\"\".concat(500 - resources.food, \" Food\"));\n            if (resources.gold < 200) missing.push(\"\".concat(200 - resources.gold, \" Gold\"));\n            if (missing.length > 0) {\n                addNotification(\"To advance, you need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources({\n                food: -500,\n                gold: -200\n            });\n        }\n        const activeAges = masterAgeList.filter((a)=>a.isActive);\n        const currentIndex = activeAges.findIndex((age)=>age.name === currentAge);\n        if (currentIndex === -1 || currentIndex + 1 >= activeAges.length) {\n            addNotification(\"You have reached the final available age.\");\n            return;\n        }\n        if (unlimitedResources) handleTaskCompletion({\n            id: \"instant\",\n            type: \"advance_age\",\n            startTime: 0,\n            duration: 0,\n            payload: {}\n        });\n        else {\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    {\n                        id: \"\".concat(Date.now(), \"-advance_age\"),\n                        type: \"advance_age\",\n                        startTime: Date.now(),\n                        duration: 60000\n                    }\n                ]);\n            setActivityStatus(\"Your people begin the long journey to a new age.\");\n            setBuildingManagementPanel({\n                isOpen: false,\n                type: null,\n                instanceId: null,\n                anchorRect: null\n            });\n        }\n    };\n    const handleExitGame = async ()=>{\n        setCurrentSaveName(null);\n        await fetchSavesAndConfigs();\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n    };\n    const handleDeleteGame = async (saveName)=>{\n        await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.deleteGameState)(saveName);\n        await fetchSavesAndConfigs();\n        addNotification('Deleted saga: \"'.concat(saveName, '\"'));\n    };\n    const handleToggleUnlimitedResources = ()=>{\n        const newMode = !unlimitedResources;\n        setUnlimitedResources(newMode);\n        if (newMode) {\n            setResources({\n                food: 99999,\n                wood: 99999,\n                gold: 99999,\n                stone: 99999\n            });\n            addNotification(\"Test Mode: ON - All active tasks completed.\");\n            const depletedNodeIds = new Set();\n            activeTasks.forEach((task)=>{\n                var _task_payload;\n                if (task.type === \"gather\" && ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.resourceNodeId)) {\n                    depletedNodeIds.add(task.payload.resourceNodeId);\n                    const node = resourceNodes.find((n)=>n.id === task.payload.resourceNodeId);\n                    if (node) addToLog(\"Instantly gathered all \".concat(node.type, \" from a depleted source.\"), node.type);\n                }\n                handleTaskCompletion(task);\n            });\n            setActiveTasks([]);\n            if (depletedNodeIds.size > 0) setResourceNodes((prev)=>prev.filter((n)=>!depletedNodeIds.has(n.id)));\n        } else addNotification(\"Test Mode: OFF\");\n    };\n    const handleUseItem = (itemId)=>{\n        const item = inventory.find((i)=>i.id === itemId);\n        if (!item) return;\n        const baseItemId = item.id.split(\"-\")[0];\n        const constructionTasks = activeTasks.filter((t)=>t.type === \"build\");\n        switch(baseItemId){\n            case \"scroll_of_haste\":\n            case \"blueprint_of_the_master\":\n                if (constructionTasks.length > 0) {\n                    var _buildingList_find;\n                    const task = constructionTasks.sort((a, b)=>b.startTime + b.duration - (a.startTime + a.duration))[0];\n                    setActiveTasks((p)=>p.map((t)=>t.id === task.id ? {\n                                ...t,\n                                duration: Math.max(0, t.duration - (baseItemId === \"scroll_of_haste\" ? 15000 : 60000))\n                            } : t));\n                    addToLog(\"Used \".concat(item.name, \" on the \").concat((_buildingList_find = buildingList.find((b)=>{\n                        var _task_payload;\n                        return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n                    })) === null || _buildingList_find === void 0 ? void 0 : _buildingList_find.name, \".\"), \"item\");\n                }\n                break;\n            case \"hearty_meal\":\n                updateResources({\n                    food: 75\n                });\n                addToLog(\"Used \".concat(item.name, \" to gain 75 food.\"), \"item\");\n                break;\n            case \"builders_charm\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        buildTimeReduction: {\n                            percentage: 0.1,\n                            uses: 1\n                        }\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Next building is 10% faster.\"), \"item\");\n                break;\n            case \"drillmasters_whistle\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        trainTimeReduction: {\n                            percentage: 0.25,\n                            uses: 5\n                        }\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Next 5 units train 25% faster.\"), \"item\");\n                break;\n            case \"golden_harvest\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        resourceBoost: [\n                            ...p.resourceBoost || [],\n                            {\n                                resource: \"food\",\n                                multiplier: 1.5,\n                                endTime: Date.now() + 60000\n                            }\n                        ]\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Food gathering boosted by 50% for 60s.\"), \"item\");\n                break;\n            case \"shard_of_the_ancients\":\n                if (constructionTasks.length > 0) {\n                    var _buildingList_find1;\n                    const task = constructionTasks.sort((a, b)=>b.startTime + b.duration - (a.startTime + a.duration))[0];\n                    setActiveTasks((p)=>p.filter((t)=>t.id !== task.id));\n                    handleTaskCompletion(task);\n                    addToLog(\"Used \".concat(item.name, \" to instantly complete the \").concat((_buildingList_find1 = buildingList.find((b)=>{\n                        var _task_payload;\n                        return b.id === ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : _task_payload.buildingType);\n                    })) === null || _buildingList_find1 === void 0 ? void 0 : _buildingList_find1.name, \".\"), \"item\");\n                }\n                break;\n            case \"heart_of_the_mountain\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        resourceBoost: [\n                            ...p.resourceBoost || [],\n                            {\n                                resource: \"gold\",\n                                multiplier: 2,\n                                endTime: Date.now() + 120000\n                            },\n                            {\n                                resource: \"stone\",\n                                multiplier: 2,\n                                endTime: Date.now() + 120000\n                            }\n                        ]\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Gold and Stone gathering doubled for 2 minutes.\"), \"item\");\n                break;\n            case \"banner_of_command\":\n                setActiveBuffs((p)=>({\n                        ...p,\n                        permanentTrainTimeReduction: (p.permanentTrainTimeReduction || 0) + 0.05\n                    }));\n                addToLog(\"Used \".concat(item.name, \". Military units train 5% faster, permanently.\"), \"item\");\n                break;\n            case \"whisper_of_the_creator\":\n                const tasks = [\n                    ...activeTasks\n                ];\n                setActiveTasks([]);\n                tasks.forEach(handleTaskCompletion);\n                addToLog(\"A divine whisper echoes, and all work is instantly finished.\", \"item\");\n                break;\n        }\n        setInventory((prev)=>prev.filter((i)=>i.id !== itemId));\n        setInventoryPanelState({\n            isOpen: false,\n            anchorRect: null\n        });\n    };\n    const buildingCounts = buildingList.reduce((acc, b)=>{\n        var _buildings_b_id;\n        acc[b.id] = ((_buildings_b_id = buildings[b.id]) === null || _buildings_b_id === void 0 ? void 0 : _buildings_b_id.length) || 0;\n        return acc;\n    }, {});\n    const idleVillagerCount = units.villagers.filter((v)=>!v.currentTask).length;\n    const assignmentTarget = assignmentPanelState.targetType === \"resource\" ? resourceNodes.find((n)=>n.id === assignmentPanelState.targetId) : activeTasks.find((t)=>t.type === \"build\" && t.id === assignmentPanelState.targetId);\n    const currentAgeIndex = ageProgressionList.findIndex((a)=>a.name === currentAge);\n    const availableBuildings = buildingList.filter((b)=>{\n        const unlockAgeIndex = ageProgressionList.findIndex((a)=>a.name === b.unlockedInAge);\n        return b.isActive && unlockAgeIndex !== -1 && unlockAgeIndex <= currentAgeIndex;\n    });\n    const activeUnits = unitList.filter((u)=>u.isActive);\n    const closeAllPanels = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setUnitManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                anchorRect: null\n            } : p);\n        setBuildingManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                instanceId: null,\n                anchorRect: null\n            } : p);\n        setBuildPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                villagerId: null,\n                anchorRect: null\n            } : p);\n        setAssignmentPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                targetId: null,\n                targetType: null,\n                anchorRect: null\n            } : p);\n        setCivPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setAllBuildingsPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setInventoryPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n    }, []);\n    const handleOpenBuildingPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((type, instanceId, rect)=>{\n        closeAllPanels();\n        setBuildingManagementPanel({\n            isOpen: true,\n            type,\n            instanceId,\n            anchorRect: rect\n        });\n    }, [\n        closeAllPanels\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleClickOutside = (event)=>{\n            const target = event.target;\n            if (!target.closest(\".sci-fi-panel-popup\")) closeAllPanels();\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return ()=>document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [\n        closeAllPanels\n    ]);\n    const renderContent = ()=>{\n        if (isAppLoading) {\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 853,\n                columnNumber: 20\n            }, undefined);\n        }\n        switch(gameState){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves,\n                    onDeleteGame: handleDeleteGame\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 857,\n                    columnNumber: 42\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 858,\n                    columnNumber: 45\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING:\n                if (!civilization) return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 860,\n                    columnNumber: 43\n                }, undefined);\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_GameUI__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                            civilization: civilization,\n                            resources: resources,\n                            units: units,\n                            buildings: buildings,\n                            population: population,\n                            currentAge: currentAge,\n                            gameLog: gameLog,\n                            resourceDeltas: resourceDeltas,\n                            activityStatus: activityStatus,\n                            unitList: activeUnits,\n                            buildingList: buildingList,\n                            onOpenUnitPanel: (type, rect)=>{\n                                closeAllPanels();\n                                setUnitManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            onOpenAllBuildingsPanel: (rect)=>{\n                                closeAllPanels();\n                                setAllBuildingsPanel({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            playerAction: playerAction,\n                            onConfirmPlacement: handleConfirmPlacement,\n                            onCancelPlayerAction: handleCancelPlayerAction,\n                            onBuildingClick: (building, rect)=>{\n                                closeAllPanels();\n                                const type = Object.keys(buildings).find((key)=>{\n                                    var _buildings_key;\n                                    return (_buildings_key = buildings[key]) === null || _buildings_key === void 0 ? void 0 : _buildings_key.some((b)=>b.id === building.id);\n                                });\n                                if (type) setBuildingManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    instanceId: building.id,\n                                    anchorRect: rect\n                                });\n                            },\n                            mapDimensions: MAP_DIMENSIONS,\n                            activeTasks: activeTasks,\n                            onExitGame: handleExitGame,\n                            onOpenCivPanel: (rect)=>{\n                                closeAllPanels();\n                                setCivPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            resourceNodes: resourceNodes,\n                            onOpenAssignmentPanel: (nodeId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: nodeId,\n                                    targetType: \"resource\",\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenConstructionPanel: (constructionId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: constructionId,\n                                    targetType: \"construction\",\n                                    anchorRect: rect\n                                });\n                            },\n                            gatherInfo: GATHER_INFO,\n                            currentEvent: currentEvent,\n                            onEventChoice: handleEventChoice,\n                            inventory: inventory,\n                            onOpenInventoryPanel: (rect)=>{\n                                closeAllPanels();\n                                setInventoryPanelState({\n                                    isOpen: true,\n                                    anchorRect: null\n                                });\n                            }\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 863,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildPanel__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                            isOpen: buildPanelState.isOpen,\n                            onClose: ()=>setBuildPanelState({\n                                    isOpen: false,\n                                    villagerId: null,\n                                    anchorRect: null\n                                }),\n                            onStartPlacement: handleStartPlacement,\n                            resources: resources,\n                            buildingCounts: buildingCounts,\n                            buildingList: availableBuildings,\n                            anchorRect: buildPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 878,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                            isOpen: unitManagementPanel.isOpen,\n                            onClose: ()=>setUnitManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            type: unitManagementPanel.type,\n                            units: units,\n                            onUpdateUnit: handleUpdateUnit,\n                            onDismissUnit: handleDismissSpecificUnit,\n                            onInitiateBuild: (villagerId, rect)=>{\n                                closeAllPanels();\n                                handleInitiateBuild(villagerId, rect);\n                            },\n                            getVillagerTaskDetails: getVillagerTaskDetails,\n                            anchorRect: unitManagementPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 879,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                            isOpen: buildingManagementPanel.isOpen,\n                            onClose: ()=>setBuildingManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            panelState: buildingManagementPanel,\n                            buildings: buildings,\n                            buildingList: buildingList,\n                            onUpdateBuilding: handleUpdateBuilding,\n                            onDemolishBuilding: handleDemolishBuilding,\n                            onTrainUnits: handleTrainUnits,\n                            onTrainVillagers: handleTrainVillagers,\n                            resources: resources,\n                            population: population,\n                            unitList: activeUnits,\n                            onAdvanceAge: handleAdvanceAge,\n                            activeTasks: activeTasks,\n                            anchorRect: buildingManagementPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 880,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n                            isOpen: assignmentPanelState.isOpen,\n                            onClose: ()=>setAssignmentPanelState({\n                                    isOpen: false,\n                                    targetId: null,\n                                    targetType: null,\n                                    anchorRect: null\n                                }),\n                            assignmentTarget: assignmentTarget || null,\n                            idleVillagerCount: idleVillagerCount,\n                            onAssignVillagers: handleAssignVillagers,\n                            onRecallVillagers: handleRecallVillagers,\n                            gatherInfo: GATHER_INFO,\n                            buildingList: buildingList,\n                            units: units,\n                            anchorRect: assignmentPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 881,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                            isOpen: civPanelState.isOpen,\n                            onClose: ()=>setCivPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            civilization: civilization,\n                            anchorRect: civPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 882,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                            isOpen: allBuildingsPanel.isOpen,\n                            onClose: ()=>setAllBuildingsPanel({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            buildingList: buildingList,\n                            buildingCounts: buildingCounts,\n                            activeTasks: activeTasks,\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            anchorRect: allBuildingsPanel.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 883,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_InventoryPanel__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n                            isOpen: inventoryPanelState.isOpen,\n                            onClose: ()=>setInventoryPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            inventory: inventory,\n                            onUseItem: handleUseItem,\n                            activeTasks: activeTasks,\n                            activeBuffs: activeBuffs,\n                            anchorRect: inventoryPanelState.anchorRect\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 884,\n                            columnNumber: 25\n                        }, undefined)\n                    ]\n                }, void 0, true);\n            default:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves,\n                    onDeleteGame: handleDeleteGame\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 887,\n                    columnNumber: 29\n                }, undefined);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-stone-dark flex items-center justify-center p-4\",\n        children: [\n            gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: handleToggleUnlimitedResources,\n                className: \"fixed bottom-4 left-4 z-[101] bg-brand-gold text-stone-dark font-bold py-1 px-3 rounded-full text-xs shadow-lg hover:scale-105 transition-transform\",\n                \"aria-label\": \"Toggle unlimited resources test mode\",\n                children: [\n                    \"Test Mode: \",\n                    unlimitedResources ? \"ON\" : \"OFF\"\n                ]\n            }, void 0, true, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 894,\n                columnNumber: 18\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_NotificationManager__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n                notifications: notifications,\n                onRemoveNotification: removeNotification\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 896,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: \"w-full max-w-7xl mx-auto\",\n                children: renderContent()\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 897,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/user/studio/src/app/page.tsx\",\n        lineNumber: 892,\n        columnNumber: 9\n    }, undefined);\n};\n_s(GamePage, \"IqFYC9yokIIoqL3RUEuHUkAHYjI=\");\n_c = GamePage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GamePage);\nvar _c;\n$RefreshReg$(_c, \"GamePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ })

});