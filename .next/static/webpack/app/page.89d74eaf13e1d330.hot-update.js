"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./types.ts":
/*!******************!*\
  !*** ./types.ts ***!
  \******************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameStatus: function() { return /* binding */ GameStatus; }\n/* harmony export */ });\nvar GameStatus;\n(function(GameStatus) {\n    GameStatus[GameStatus[\"MENU\"] = 0] = \"MENU\";\n    GameStatus[GameStatus[\"LOADING\"] = 1] = \"LOADING\";\n    GameStatus[GameStatus[\"PLAYING\"] = 2] = \"PLAYING\";\n    GameStatus[GameStatus[\"GAME_OVER\"] = 3] = \"GAME_OVER\";\n})(GameStatus || (GameStatus = {}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3R5cGVzLnRzIiwibWFwcGluZ3MiOiI7Ozs7O1VBZ0JZQTs7Ozs7R0FBQUEsZUFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdHlwZXMudHM/NTY1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmV4cG9ydCBlbnVtIEdhbWVTdGF0dXMge1xuICAgIE1FTlUsXG4gICAgTE9BRElORyxcbiAgICBQTEFZSU5HLFxuICAgIEdBTUVfT1ZFUixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaXZpbGl6YXRpb24ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBsb3JlOiBzdHJpbmc7XG4gICAgYm9udXM6IHN0cmluZztcbiAgICB1bmlxdWVVbml0OiB7XG4gICAgICAgIG5hbWU6c3RyaW5nO1xuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIH07XG4gICAgYmFubmVyVXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFJlc291cmNlcyA9IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG5leHBvcnQgdHlwZSBSZXNvdXJjZURlbHRhcyA9IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlsbGFnZXIge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGN1cnJlbnRUYXNrOiBzdHJpbmcgfCBudWxsOyAvLyBudWxsIGlmIGlkbGUsIG90aGVyd2lzZSB0aGUgSUQgb2YgdGhlIEdhbWVUYXNrXG59XG5cbmV4cG9ydCB0eXBlIE1pbGl0YXJ5VW5pdFR5cGUgPSAnc3dvcmRzbWFuJyB8ICdhcmNoZXInIHwgJ2tuaWdodCcgfCAnY2F0YXB1bHQnIHwgc3RyaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1pbGl0YXJ5VW5pdCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICB1bml0VHlwZTogTWlsaXRhcnlVbml0VHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVbml0cyB7XG4gICAgdmlsbGFnZXJzOiBWaWxsYWdlcltdO1xuICAgIG1pbGl0YXJ5OiBNaWxpdGFyeVVuaXRbXTtcbn1cblxuZXhwb3J0IHR5cGUgQnVpbGRpbmdUeXBlID0gJ2hvdXNlcycgfCAnYmFycmFja3MnIHwgJ2FyY2hlcnlSYW5nZScgfCAnc3RhYmxlJyB8ICdzaWVnZVdvcmtzaG9wJyB8ICdibGFja3NtaXRoJyB8ICd3YXRjaFRvd2VyJyB8ICd0b3duQ2VudGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBCdWlsZGluZ0luc3RhbmNlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBwb3NpdGlvbjogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfTtcbiAgICBjdXJyZW50SHA6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgQnVpbGRpbmdzID0gUmVjb3JkPHN0cmluZywgQnVpbGRpbmdJbnN0YW5jZVtdPjtcblxuZXhwb3J0IGludGVyZmFjZSBHYW1lU3RhdGVQYXlsb2FkIHtcbiAgICBjaXY6IENpdmlsaXphdGlvbjtcbiAgICBhZ2U6IHN0cmluZztcbiAgICByZXM6IFJlc291cmNlcztcbiAgICB1bml0czoge1xuICAgICAgICB2aWxsYWdlcnM6IG51bWJlcjtcbiAgICAgICAgc3dvcmRzbWVuOiBudW1iZXI7XG4gICAgICAgIGFyY2hlcnM6IG51bWJlcjtcbiAgICAgICAga25pZ2h0czogbnVtYmVyO1xuICAgICAgICBjYXRhcHVsdHM6IG51bWJlcjtcbiAgICB9O1xuICAgIGJ1aWxkaW5nczogeyBba2V5IGluIEJ1aWxkaW5nVHlwZV0/OiBudW1iZXIgfTtcbn1cblxuZXhwb3J0IHR5cGUgQnVpbGRpbmdDb3N0cyA9IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG5cbmV4cG9ydCB0eXBlIEl0ZW1SYXJpdHkgPSAnQ29tbW9uJyB8ICdFcGljJyB8ICdMZWdlbmRhcnknIHwgJ1NwaXJpdHVhbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2FtZUl0ZW0ge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcmFyaXR5OiBJdGVtUmFyaXR5O1xufVxuXG5leHBvcnQgdHlwZSBSZXdhcmQgPSBcbiAgICB7IHR5cGU6ICdyZXNvdXJjZScsIHJlc291cmNlOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyIHwgW251bWJlciwgbnVtYmVyXSB9IHxcbiAgICB7IHR5cGU6ICdpdGVtJywgaXRlbUlkOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyIH0gfFxuICAgIHsgdHlwZTogJ3VuaXQnLCB1bml0VHlwZTogJ3ZpbGxhZ2VyJywgYW1vdW50OiBudW1iZXIgfSB8XG4gICAgeyB0eXBlOiAnYnVpbGRpbmcnLCBidWlsZGluZ0lkOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2FtZUV2ZW50Q2hvaWNlIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgY29zdD86IEJ1aWxkaW5nQ29zdHM7XG4gICAgc3VjY2Vzc0NoYW5jZT86IG51bWJlcjsgLy8gMC0xLCB1bmRlZmluZWQgbWVhbnMgMTAwJVxuICAgIHN1Y2Nlc3NFZmZlY3RzOiB7IHJld2FyZHM6IFJld2FyZFtdLCBsb2c6IHN0cmluZyB9O1xuICAgIGZhaWx1cmVFZmZlY3RzPzogeyByZXdhcmRzOiBSZXdhcmRbXSwgbG9nOiBzdHJpbmcgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHYW1lRXZlbnQge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBjaG9pY2VzOiBHYW1lRXZlbnRDaG9pY2VbXTtcbn1cblxuZXhwb3J0IHR5cGUgTG9nSWNvblR5cGUgPSBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2FtZUxvZ0VudHJ5IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBpY29uOiBMb2dJY29uVHlwZTtcbn1cblxuZXhwb3J0IHR5cGUgVW5pdENsYXNzaWZpY2F0aW9uID0gJ2luZmFudHJ5JyB8ICdjYXZhbHJ5JyB8ICdhcmNoZXInIHwgJ3NpZWdlJyB8ICdzaGlwJyB8ICdzdXBwb3J0JyB8ICdteXRoaWNhbCc7XG5leHBvcnQgdHlwZSBBcm1vckNsYXNzaWZpY2F0aW9uID0gJ21lbGVlJyB8ICdwaWVyY2UnIHwgJ3NpZWdlJyB8ICdtYWdpYycgfCAnZWxlbWVudGFsJztcblxuZXhwb3J0IGludGVyZmFjZSBBcm1vclZhbHVlIHtcbiAgICB0eXBlOiBBcm1vckNsYXNzaWZpY2F0aW9uO1xuICAgIHZhbHVlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXR0YWNrQm9udXMge1xuICAgIHRhcmdldFR5cGU6IFVuaXRDbGFzc2lmaWNhdGlvbjtcbiAgICBib251czogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhbWFnZVR5cGUge1xuICAgIHR5cGU6IHN0cmluZzsgLy8gZS5nLiwgJ3NsYXNoJywgJ3BpZXJjZScsICdmaXJlJywgJ21hZ2ljJ1xuICAgIHZhbHVlOiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIFRlcnJhaW5Nb2RpZmllciB7XG4gICAgdGVycmFpblR5cGU6IHN0cmluZzsgLy8gZS5nLiwgJ2ZvcmVzdCcsICdkZXNlcnQnLCAncGxhaW5zJ1xuICAgIHNwZWVkQm9udXM6IG51bWJlcjsgLy8gcGVyY2VudGFnZSwgY2FuIGJlIG5lZ2F0aXZlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pdFVwZ3JhZGVQYXRoIHtcbiAgICB0YXJnZXRVbml0SWQ6IHN0cmluZztcbiAgICBjb3N0OiBCdWlsZGluZ0Nvc3RzO1xuICAgIHRpbWU6IG51bWJlcjtcbiAgICByZXNlYXJjaFJlcXVpcmVkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuaXRDb25maWcge1xuICAgIGlkOiBNaWxpdGFyeVVuaXRUeXBlO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGNvc3Q6IEJ1aWxkaW5nQ29zdHM7XG4gICAgdHJhaW5UaW1lOiBudW1iZXI7IC8vIGluIHNlY29uZHNcbiAgICBocDogbnVtYmVyO1xuICAgIGljb25JZDogc3RyaW5nO1xuICAgIHJlcXVpcmVkQnVpbGRpbmc6IHN0cmluZztcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICBpc1ByZWRlZmluZWQ6IGJvb2xlYW47XG4gICAgb3JkZXI6IG51bWJlcjtcblxuICAgIC8vIC0tLSBDb3JlIENvbWJhdCAtLS1cbiAgICBhdHRhY2s/OiBudW1iZXI7IC8vIE1haW4gYXR0YWNrIHZhbHVlLCBjYW4gYmUgb3ZlcnJpZGRlbiBieSBkYW1hZ2VUeXBlc1xuICAgIGF0dGFja1JhdGU/OiBudW1iZXI7IC8vIGF0dGFja3MgcGVyIHNlY29uZFxuICAgIGF0dGFja1JhbmdlPzogbnVtYmVyOyAvLyBpbiBncmlkIGNlbGxzXG4gICAgZGFtYWdlVHlwZXM/OiBEYW1hZ2VUeXBlW107XG4gICAgYXJtb3JWYWx1ZXM/OiBBcm1vclZhbHVlW107XG4gICAgYXJtb3JQZW5ldHJhdGlvbj86IG51bWJlcjsgLy8gcGVyY2VudGFnZVxuICAgIGNyaXRpY2FsQ2hhbmNlPzogbnVtYmVyOyAvLyBwZXJjZW50YWdlXG4gICAgXG4gICAgLy8gLS0tIE1vYmlsaXR5IC0tLVxuICAgIG1vdmVtZW50U3BlZWQ/OiBudW1iZXI7IC8vIGluIGdyaWQgY2VsbHMgcGVyIHNlY29uZFxuICAgIHRlcnJhaW5Nb2RpZmllcnM/OiBUZXJyYWluTW9kaWZpZXJbXTtcbiAgICBzdGFtaW5hPzogbnVtYmVyO1xuICAgIFxuICAgIC8vIC0tLSBVbml0IENsYXNzaWZpY2F0aW9uICYgQ291bnRlcnMgLS0tXG4gICAgdW5pdFR5cGU/OiBVbml0Q2xhc3NpZmljYXRpb247XG4gICAgYXR0YWNrQm9udXNlcz86IEF0dGFja0JvbnVzW107XG4gICAgXG4gICAgLy8gLS0tIEVjb25vbXkgJiBNZXRhIC0tLVxuICAgIHBvcHVsYXRpb25Db3N0PzogbnVtYmVyO1xuICAgIG1haW50ZW5hbmNlQ29zdD86IEJ1aWxkaW5nQ29zdHM7XG4gICAgc2Vhc29uYWxBdmFpbGFiaWxpdHk/OiBzdHJpbmdbXTsgLy8gZS5nLiwgWydTdW1tZXInLCAnV2ludGVyJ10gb3IgZXZlbnQgbmFtZXNcbiAgICBtb2RUYWdzPzogc3RyaW5nW107XG5cbiAgICAvLyAtLS0gVXBncmFkZXMgJiBUZWNoIFRyZWUgLS0tXG4gICAgdHJlZUlkPzogc3RyaW5nO1xuICAgIHVwZ3JhZGVzVG8/OiBVbml0VXBncmFkZVBhdGhbXTtcbiAgICBpc1VwZ3JhZGVPbmx5PzogYm9vbGVhbjtcbiAgICByZXF1aXJlZEJ1aWxkaW5nSWRzPzogc3RyaW5nW107IC8vIEFkZGl0aW9uYWwgYnVpbGRpbmdzIHRoYXQgbXVzdCBleGlzdCB0byBlbmFibGUgdHJhaW5pbmdcbiAgICByZXF1aXJlZFJlc2VhcmNoSWRzPzogc3RyaW5nW107XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBVSU5vdGlmaWNhdGlvbiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VOb2RlIHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nOyAvLyBOb3cgYSBzdHJpbmcgdG8gYmUgZHluYW1pY1xuICBwb3NpdGlvbjogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfTtcbiAgYW1vdW50OiBudW1iZXI7XG4gIHJpY2huZXNzPzogbnVtYmVyOyAvLyBlLmcuLCAxIGZvciBub3JtYWwsIDIgZm9yIHJpY2hcbn1cblxuZXhwb3J0IHR5cGUgVGFza1R5cGUgPSAnZ2F0aGVyJyB8ICdidWlsZCcgfCAndHJhaW5fdmlsbGFnZXInIHwgJ3RyYWluX21pbGl0YXJ5JyB8ICdhZHZhbmNlX2FnZScgfCAndXBncmFkZV9idWlsZGluZyc7XG5cbmV4cG9ydCB0eXBlIFBsYXllckFjdGlvblN0YXRlID0ge1xuICAgIG1vZGU6ICdidWlsZCc7XG4gICAgYnVpbGRpbmdUeXBlOiBCdWlsZGluZ1R5cGUgfCBzdHJpbmc7XG4gICAgdmlsbGFnZXJJZDogc3RyaW5nO1xufSB8IG51bGw7XG5cblxuZXhwb3J0IGludGVyZmFjZSBHYW1lVGFzayB7XG4gICAgaWQ6IHN0cmluZztcbiAgICB0eXBlOiBUYXNrVHlwZTtcbiAgICBzdGFydFRpbWU6IG51bWJlcjtcbiAgICBkdXJhdGlvbjogbnVtYmVyOyAvLyBpbiBtaWxsaXNlY29uZHNcbiAgICBwYXlsb2FkPzoge1xuICAgICAgICAvLyBTaGFyZWRcbiAgICAgICAgYnVpbGRpbmdJZD86IHN0cmluZzsgLy8gSUQgb2YgdGhlIGJ1aWxkaW5nIHBlcmZvcm1pbmcgdGhlIGFjdGlvbiAoZS5nLiBUQyBmb3IgdHJhaW5pbmcpXG4gICAgICAgIHZpbGxhZ2VySWRzPzogc3RyaW5nW107XG4gICAgICAgIGNvdW50PzogbnVtYmVyO1xuICAgICAgICBcbiAgICAgICAgLy8gQnVpbGQgdGFza1xuICAgICAgICBidWlsZGluZ1R5cGU/OiBCdWlsZGluZ1R5cGUgfCBzdHJpbmc7XG4gICAgICAgIHBvc2l0aW9uPzogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9O1xuICAgICAgICBcbiAgICAgICAgLy8gVHJhaW4gbWlsaXRhcnkgdGFza1xuICAgICAgICB1bml0VHlwZT86IE1pbGl0YXJ5VW5pdFR5cGU7XG4gICAgICAgIFxuICAgICAgICAvLyBHYXRoZXIgdGFza1xuICAgICAgICByZXNvdXJjZU5vZGVJZD86IHN0cmluZztcblxuICAgICAgICAvLyBVcGdyYWRlIFRhc2tcbiAgICAgICAgb3JpZ2luYWxCdWlsZGluZ0lkPzogc3RyaW5nO1xuICAgICAgICBvcmlnaW5hbEJ1aWxkaW5nVHlwZT86IHN0cmluZztcbiAgICAgICAgdGFyZ2V0QnVpbGRpbmdUeXBlPzogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aXZlQnVmZnMge1xuICAgIGJ1aWxkVGltZVJlZHVjdGlvbj86IHsgcGVyY2VudGFnZTogbnVtYmVyOyB1c2VzOiBudW1iZXIgfTtcbiAgICB0cmFpblRpbWVSZWR1Y3Rpb24/OiB7IHBlcmNlbnRhZ2U6IG51bWJlcjsgdXNlczogbnVtYmVyIH07XG4gICAgcmVzb3VyY2VCb29zdD86IHtcbiAgICAgICAgcmVzb3VyY2U6IHN0cmluZztcbiAgICAgICAgbXVsdGlwbGllcjogbnVtYmVyO1xuICAgICAgICBlbmRUaW1lOiBudW1iZXI7XG4gICAgfVtdO1xuICAgIHBlcm1hbmVudFRyYWluVGltZVJlZHVjdGlvbj86IG51bWJlcjsgLy8gcGVyY2VudGFnZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFnZUNvbmZpZyB7XG4gICAgaWQ6IHN0cmluZzsgLy8gRm9yIGN1c3RvbSBhZ2VzLCBgY3VzdG9tLSR7dGltZXN0YW1wfWAuIEZvciBwcmVkZWZpbmVkLCBqdXN0IHRoZSBuYW1lLlxuICAgIG5hbWU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIGlzUHJlZGVmaW5lZDogYm9vbGVhbjtcbiAgICBvcmRlcjogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkaW5nVXBncmFkZVBhdGgge1xuICAgIGlkOiBzdHJpbmc7IC8vIFRoZSBJRCBvZiB0aGUgYnVpbGRpbmcgdGhpcyBvbmUgdXBncmFkZXMgdG9cbiAgICBjb3N0OiBCdWlsZGluZ0Nvc3RzO1xuICAgIHRpbWU6IG51bWJlcjsgLy8gaW4gc2Vjb25kc1xuICAgIHJlc2VhcmNoUmVxdWlyZWQ/OiBzdHJpbmc7IC8vIEZ1dHVyZSB1c2Vcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdWlsZGluZ0NvbmZpZyB7XG4gICAgaWQ6IEJ1aWxkaW5nVHlwZSB8IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBjb3N0OiBCdWlsZGluZ0Nvc3RzO1xuICAgIGlzVW5pcXVlOiBib29sZWFuO1xuICAgIGJ1aWxkTGltaXQ/OiBudW1iZXI7XG4gICAgYnVpbGRUaW1lOiBudW1iZXI7IC8vIGluIHNlY29uZHNcbiAgICBocDogbnVtYmVyO1xuICAgIHVubG9ja2VkSW5BZ2U6IHN0cmluZzsgLy8gbmFtZSBvZiB0aGUgYWdlXG4gICAgaWNvbklkOiBzdHJpbmc7IC8vIGtleSBmcm9tIGJ1aWxkaW5nSWNvbk1hcFxuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIGlzUHJlZGVmaW5lZDogYm9vbGVhbjtcbiAgICBvcmRlcjogbnVtYmVyO1xuICAgIGNhblRyYWluVW5pdHM6IGJvb2xlYW47XG4gICAgaXNVcGdyYWRlT25seT86IGJvb2xlYW47XG4gICAgdXBncmFkZXNUbz86IEJ1aWxkaW5nVXBncmFkZVBhdGhbXTtcbiAgICB0cmVlSWQ/OiBzdHJpbmc7IC8vIFVuaXF1ZSBJRCBmb3IgYW4gdXBncmFkZSBmYW1pbHkgb2YgYnVpbGRpbmdzLlxuICAgIFxuICAgIC8vIENvbXByZWhlbnNpdmUgQXR0cmlidXRlc1xuICAgIHBvcHVsYXRpb25DYXBhY2l0eT86IG51bWJlcjtcbiAgICBnYXJyaXNvbkNhcGFjaXR5PzogbnVtYmVyO1xuICAgIGdlbmVyYXRlc1Jlc291cmNlPzogc3RyaW5nIHwgJ25vbmUnO1xuICAgIGdlbmVyYXRpb25SYXRlPzogbnVtYmVyOyAvLyBwZXIgbWludXRlXG4gICAgYXR0YWNrPzogbnVtYmVyO1xuICAgIGF0dGFja1JhdGU/OiBudW1iZXI7IC8vIGF0dGFja3MgcGVyIHNlY29uZFxuICAgIGF0dGFja1JhbmdlPzogbnVtYmVyO1xuICAgIGhlYWxSYXRlPzogbnVtYmVyOyAvLyBocCBwZXIgc2Vjb25kIGZvciBnYXJyaXNvbmVkIHVuaXRzXG4gICAgdmlzaW9uUmFuZ2U/OiBudW1iZXI7XG4gICAgcmVxdWlyZWRCdWlsZGluZ0lkPzogc3RyaW5nO1xuICAgIFxuICAgIC8vIEZ1dHVyZS1Qcm9vZmluZyBBdHRyaWJ1dGVzXG4gICAgcmVzZWFyY2hDb3N0PzogQnVpbGRpbmdDb3N0cztcbiAgICByZXNlYXJjaFRpbWU/OiBudW1iZXI7IC8vIGluIHNlY29uZHNcbiAgICB1bmxvY2tzUmVzZWFyY2hJZHM/OiBzdHJpbmdbXTtcbiAgICByZXF1aXJlc1Jlc2VhcmNoPzogYm9vbGVhbjtcblxuICAgIGF3YXJkUG9pbnRzPzogbnVtYmVyO1xuICAgIGF3YXJkVGllcj86ICdCcm9uemUnIHwgJ1NpbHZlcicgfCAnR29sZCc7XG4gICAgXG4gICAgY3VzdG9tTW9kZWxJZD86IHN0cmluZztcbiAgICBwbGFjZW1lbnRSYWRpdXM/OiBudW1iZXI7IC8vIG1pbmltdW0gZGlzdGFuY2UgZnJvbSBhbm90aGVyIGJ1aWxkaW5nIG9mIHRoZSBzYW1lIHR5cGVcbiAgICBcbiAgICBzZWFzb25hbFZhcmlhbnRJZHM/OiBzdHJpbmdbXTtcbiAgICBtYWludGVuYW5jZUNvc3Q/OiBCdWlsZGluZ0Nvc3RzOyAvLyBwZXIgbWludXRlXG4gICAgZGVjYXlSYXRlPzogbnVtYmVyOyAvLyBocCBsb3NzIHBlciBtaW51dGVcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEZ1bGxHYW1lU3RhdGUge1xuICAgIGNpdmlsaXphdGlvbjogQ2l2aWxpemF0aW9uO1xuICAgIHJlc291cmNlczogUmVzb3VyY2VzO1xuICAgIHVuaXRzOiBVbml0cztcbiAgICBidWlsZGluZ3M6IEJ1aWxkaW5ncztcbiAgICBjdXJyZW50QWdlOiBzdHJpbmc7XG4gICAgZ2FtZUxvZzogR2FtZUxvZ0VudHJ5W107XG4gICAgYWN0aXZlVGFza3M6IEdhbWVUYXNrW107XG4gICAgcmVzb3VyY2VOb2RlczogUmVzb3VyY2VOb2RlW107XG4gICAgaW52ZW50b3J5OiBHYW1lSXRlbVtdO1xuICAgIGFjdGl2ZUJ1ZmZzOiBBY3RpdmVCdWZmcztcbn1cblxuZXhwb3J0IHR5cGUgUmVzb3VyY2VSYXJpdHkgPSAnQWJ1bmRhbnQnIHwgJ0NvbW1vbicgfCAnVW5jb21tb24nIHwgJ1JhcmUnIHwgJ1N0cmF0ZWdpYyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VDb25maWcge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgaWNvbklkOiBzdHJpbmc7XG4gICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgaXNQcmVkZWZpbmVkOiBib29sZWFuO1xuICAgIG9yZGVyOiBudW1iZXI7XG5cbiAgICAvLyAtLS0gRWNvbm9teSAmIFNwYXduaW5nIC0tLVxuICAgIHJhcml0eTogUmVzb3VyY2VSYXJpdHk7XG4gICAgaW5pdGlhbEFtb3VudDogbnVtYmVyO1xuICAgIGJhc2VHYXRoZXJSYXRlOiBudW1iZXI7XG4gICAgc3Bhd25JblNhZmVab25lOiBib29sZWFuO1xuICAgIGlzVHJhZGFibGU6IGJvb2xlYW47XG5cbiAgICAvLyAtLS0gQWR2YW5jZWQgTWVjaGFuaWNzIChGdXR1cmUtUHJvb2ZpbmcpIC0tLVxuICAgIGRlY2F5c092ZXJUaW1lPzogYm9vbGVhbjtcbiAgICBkZWNheVJhdGU/OiBudW1iZXI7IC8vIHBlcmNlbnRhZ2UgcGVyIG1pbnV0ZVxuICAgIHN0b3JhZ2VCdWlsZGluZ0lkPzogc3RyaW5nOyAvLyBJRCBvZiBidWlsZGluZyB0aGF0IGluY3JlYXNlcyBjYXBhY2l0eVxufVxuIl0sIm5hbWVzIjpbIkdhbWVTdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./types.ts\n"));

/***/ })

});