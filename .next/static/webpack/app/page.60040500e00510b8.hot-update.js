"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./types.ts\");\n/* harmony import */ var _services_geminiService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/geminiService */ \"(app-pages-browser)/./services/geminiService.ts\");\n/* harmony import */ var _services_dbService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/dbService */ \"(app-pages-browser)/./services/dbService.ts\");\n/* harmony import */ var _services_nameService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/nameService */ \"(app-pages-browser)/./services/nameService.ts\");\n/* harmony import */ var _components_GameUI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/GameUI */ \"(app-pages-browser)/./components/GameUI.tsx\");\n/* harmony import */ var _components_StartScreen__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/StartScreen */ \"(app-pages-browser)/./components/StartScreen.tsx\");\n/* harmony import */ var _components_LoadingScreen__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/components/LoadingScreen */ \"(app-pages-browser)/./components/LoadingScreen.tsx\");\n/* harmony import */ var _components_BuildPanel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/components/BuildPanel */ \"(app-pages-browser)/./components/BuildPanel.tsx\");\n/* harmony import */ var _components_NotificationManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/components/NotificationManager */ \"(app-pages-browser)/./components/NotificationManager.tsx\");\n/* harmony import */ var _components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/components/UnitManagementPanel */ \"(app-pages-browser)/./components/UnitManagementPanel.tsx\");\n/* harmony import */ var _components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/components/BuildingManagementPanel */ \"(app-pages-browser)/./components/BuildingManagementPanel.tsx\");\n/* harmony import */ var _components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/components/ResourceAssignmentPanel */ \"(app-pages-browser)/./components/ResourceAssignmentPanel.tsx\");\n/* harmony import */ var _components_SettingsPanel__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/components/SettingsPanel */ \"(app-pages-browser)/./components/SettingsPanel.tsx\");\n/* harmony import */ var _components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/components/CivilizationPanel */ \"(app-pages-browser)/./components/CivilizationPanel.tsx\");\n/* harmony import */ var _components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/components/AllBuildingsPanel */ \"(app-pages-browser)/./components/AllBuildingsPanel.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst BUILDINGS_INFO = [\n    {\n        id: \"houses\",\n        name: \"House\",\n        description: \"Increases population capacity by 5.\",\n        cost: {\n            wood: 50\n        },\n        isUnique: false,\n        buildTime: 15\n    },\n    {\n        id: \"barracks\",\n        name: \"Barracks\",\n        description: \"Allows training of Swordsmen.\",\n        cost: {\n            wood: 150,\n            stone: 50\n        },\n        isUnique: true,\n        buildTime: 60\n    },\n    {\n        id: \"archeryRange\",\n        name: \"Archery Range\",\n        description: \"Allows training of Archers.\",\n        cost: {\n            wood: 175\n        },\n        isUnique: true,\n        buildTime: 60\n    },\n    {\n        id: \"stable\",\n        name: \"Stables\",\n        description: \"Allows training of Knights.\",\n        cost: {\n            wood: 175,\n            gold: 75\n        },\n        isUnique: true,\n        buildTime: 75\n    },\n    {\n        id: \"siegeWorkshop\",\n        name: \"Siege Workshop\",\n        description: \"Constructs powerful Catapults.\",\n        cost: {\n            wood: 200,\n            gold: 150\n        },\n        isUnique: true,\n        buildTime: 90\n    },\n    {\n        id: \"blacksmith\",\n        name: \"Blacksmith\",\n        description: \"Researches infantry and cavalry upgrades.\",\n        cost: {\n            wood: 100,\n            gold: 100\n        },\n        isUnique: true,\n        buildTime: 45\n    },\n    {\n        id: \"watchTower\",\n        name: \"Watch Tower\",\n        description: \"Provides defense against raids.\",\n        cost: {\n            stone: 125\n        },\n        isUnique: true,\n        buildTime: 45\n    },\n    {\n        id: \"townCenter\",\n        name: \"Town Center\",\n        description: \"The heart of your settlement.\",\n        cost: {},\n        isUnique: true,\n        buildTime: 0\n    }\n];\nconst UNIT_INFO = [\n    {\n        id: \"swordsman\",\n        name: \"Swordsman\",\n        description: \"Basic melee infantry.\",\n        cost: {\n            food: 60,\n            gold: 20\n        },\n        requiredBuilding: \"barracks\",\n        trainTime: 22\n    },\n    {\n        id: \"archer\",\n        name: \"Archer\",\n        description: \"Ranged unit effective against infantry.\",\n        cost: {\n            food: 30,\n            wood: 40\n        },\n        requiredBuilding: \"archeryRange\",\n        trainTime: 25\n    },\n    {\n        id: \"knight\",\n        name: \"Knight\",\n        description: \"Fast and powerful cavalry.\",\n        cost: {\n            food: 60,\n            gold: 75\n        },\n        requiredBuilding: \"stable\",\n        trainTime: 30\n    },\n    {\n        id: \"catapult\",\n        name: \"Catapult\",\n        description: \"Siege engine devastating to buildings.\",\n        cost: {\n            wood: 150,\n            gold: 150\n        },\n        requiredBuilding: \"siegeWorkshop\",\n        trainTime: 45\n    }\n];\nconst GATHER_INFO = {\n    food: {\n        rate: 10\n    },\n    wood: {\n        rate: 8\n    },\n    gold: {\n        rate: 5\n    },\n    stone: {\n        rate: 6\n    }\n};\nconst initialBuildingsState = {\n    houses: [],\n    barracks: [],\n    archeryRange: [],\n    stable: [],\n    siegeWorkshop: [],\n    blacksmith: [],\n    watchTower: [],\n    townCenter: []\n};\nconst MAP_DIMENSIONS = {\n    width: 25,\n    height: 18\n};\nconst GamePage = ()=>{\n    var _buildings_townCenter;\n    _s();\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n    const [civilization, setCivilization] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resources, setResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        food: 200,\n        wood: 150,\n        gold: 50,\n        stone: 100\n    });\n    const [units, setUnits] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        villagers: [],\n        military: []\n    });\n    const [buildings, setBuildings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialBuildingsState);\n    const [currentAge, setCurrentAge] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Nomadic Age\");\n    const [gameLog, setGameLog] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentEvent, setCurrentEvent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [resourceDeltas, setResourceDeltas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [activityStatus, setActivityStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"Your story begins...\");\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [unlimitedResources, setUnlimitedResources] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [allSaves, setAllSaves] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentSaveName, setCurrentSaveName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [playerAction, setPlayerAction] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeTasks, setActiveTasks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [constructingBuildings, setConstructingBuildings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [resourceNodes, setResourceNodes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [panelOpacity, setPanelOpacity] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1.0);\n    // Panel States\n    const [buildPanelState, setBuildPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        villagerId: null,\n        anchorRect: null\n    });\n    const [unitManagementPanel, setUnitManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        anchorRect: null\n    });\n    const [buildingManagementPanel, setBuildingManagementPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        type: null,\n        anchorRect: null\n    });\n    const [allBuildingsPanel, setAllBuildingsPanel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [assignmentPanelState, setAssignmentPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        targetId: null,\n        targetType: null,\n        anchorRect: null\n    });\n    const [settingsPanelState, setSettingsPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const [civPanelState, setCivPanelState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isOpen: false,\n        anchorRect: null\n    });\n    const deltaTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const eventTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const population = {\n        current: units.villagers.length + units.military.length,\n        capacity: (((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter.length) > 0 ? 20 : 0) + buildings.houses.length * 5\n    };\n    const fetchSaves = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        const names = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.getAllSaveNames)();\n        setAllSaves(names);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchSaves();\n    }, [\n        fetchSaves\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && civilization && currentSaveName) {\n            const fullState = {\n                civilization,\n                resources,\n                units,\n                buildings,\n                currentAge,\n                gameLog,\n                activeTasks,\n                constructingBuildings,\n                resourceNodes\n            };\n            (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.saveGameState)(currentSaveName, fullState);\n        }\n    }, [\n        civilization,\n        resources,\n        units,\n        buildings,\n        currentAge,\n        gameLog,\n        gameState,\n        currentSaveName,\n        activeTasks,\n        constructingBuildings,\n        resourceNodes\n    ]);\n    const addNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((message)=>{\n        const id = \"\".concat(Date.now(), \"-\").concat(Math.random());\n        setNotifications((prev)=>[\n                ...prev,\n                {\n                    id,\n                    message\n                }\n            ]);\n    }, []);\n    const removeNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{\n        setNotifications((prev)=>prev.filter((n)=>n.id !== id));\n    }, []);\n    const addToLog = (message, icon)=>{\n        setGameLog((prev)=>[\n                {\n                    id: \"\".concat(Date.now(), \"-\").concat(Math.random()),\n                    message,\n                    icon\n                },\n                ...prev.slice(0, 19)\n            ]);\n    };\n    const updateResources = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((deltas)=>{\n        setResources((prev)=>{\n            const newResources = {\n                ...prev\n            };\n            for(const key in deltas){\n                const resourceKey = key;\n                var _deltas_resourceKey;\n                newResources[resourceKey] = Math.max(0, newResources[resourceKey] + ((_deltas_resourceKey = deltas[resourceKey]) !== null && _deltas_resourceKey !== void 0 ? _deltas_resourceKey : 0));\n            }\n            return newResources;\n        });\n        setResourceDeltas((prev)=>({\n                ...prev,\n                ...deltas\n            }));\n        for(const key in deltas){\n            const resourceKey = key;\n            if (deltaTimeoutRef.current[resourceKey]) {\n                window.clearTimeout(deltaTimeoutRef.current[resourceKey]);\n            }\n            deltaTimeoutRef.current[resourceKey] = window.setTimeout(()=>{\n                setResourceDeltas((prev)=>{\n                    const newDeltas = {\n                        ...prev\n                    };\n                    delete newDeltas[resourceKey];\n                    return newDeltas;\n                });\n            }, 1500);\n        }\n    }, []);\n    const handleNewEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        // Allow events to trigger even if villagers are just gathering.\n        const nonGatheringTasks = activeTasks.filter((t)=>t.type !== \"gather\");\n        if (!civilization || currentEvent || nonGatheringTasks.length > 0) return;\n        addToLog(\"A new chapter unfolds...\", \"event\");\n        const event = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedGameEvent)();\n        setCurrentEvent(event);\n        setActivityStatus(\"A new event requires your attention!\");\n    }, [\n        civilization,\n        currentEvent,\n        activeTasks\n    ]);\n    const scheduleNextEvent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (eventTimerRef.current) {\n            clearTimeout(eventTimerRef.current);\n        }\n        const nextEventTime = (45 + Math.random() * 45) * 1000; // 45-90 seconds\n        eventTimerRef.current = setTimeout(()=>handleNewEvent(), nextEventTime);\n    }, [\n        handleNewEvent\n    ]);\n    const generateResourceNodes = (existingPositions)=>{\n        const nodes = [];\n        const types = [\n            \"food\",\n            \"wood\",\n            \"gold\",\n            \"stone\"\n        ];\n        const numNodes = 20 + Math.floor(Math.random() * 10);\n        for(let i = 0; i < numNodes; i++){\n            let pos;\n            do {\n                pos = {\n                    x: Math.floor(Math.random() * MAP_DIMENSIONS.width),\n                    y: Math.floor(Math.random() * MAP_DIMENSIONS.height)\n                };\n            }while (existingPositions.has(\"\".concat(pos.x, \",\").concat(pos.y)));\n            existingPositions.add(\"\".concat(pos.x, \",\").concat(pos.y));\n            const type = types[Math.floor(Math.random() * types.length)];\n            const amount = Math.floor(Math.random() * (2500 - 500 + 1)) + 500;\n            nodes.push({\n                id: \"\".concat(Date.now(), \"-node-\").concat(i),\n                type,\n                position: pos,\n                amount,\n                assignedVillagers: []\n            });\n        }\n        return nodes;\n    };\n    const handleStartNewGame = (saveName)=>{\n        if (allSaves.includes(saveName)) {\n            addNotification('A saga named \"'.concat(saveName, '\" already exists.'));\n            return;\n        }\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n        setCurrentSaveName(saveName);\n        const civ = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedCivilization)();\n        setCivilization(civ);\n        setResources({\n            food: 200,\n            wood: 150,\n            gold: 50,\n            stone: 100\n        });\n        const initialVillagerNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", 3);\n        const initialVillagers = initialVillagerNames.map((name)=>({\n                id: \"\".concat(Date.now(), \"-\").concat(name),\n                name\n            }));\n        setUnits({\n            villagers: initialVillagers,\n            military: []\n        });\n        const [initialTCName] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n        const tcPosition = {\n            x: Math.floor(MAP_DIMENSIONS.width / 2),\n            y: Math.floor(MAP_DIMENSIONS.height / 2)\n        };\n        const initialTC = {\n            id: \"\".concat(Date.now(), \"-tc\"),\n            name: initialTCName,\n            position: tcPosition\n        };\n        setBuildings({\n            ...initialBuildingsState,\n            townCenter: [\n                initialTC\n            ]\n        });\n        setResourceNodes(generateResourceNodes(new Set([\n            \"\".concat(tcPosition.x, \",\").concat(tcPosition.y)\n        ])));\n        setCurrentAge(\"Nomadic Age\");\n        setGameLog([]);\n        setCurrentEvent(null);\n        setUnlimitedResources(false);\n        setActiveTasks([]);\n        setConstructingBuildings([]);\n        addToLog(\"\".concat(civ.name, \" has been founded!\"), \"system\");\n        addToLog(\"Your story begins...\", \"system\");\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        setActivityStatus(\"Your settlement awaits your command.\");\n        fetchSaves();\n    };\n    const getVillagerTaskDetails = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        const task = activeTasks.find((t)=>{\n            var _t_payload_villagerIds, _t_payload;\n            return (_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : (_t_payload_villagerIds = _t_payload.villagerIds) === null || _t_payload_villagerIds === void 0 ? void 0 : _t_payload_villagerIds.includes(villagerId);\n        });\n        if (task) {\n            if (task.type === \"build\") {\n                const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === task.payload.buildingType);\n                return \"Busy: Constructing \".concat((buildingInfo === null || buildingInfo === void 0 ? void 0 : buildingInfo.name) || \"a building\");\n            }\n            if (task.type === \"gather\") {\n                const node = resourceNodes.find((n)=>n.id === task.payload.resourceNodeId);\n                return \"Busy: Gathering \".concat((node === null || node === void 0 ? void 0 : node.type) || \"resources\");\n            }\n        }\n        return \"Idle\";\n    }, [\n        activeTasks,\n        resourceNodes\n    ]);\n    const isVillagerBusy = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((villagerId)=>{\n        return getVillagerTaskDetails(villagerId) !== \"Idle\";\n    }, [\n        getVillagerTaskDetails\n    ]);\n    const handleResumeGame = async (saveName)=>{\n        const savedState = await (0,_services_dbService__WEBPACK_IMPORTED_MODULE_4__.loadGameState)(saveName);\n        if (savedState) {\n            var _savedState_units;\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING);\n            setCurrentSaveName(saveName);\n            setCivilization(savedState.civilization);\n            setResources(savedState.resources);\n            if ((_savedState_units = savedState.units) === null || _savedState_units === void 0 ? void 0 : _savedState_units.soldiers) {\n                const migratedMilitary = savedState.units.soldiers.map((s)=>({\n                        ...s,\n                        unitType: \"swordsman\"\n                    }));\n                setUnits({\n                    villagers: savedState.units.villagers || [],\n                    military: migratedMilitary\n                });\n            } else {\n                setUnits(savedState.units || {\n                    villagers: [],\n                    military: []\n                });\n            }\n            let finalBuildings = {\n                ...initialBuildingsState,\n                ...savedState.buildings || {}\n            };\n            const occupiedCells = new Set(Object.values(finalBuildings).flat().map((b)=>\"\".concat(b.position.x, \",\").concat(b.position.y)));\n            if (!finalBuildings.townCenter || finalBuildings.townCenter.length === 0) {\n                let tcPos = {\n                    x: 10,\n                    y: 5\n                };\n                while(occupiedCells.has(\"\".concat(tcPos.x, \",\").concat(tcPos.y))){\n                    tcPos.x++;\n                }\n                const [tcName] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                finalBuildings.townCenter = [\n                    {\n                        id: \"\".concat(Date.now(), \"-tc\"),\n                        name: tcName,\n                        position: tcPos\n                    }\n                ];\n                occupiedCells.add(\"\".concat(tcPos.x, \",\").concat(tcPos.y));\n            }\n            const firstBuilding = Object.values(finalBuildings).flat()[0];\n            if (firstBuilding && typeof firstBuilding === \"object\" && !(\"position\" in firstBuilding)) {\n                const migrated = {\n                    ...initialBuildingsState\n                };\n                let y = 3;\n                Object.entries(finalBuildings).forEach((param)=>{\n                    let [type, instances] = param;\n                    let x = 5;\n                    instances.forEach((inst)=>{\n                        while(occupiedCells.has(\"\".concat(x, \",\").concat(y))){\n                            x++;\n                        }\n                        migrated[type].push({\n                            ...inst,\n                            position: {\n                                x,\n                                y\n                            }\n                        });\n                        occupiedCells.add(\"\".concat(x, \",\").concat(y));\n                        x++;\n                    });\n                });\n                finalBuildings = migrated;\n            }\n            setBuildings(finalBuildings);\n            const nodesToSet = (savedState.resourceNodes || []).map((n)=>({\n                    ...n,\n                    assignedVillagers: n.assignedVillagers || []\n                }));\n            if (nodesToSet.length === 0) {\n                setResourceNodes(generateResourceNodes(occupiedCells));\n            } else {\n                setResourceNodes(nodesToSet);\n            }\n            setCurrentAge(savedState.currentAge);\n            setGameLog(savedState.gameLog);\n            setActiveTasks((savedState.activeTasks || []).map((t)=>{\n                var _t_payload;\n                // Migration for old save format\n                if (t.type === \"build\" && ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.villagerId)) {\n                    return {\n                        ...t,\n                        payload: {\n                            ...t.payload,\n                            villagerIds: [\n                                t.payload.villagerId\n                            ],\n                            villagerId: undefined\n                        }\n                    };\n                }\n                return t;\n            }));\n            setConstructingBuildings((savedState.constructingBuildings || []).map((c)=>{\n                // Migration for old save format\n                if (c.villagerId) {\n                    return {\n                        ...c,\n                        villagerIds: [\n                            c.villagerId\n                        ],\n                        villagerId: undefined\n                    };\n                }\n                return c;\n            }));\n            setCurrentEvent(null);\n            setActivityStatus(\"Welcome back to your saga.\");\n            setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING);\n        } else {\n            addNotification('Could not find a saved game named \"'.concat(saveName, '\".'));\n        }\n    };\n    const handleTaskCompletion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((task)=>{\n        switch(task.type){\n            case \"build\":\n                {\n                    const { buildingType, villagerIds, position } = task.payload;\n                    const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === buildingType);\n                    const [name] = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"building\", 1);\n                    const newBuilding = {\n                        id: task.id,\n                        name,\n                        position: position\n                    };\n                    setConstructingBuildings((prev)=>prev.filter((b)=>b.id !== task.id));\n                    setBuildings((p)=>({\n                            ...p,\n                            [buildingType]: [\n                                ...p[buildingType],\n                                newBuilding\n                            ]\n                        }));\n                    if (villagerIds && villagerIds.length > 0) {\n                        addToLog(\"\".concat(villagerIds.length, \" builder(s) have constructed \").concat(name, \", a new \").concat(buildingInfo.name, \".\"), buildingType);\n                        setActivityStatus(\"Construction of \".concat(name, \" is complete.\"));\n                    }\n                    break;\n                }\n            case \"gather\":\n                {\n                    const { resourceNodeId } = task.payload;\n                    setResourceNodes((prevNodes)=>{\n                        const node = prevNodes.find((n)=>n.id === resourceNodeId);\n                        if (!node) {\n                            console.warn(\"Gather task completed for a non-existent or already processed node: \".concat(resourceNodeId));\n                            return prevNodes;\n                        }\n                        const amountToAdd = Math.floor(node.amount);\n                        if (amountToAdd > 0) {\n                            updateResources({\n                                [node.type]: amountToAdd\n                            });\n                            addToLog(\"\".concat(node.assignedVillagers.length, \" villager(s) depleted a \").concat(node.type, \" source, gaining \").concat(amountToAdd, \" \").concat(node.type, \".\"), node.type);\n                            setActivityStatus(\"A \".concat(node.type, \" source has been fully depleted.\"));\n                        }\n                        return prevNodes.filter((n)=>n.id !== resourceNodeId);\n                    });\n                    break;\n                }\n            case \"train_villager\":\n                {\n                    const { count } = task.payload;\n                    const newVillagerNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"villager\", count);\n                    const newVillagers = newVillagerNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(name),\n                            name\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            villagers: [\n                                ...p.villagers,\n                                ...newVillagers\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" new villager(s) have joined your settlement.\"), \"villager\");\n                    setActivityStatus(\"\".concat(count, \" new villager(s) are ready to work.\"));\n                    break;\n                }\n            case \"train_military\":\n                {\n                    const { unitType, count } = task.payload;\n                    const unitInfo = UNIT_INFO.find((u)=>u.id === unitType);\n                    const newUnitNames = (0,_services_nameService__WEBPACK_IMPORTED_MODULE_5__.getRandomNames)(\"soldier\", count);\n                    const newUnits = newUnitNames.map((name)=>({\n                            id: \"\".concat(Date.now(), \"-\").concat(unitType, \"-\").concat(name),\n                            name,\n                            title: \"\",\n                            unitType: unitType\n                        }));\n                    setUnits((p)=>({\n                            ...p,\n                            military: [\n                                ...p.military,\n                                ...newUnits\n                            ]\n                        }));\n                    addToLog(\"\".concat(count, \" \").concat(unitInfo.name, \"(s) have been trained.\"), unitType);\n                    setActivityStatus(\"\".concat(count, \" new \").concat(unitInfo.name, \"(s) are ready for battle.\"));\n                    break;\n                }\n            case \"advance_age\":\n                {\n                    const ageResult = (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_3__.getPredefinedAge)(currentAge);\n                    setCurrentAge(ageResult.nextAgeName);\n                    addToLog(\"You have advanced to the \".concat(ageResult.nextAgeName, \"!\"), \"age\");\n                    addToLog(ageResult.description, \"age\");\n                    setActivityStatus(\"Welcome to the \".concat(ageResult.nextAgeName, \"!\"));\n                    break;\n                }\n        }\n    }, [\n        currentAge,\n        updateResources\n    ]);\n    // Game Loop\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const gameLoop = setInterval(()=>{\n            const now = Date.now();\n            const completedTasks = [];\n            setActiveTasks((currentTasks)=>{\n                return currentTasks.filter((task)=>{\n                    if (task.type !== \"gather\" && now >= task.startTime + task.duration) {\n                        completedTasks.push(task);\n                        return false;\n                    }\n                    return true;\n                });\n            });\n            if (completedTasks.length > 0) {\n                completedTasks.forEach(handleTaskCompletion);\n            }\n        }, 1000);\n        return ()=>clearInterval(gameLoop);\n    }, [\n        handleTaskCompletion\n    ]);\n    // Event Trigger Timer\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // Events should not trigger if a major task (build, train, advance age) is in progress.\n        // Gathering resources is a background task and should not block events.\n        const majorTaskInProgress = activeTasks.some((t)=>t.type !== \"gather\");\n        if (gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && !currentEvent && !playerAction && !majorTaskInProgress) {\n            scheduleNextEvent();\n        } else if (eventTimerRef.current) {\n            clearTimeout(eventTimerRef.current);\n        }\n        return ()=>{\n            if (eventTimerRef.current) {\n                clearTimeout(eventTimerRef.current);\n            }\n        };\n    }, [\n        gameState,\n        currentEvent,\n        playerAction,\n        activeTasks,\n        scheduleNextEvent\n    ]);\n    const handleEventChoice = (choice)=>{\n        addToLog('Decision: \"'.concat(choice.text, '\"'), \"event\");\n        // 1. Check and apply cost\n        if (choice.cost) {\n            const missingRes = [];\n            for(const key in choice.cost){\n                const resKey = key;\n                if (resources[resKey] < (choice.cost[resKey] || 0)) {\n                    missingRes.push(resKey);\n                }\n            }\n            if (missingRes.length > 0) {\n                addNotification(\"You lack the required resources: \".concat(missingRes.join(\", \"), \".\"));\n                return;\n            }\n            const negativeCost = {};\n            for(const key in choice.cost){\n                const resKey = key;\n                negativeCost[resKey] = -(choice.cost[resKey] || 0);\n            }\n            updateResources(negativeCost);\n        }\n        // 2. Determine success\n        const isSuccess = choice.successChance === undefined || Math.random() < choice.successChance;\n        const effects = isSuccess ? choice.successEffects : choice.failureEffects;\n        if (!effects) {\n            setCurrentEvent(null);\n            scheduleNextEvent();\n            return;\n        }\n        // 3. Calculate resource change\n        let amount = 0;\n        if (Array.isArray(effects.amount)) {\n            const [min, max] = effects.amount;\n            amount = Math.floor(Math.random() * (max - min + 1)) + min;\n        } else {\n            amount = effects.amount;\n        }\n        // 4. Apply effects\n        if (effects.resource !== \"none\" && amount !== 0) {\n            updateResources({\n                [effects.resource]: amount\n            });\n        }\n        // 5. Log and update UI\n        addToLog(effects.log, effects.resource !== \"none\" ? effects.resource : \"system\");\n        setActivityStatus(effects.log);\n        setCurrentEvent(null);\n        scheduleNextEvent();\n    };\n    const handleInitiateBuild = (villagerId, rect)=>{\n        if (isVillagerBusy(villagerId)) {\n            addNotification(\"This villager is already busy.\");\n            return;\n        }\n        setBuildPanelState({\n            isOpen: true,\n            villagerId,\n            anchorRect: rect\n        });\n        setUnitManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleStartPlacement = (buildingId)=>{\n        const villagerId = buildPanelState.villagerId;\n        if (!villagerId) return;\n        const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === buildingId);\n        if (!buildingInfo) return;\n        if (buildingInfo.isUnique && (buildings[buildingInfo.id].length > 0 || constructingBuildings.some((b)=>b.type === buildingInfo.id))) {\n            addNotification(\"You can only build one \".concat(buildingInfo.name, \".\"));\n            return;\n        }\n        const cost = buildingInfo.cost;\n        if (!unlimitedResources) {\n            const missing = [];\n            for(const res in cost){\n                const resourceKey = res;\n                var _cost_resourceKey;\n                if (resources[resourceKey] < ((_cost_resourceKey = cost[resourceKey]) !== null && _cost_resourceKey !== void 0 ? _cost_resourceKey : 0)) {\n                    var _cost_resourceKey1;\n                    missing.push(\"\".concat(((_cost_resourceKey1 = cost[resourceKey]) !== null && _cost_resourceKey1 !== void 0 ? _cost_resourceKey1 : 0) - resources[resourceKey], \" \").concat(resourceKey));\n                }\n            }\n            if (missing.length > 0) {\n                addNotification(\"Need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n        }\n        setPlayerAction({\n            mode: \"build\",\n            buildingType: buildingId,\n            villagerId\n        });\n        setBuildPanelState({\n            isOpen: false,\n            villagerId: null,\n            anchorRect: null\n        });\n        setActivityStatus(\"Select a location to build a \".concat(buildingInfo.name, \". Right-click to cancel.\"));\n    };\n    const handleConfirmPlacement = (position)=>{\n        if ((playerAction === null || playerAction === void 0 ? void 0 : playerAction.mode) !== \"build\") return;\n        const { buildingType, villagerId } = playerAction;\n        const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === buildingType);\n        const builder = units.villagers.find((v)=>v.id === villagerId);\n        if (!buildingInfo || !builder) return;\n        if (!unlimitedResources) {\n            const cost = buildingInfo.cost;\n            const negativeCost = {};\n            for(const resource in cost){\n                negativeCost[resource] = -(cost[resource] || 0);\n            }\n            updateResources(negativeCost);\n        }\n        const buildTime = buildingInfo.buildTime * 1000;\n        const taskPayload = {\n            buildingType,\n            villagerIds: [\n                villagerId\n            ],\n            position\n        };\n        if (unlimitedResources) {\n            const taskId = \"\".concat(Date.now(), \"-instant-build\");\n            handleTaskCompletion({\n                id: taskId,\n                type: \"build\",\n                startTime: 0,\n                duration: 0,\n                payload: {\n                    ...taskPayload,\n                    position\n                }\n            });\n        } else {\n            const taskId = \"\".concat(Date.now(), \"-build-\").concat(buildingType);\n            const newConstruction = {\n                id: taskId,\n                type: buildingType,\n                position,\n                villagerIds: [\n                    villagerId\n                ]\n            };\n            setConstructingBuildings((prev)=>[\n                    ...prev,\n                    newConstruction\n                ]);\n            const newTask = {\n                id: taskId,\n                type: \"build\",\n                startTime: Date.now(),\n                duration: buildTime,\n                payload: taskPayload\n            };\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    newTask\n                ]);\n            setActivityStatus(\"\".concat(builder.name, \" has started constructing a \").concat(buildingInfo.name, \".\"));\n            addToLog(\"\".concat(builder.name, \" began construction of a new \").concat(buildingInfo.name, \".\"), buildingType);\n        }\n        setPlayerAction(null);\n    };\n    const handleCancelPlayerAction = ()=>{\n        setPlayerAction(null);\n        setActivityStatus(\"Command cancelled.\");\n    };\n    const handleDemolishBuilding = (type, id)=>{\n        var _buildings_townCenter;\n        if (activeTasks.some((t)=>{\n            var _t_payload;\n            return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.buildingId) === id;\n        })) {\n            addNotification(\"Cannot demolish a building with an active task.\");\n            return;\n        }\n        const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === type);\n        const buildingInstance = buildings[type].find((b)=>b.id === id);\n        if (!buildingInfo || !buildingInstance) return;\n        if (type === \"houses\" && population.current > (((_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter.length) > 0 ? 20 : 0) + (buildings.houses.length - 1) * 5) {\n            addNotification(\"Cannot demolish this house, your people would be homeless.\");\n            return;\n        }\n        const refund = {};\n        let refundMessageParts = [];\n        for(const res in buildingInfo.cost){\n            const resourceKey = res;\n            const cost = buildingInfo.cost[resourceKey] || 0;\n            const amount = Math.floor(cost * 0.5);\n            if (amount > 0) {\n                refund[resourceKey] = amount;\n                refundMessageParts.push(\"\".concat(amount, \" \").concat(resourceKey));\n            }\n        }\n        updateResources(refund);\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((b)=>b.id !== id)\n            }));\n        addToLog(\"\".concat(buildingInstance.name, \" (\").concat(buildingInfo.name, \") was demolished.\"), type);\n        if (refundMessageParts.length > 0) {\n            addNotification(\"Salvaged \".concat(refundMessageParts.join(\", \"), \".\"));\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleUpdateBuilding = (type, id, name)=>{\n        setBuildings((prev)=>({\n                ...prev,\n                [type]: prev[type].map((b)=>b.id === id ? {\n                        ...b,\n                        name\n                    } : b)\n            }));\n        addNotification(\"Building renamed.\");\n    };\n    const handleTrainVillagers = (count)=>{\n        var _buildings_townCenter;\n        if (activeTasks.some((t)=>t.type === \"train_villager\") || count <= 0) return;\n        const villagerCost = 50;\n        const totalCost = villagerCost * count;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more villagers.\"));\n            return;\n        }\n        const townCenter = (_buildings_townCenter = buildings.townCenter) === null || _buildings_townCenter === void 0 ? void 0 : _buildings_townCenter[0];\n        if (!townCenter) {\n            addNotification(\"No Town Center to train villagers.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            if (resources.food < totalCost) {\n                addNotification(\"Need \".concat(totalCost - resources.food, \" more Food.\"));\n                return;\n            }\n            updateResources({\n                food: -totalCost\n            });\n        }\n        const trainTime = 10000 * count; // 10s per villager\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"instant\",\n                type: \"train_villager\",\n                startTime: 0,\n                duration: 0,\n                payload: {\n                    count\n                }\n            });\n        } else {\n            const taskId = \"\".concat(Date.now(), \"-train-villager\");\n            const newTask = {\n                id: taskId,\n                type: \"train_villager\",\n                startTime: Date.now(),\n                duration: trainTime,\n                payload: {\n                    count,\n                    buildingId: townCenter.id\n                }\n            };\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    newTask\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" villager(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new villager(s).\"), \"villager\");\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleTrainUnits = (unitType, count)=>{\n        var _buildings_unitInfo_requiredBuilding;\n        const unitInfo = UNIT_INFO.find((u)=>u.id === unitType);\n        if (!unitInfo || activeTasks.some((t)=>{\n            var _t_payload;\n            return ((_t_payload = t.payload) === null || _t_payload === void 0 ? void 0 : _t_payload.unitType) === unitType;\n        }) || count <= 0) return;\n        if (population.current + count > population.capacity) {\n            addNotification(\"Need space for \".concat(count, \" more units.\"));\n            return;\n        }\n        const trainingBuilding = (_buildings_unitInfo_requiredBuilding = buildings[unitInfo.requiredBuilding]) === null || _buildings_unitInfo_requiredBuilding === void 0 ? void 0 : _buildings_unitInfo_requiredBuilding[0];\n        if (!trainingBuilding) {\n            addNotification(\"No \".concat(unitInfo.requiredBuilding, \" to train units.\"));\n            return;\n        }\n        if (!unlimitedResources) {\n            const totalCost = {};\n            const missing = [];\n            for(const res in unitInfo.cost){\n                const resourceKey = res;\n                const cost = (unitInfo.cost[resourceKey] || 0) * count;\n                totalCost[resourceKey] = -cost;\n                if (resources[resourceKey] < cost) missing.push(\"\".concat(cost - resources[resourceKey], \" \").concat(resourceKey));\n            }\n            if (missing.length > 0) {\n                addNotification(\"Need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources(totalCost);\n        }\n        const trainTime = unitInfo.trainTime * 1000 * count;\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"instant\",\n                type: \"train_military\",\n                startTime: 0,\n                duration: 0,\n                payload: {\n                    unitType,\n                    count\n                }\n            });\n        } else {\n            const taskId = \"\".concat(Date.now(), \"-train-\").concat(unitType);\n            const newTask = {\n                id: taskId,\n                type: \"train_military\",\n                startTime: Date.now(),\n                duration: trainTime,\n                payload: {\n                    unitType,\n                    count,\n                    buildingId: trainingBuilding.id\n                }\n            };\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    newTask\n                ]);\n            setActivityStatus(\"Training \".concat(count, \" \").concat(unitInfo.name, \"(s)...\"));\n            addToLog(\"Began training \".concat(count, \" new \").concat(unitInfo.name, \"(s).\"), unitType);\n        }\n        setBuildingManagementPanel({\n            isOpen: false,\n            type: null,\n            anchorRect: null\n        });\n    };\n    const handleDismissSpecificUnit = (type, id)=>{\n        if (type === \"villagers\" && isVillagerBusy(id)) {\n            addNotification(\"Cannot dismiss a busy villager.\");\n            return;\n        }\n        const unit = units[type].find((u)=>u.id === id);\n        if (!unit) return;\n        if (type === \"villagers\" && units.villagers.length <= 1) {\n            addNotification(\"Cannot dismiss your last villager.\");\n            return;\n        }\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].filter((u)=>u.id !== id)\n            }));\n        const unitTypeName = type === \"villagers\" ? \"villager\" : unit.unitType;\n        addToLog(\"\".concat(unit.name, \" the \").concat(unitTypeName, \" has been dismissed.\"), type === \"villagers\" ? \"villager\" : unit.unitType);\n        addNotification(\"\".concat(unit.name, \" was dismissed.\"));\n    };\n    const handleUpdateUnit = (type, id, name, title)=>{\n        setUnits((prev)=>({\n                ...prev,\n                [type]: prev[type].map((u)=>{\n                    if (u.id === id) {\n                        const updatedUnit = {\n                            ...u,\n                            name\n                        };\n                        if (type === \"military\" && title !== undefined) {\n                            updatedUnit.title = title;\n                        }\n                        return updatedUnit;\n                    }\n                    return u;\n                })\n            }));\n        addNotification(\"Unit updated.\");\n    };\n    const handleAssignVillagersToNode = (nodeId, count)=>{\n        const idleVillagers = units.villagers.filter((v)=>!isVillagerBusy(v.id));\n        if (count <= 0) return;\n        let cappedCount = Math.min(count, idleVillagers.length);\n        if (cappedCount === 0) {\n            addNotification(\"No idle villagers available.\");\n            return;\n        }\n        const villagersToAssign = idleVillagers.slice(0, cappedCount);\n        const villagerIdsToAssign = villagersToAssign.map((v)=>v.id);\n        const targetNode = resourceNodes.find((n)=>n.id === nodeId);\n        if (!targetNode) return;\n        setResourceNodes((prevNodes)=>prevNodes.map((n)=>n.id === nodeId ? {\n                    ...n,\n                    assignedVillagers: [\n                        ...new Set([\n                            ...n.assignedVillagers,\n                            ...villagerIdsToAssign\n                        ])\n                    ]\n                } : n));\n        const gatherRatePerVillager = GATHER_INFO[targetNode.type].rate;\n        if (unlimitedResources) {\n            updateResources({\n                [targetNode.type]: targetNode.amount\n            });\n            addToLog(\"\".concat(cappedCount, \" villager(s) instantly gathered \").concat(Math.floor(targetNode.amount), \" \").concat(targetNode.type, \".\"), targetNode.type);\n            setResourceNodes((prev)=>prev.filter((n)=>n.id !== nodeId));\n        } else {\n            const amountPerSecond = gatherRatePerVillager / 10;\n            const gatherInterval = setInterval(()=>{\n                let nodeIsDepleted = false;\n                setResourceNodes((prev)=>prev.map((n)=>{\n                        if (n.id === nodeId) {\n                            const newAmount = n.amount - amountPerSecond;\n                            if (newAmount <= 0) {\n                                nodeIsDepleted = true;\n                                updateResources({\n                                    [n.type]: n.amount\n                                });\n                                addToLog(\"\".concat(n.assignedVillagers.length, \" villager(s) depleted a \").concat(n.type, \" source.\"), n.type);\n                                return null;\n                            }\n                            updateResources({\n                                [n.type]: amountPerSecond\n                            });\n                            return {\n                                ...n,\n                                amount: newAmount\n                            };\n                        }\n                        return n;\n                    }).filter(Boolean));\n                if (nodeIsDepleted) {\n                    clearInterval(gatherInterval);\n                    setActiveTasks((prev)=>prev.filter((t)=>t.id !== \"gather-\".concat(nodeId)));\n                }\n            }, 100);\n            const newTask = {\n                id: \"gather-\".concat(nodeId),\n                type: \"gather\",\n                startTime: Date.now(),\n                duration: 99999999,\n                payload: {\n                    resourceNodeId: nodeId,\n                    villagerIds: villagersToAssign.map((v)=>v.id)\n                }\n            };\n            setActiveTasks((prev)=>[\n                    ...prev.filter((t)=>t.id !== \"gather-\".concat(nodeId)),\n                    newTask\n                ]);\n        }\n        addToLog(\"\".concat(cappedCount, \" villager(s) assigned to gather \").concat(targetNode.type, \".\"), targetNode.type);\n        setActivityStatus(\"\".concat(cappedCount, \" villager(s) are now gathering \").concat(targetNode.type, \".\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAssignVillagersToConstruction = (constructionId, count)=>{\n        var _task_payload_villagerIds, _task_payload;\n        const idleVillagers = units.villagers.filter((v)=>!isVillagerBusy(v.id));\n        if (count <= 0) return;\n        let cappedCount = Math.min(count, idleVillagers.length);\n        if (cappedCount === 0) {\n            addNotification(\"No idle villagers available to assist.\");\n            return;\n        }\n        const villagersToAssign = idleVillagers.slice(0, cappedCount).map((v)=>v.id);\n        const task = activeTasks.find((t)=>t.id === constructionId);\n        const construction = constructingBuildings.find((c)=>c.id === constructionId);\n        if (!task || !construction) return;\n        const buildingInfo = BUILDINGS_INFO.find((b)=>b.id === construction.type);\n        if (!buildingInfo) return;\n        const baseDuration = buildingInfo.buildTime * 1000;\n        const oldWorkerCount = ((_task_payload = task.payload) === null || _task_payload === void 0 ? void 0 : (_task_payload_villagerIds = _task_payload.villagerIds) === null || _task_payload_villagerIds === void 0 ? void 0 : _task_payload_villagerIds.length) || 1;\n        const timeElapsed = Date.now() - task.startTime;\n        const workDone = timeElapsed * oldWorkerCount;\n        const totalWork = baseDuration;\n        const workRemaining = Math.max(0, totalWork - workDone);\n        const newWorkerCount = oldWorkerCount + cappedCount;\n        const newRemainingDuration = workRemaining / newWorkerCount;\n        const updatedVillagerIds = [\n            ...task.payload.villagerIds,\n            ...villagersToAssign\n        ];\n        setActiveTasks((prev)=>prev.map((t)=>t.id === constructionId ? {\n                    ...t,\n                    startTime: Date.now(),\n                    duration: newRemainingDuration,\n                    payload: {\n                        ...t.payload,\n                        villagerIds: updatedVillagerIds\n                    }\n                } : t));\n        setConstructingBuildings((prev)=>prev.map((c)=>c.id === constructionId ? {\n                    ...c,\n                    villagerIds: updatedVillagerIds\n                } : c));\n        addToLog(\"\".concat(cappedCount, \" villager(s) are now assisting with the \").concat(buildingInfo.name, \".\"), buildingInfo.id);\n        setActivityStatus(\"Construction of the \".concat(buildingInfo.name, \" is now faster.\"));\n        setAssignmentPanelState({\n            isOpen: false,\n            targetId: null,\n            targetType: null,\n            anchorRect: null\n        });\n    };\n    const handleAssignVillagers = (targetId, count)=>{\n        if (assignmentPanelState.targetType === \"resource\") {\n            handleAssignVillagersToNode(targetId, count);\n        } else if (assignmentPanelState.targetType === \"construction\") {\n            handleAssignVillagersToConstruction(targetId, count);\n        }\n    };\n    const handleAdvanceAge = async ()=>{\n        if (activeTasks.some((t)=>t.type === \"advance_age\")) {\n            addNotification(\"Advancement already in progress.\");\n            return;\n        }\n        if (!unlimitedResources) {\n            if (resources.food < 500 || resources.gold < 200) {\n                const missing = [];\n                if (resources.food < 500) missing.push(\"\".concat(500 - resources.food, \" Food\"));\n                if (resources.gold < 200) missing.push(\"\".concat(200 - resources.gold, \" Gold\"));\n                addNotification(\"To advance, you need \".concat(missing.join(\" and \"), \".\"));\n                return;\n            }\n            updateResources({\n                food: -500,\n                gold: -200\n            });\n        }\n        const duration = 60000;\n        if (unlimitedResources) {\n            handleTaskCompletion({\n                id: \"instant\",\n                type: \"advance_age\",\n                startTime: 0,\n                duration: 0\n            });\n        } else {\n            const taskId = \"\".concat(Date.now(), \"-advance_age\");\n            const newTask = {\n                id: taskId,\n                type: \"advance_age\",\n                startTime: Date.now(),\n                duration\n            };\n            setActiveTasks((prev)=>[\n                    ...prev,\n                    newTask\n                ]);\n            setActivityStatus(\"Your people begin the long journey to a new age.\");\n            setBuildingManagementPanel({\n                isOpen: false,\n                type: null,\n                anchorRect: null\n            });\n        }\n    };\n    const handleExitGame = async ()=>{\n        setCurrentSaveName(null);\n        await fetchSaves();\n        setGameState(_types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU);\n    };\n    const handleToggleUnlimitedResources = ()=>{\n        const newMode = !unlimitedResources;\n        setUnlimitedResources(newMode);\n        if (newMode) {\n            setResources({\n                food: 99999,\n                wood: 99999,\n                gold: 99999,\n                stone: 99999\n            });\n            addNotification(\"Test Mode: ON\");\n        } else {\n            addNotification(\"Test Mode: OFF\");\n        }\n    };\n    const buildingCounts = Object.keys(buildings).reduce((acc, key)=>{\n        const buildingType = key;\n        acc[buildingType] = buildings[buildingType].length;\n        return acc;\n    }, {});\n    const idleVillagerCount = units.villagers.filter((v)=>!isVillagerBusy(v.id)).length;\n    const assignmentTarget = assignmentPanelState.targetType === \"resource\" ? resourceNodes.find((n)=>n.id === assignmentPanelState.targetId) : constructingBuildings.find((c)=>c.id === assignmentPanelState.targetId);\n    const closeAllPanels = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setUnitManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                anchorRect: null\n            } : p);\n        setBuildingManagementPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                type: null,\n                instanceId: undefined,\n                anchorRect: null\n            } : p);\n        setBuildPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                villagerId: null,\n                anchorRect: null\n            } : p);\n        setAssignmentPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                targetId: null,\n                targetType: null,\n                anchorRect: null\n            } : p);\n        setSettingsPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setCivPanelState((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n        setAllBuildingsPanel((p)=>p.isOpen ? {\n                isOpen: false,\n                anchorRect: null\n            } : p);\n    }, []);\n    const handleOpenBuildingPanel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((type, instanceId, rect)=>{\n        closeAllPanels();\n        setBuildingManagementPanel({\n            isOpen: true,\n            type,\n            instanceId,\n            anchorRect: rect\n        });\n    }, [\n        closeAllPanels\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleClickOutside = (event)=>{\n            const isAnyPanelOpen = unitManagementPanel.isOpen || buildingManagementPanel.isOpen || buildPanelState.isOpen || assignmentPanelState.isOpen || settingsPanelState.isOpen || civPanelState.isOpen || allBuildingsPanel.isOpen;\n            if (!isAnyPanelOpen) {\n                return;\n            }\n            const target = event.target;\n            if (target.closest(\".sci-fi-panel-popup\")) {\n                return;\n            }\n            closeAllPanels();\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return ()=>{\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [\n        unitManagementPanel.isOpen,\n        buildingManagementPanel.isOpen,\n        buildPanelState.isOpen,\n        assignmentPanelState.isOpen,\n        settingsPanelState.isOpen,\n        civPanelState.isOpen,\n        allBuildingsPanel.isOpen,\n        closeAllPanels\n    ]);\n    const renderContent = ()=>{\n        switch(gameState){\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.MENU:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 912,\n                    columnNumber: 24\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.LOADING:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 914,\n                    columnNumber: 24\n                }, undefined);\n            case _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING:\n                if (!civilization) return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_LoadingScreen__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 916,\n                    columnNumber: 43\n                }, undefined);\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_GameUI__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                            civilization: civilization,\n                            resources: resources,\n                            units: units,\n                            buildings: buildings,\n                            population: population,\n                            currentAge: currentAge,\n                            gameLog: gameLog,\n                            currentEvent: currentEvent,\n                            onEventChoice: handleEventChoice,\n                            resourceDeltas: resourceDeltas,\n                            activityStatus: activityStatus,\n                            unitList: UNIT_INFO,\n                            buildingList: BUILDINGS_INFO,\n                            onOpenUnitPanel: (type, rect)=>{\n                                closeAllPanels();\n                                setUnitManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            onOpenAllBuildingsPanel: (rect)=>{\n                                closeAllPanels();\n                                setAllBuildingsPanel({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            playerAction: playerAction,\n                            onConfirmPlacement: handleConfirmPlacement,\n                            onCancelPlayerAction: handleCancelPlayerAction,\n                            onBuildingClick: (building, rect)=>{\n                                closeAllPanels();\n                                const type = Object.keys(buildings).find((key)=>buildings[key].some((b)=>b.id === building.id));\n                                if (type) setBuildingManagementPanel({\n                                    isOpen: true,\n                                    type,\n                                    instanceId: building.id,\n                                    anchorRect: rect\n                                });\n                            },\n                            mapDimensions: MAP_DIMENSIONS,\n                            constructingBuildings: constructingBuildings,\n                            activeTasks: activeTasks,\n                            onExitGame: handleExitGame,\n                            onOpenSettingsPanel: (rect)=>{\n                                closeAllPanels();\n                                setSettingsPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenCivPanel: (rect)=>{\n                                closeAllPanels();\n                                setCivPanelState({\n                                    isOpen: true,\n                                    anchorRect: rect\n                                });\n                            },\n                            resourceNodes: resourceNodes,\n                            onOpenAssignmentPanel: (nodeId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: nodeId,\n                                    targetType: \"resource\",\n                                    anchorRect: rect\n                                });\n                            },\n                            onOpenConstructionPanel: (constructionId, rect)=>{\n                                closeAllPanels();\n                                setAssignmentPanelState({\n                                    isOpen: true,\n                                    targetId: constructionId,\n                                    targetType: \"construction\",\n                                    anchorRect: rect\n                                });\n                            },\n                            gatherInfo: GATHER_INFO\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 919,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildPanel__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                            isOpen: buildPanelState.isOpen,\n                            onClose: ()=>setBuildPanelState({\n                                    isOpen: false,\n                                    villagerId: null,\n                                    anchorRect: null\n                                }),\n                            onStartPlacement: handleStartPlacement,\n                            resources: resources,\n                            buildingCounts: buildingCounts,\n                            buildingList: BUILDINGS_INFO,\n                            anchorRect: buildPanelState.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 955,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_UnitManagementPanel__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                            isOpen: unitManagementPanel.isOpen,\n                            onClose: ()=>setUnitManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            type: unitManagementPanel.type,\n                            units: units,\n                            onUpdateUnit: handleUpdateUnit,\n                            onDismissUnit: handleDismissSpecificUnit,\n                            onInitiateBuild: (villagerId, rect)=>{\n                                closeAllPanels();\n                                handleInitiateBuild(villagerId, rect);\n                            },\n                            getVillagerTaskDetails: getVillagerTaskDetails,\n                            anchorRect: unitManagementPanel.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 965,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_BuildingManagementPanel__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                            isOpen: buildingManagementPanel.isOpen,\n                            onClose: ()=>setBuildingManagementPanel({\n                                    isOpen: false,\n                                    type: null,\n                                    anchorRect: null\n                                }),\n                            panelState: buildingManagementPanel,\n                            buildings: buildings,\n                            buildingList: BUILDINGS_INFO,\n                            onUpdateBuilding: handleUpdateBuilding,\n                            onDemolishBuilding: handleDemolishBuilding,\n                            onTrainUnits: handleTrainUnits,\n                            onTrainVillagers: handleTrainVillagers,\n                            resources: resources,\n                            population: population,\n                            unitList: UNIT_INFO,\n                            onAdvanceAge: handleAdvanceAge,\n                            activeTasks: activeTasks,\n                            anchorRect: buildingManagementPanel.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 977,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ResourceAssignmentPanel__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                            isOpen: assignmentPanelState.isOpen,\n                            onClose: ()=>setAssignmentPanelState({\n                                    isOpen: false,\n                                    targetId: null,\n                                    targetType: null,\n                                    anchorRect: null\n                                }),\n                            assignmentTarget: assignmentTarget || null,\n                            idleVillagerCount: idleVillagerCount,\n                            onAssignVillagers: handleAssignVillagers,\n                            gatherInfo: GATHER_INFO,\n                            buildingList: BUILDINGS_INFO,\n                            anchorRect: assignmentPanelState.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 995,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SettingsPanel__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n                            isOpen: settingsPanelState.isOpen,\n                            onClose: ()=>setSettingsPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            anchorRect: settingsPanelState.anchorRect,\n                            opacity: panelOpacity,\n                            onOpacityChange: setPanelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 1006,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CivilizationPanel__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                            isOpen: civPanelState.isOpen,\n                            onClose: ()=>setCivPanelState({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            civilization: civilization,\n                            anchorRect: civPanelState.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 1013,\n                            columnNumber: 25\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AllBuildingsPanel__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                            isOpen: allBuildingsPanel.isOpen,\n                            onClose: ()=>setAllBuildingsPanel({\n                                    isOpen: false,\n                                    anchorRect: null\n                                }),\n                            buildingList: BUILDINGS_INFO,\n                            buildingCounts: buildingCounts,\n                            constructingBuildings: constructingBuildings,\n                            onOpenBuildingPanel: handleOpenBuildingPanel,\n                            anchorRect: allBuildingsPanel.anchorRect,\n                            panelOpacity: panelOpacity\n                        }, void 0, false, {\n                            fileName: \"/home/user/studio/src/app/page.tsx\",\n                            lineNumber: 1020,\n                            columnNumber: 25\n                        }, undefined)\n                    ]\n                }, void 0, true);\n            default:\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_StartScreen__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    onNewGame: handleStartNewGame,\n                    onResumeGame: handleResumeGame,\n                    savedGames: allSaves\n                }, void 0, false, {\n                    fileName: \"/home/user/studio/src/app/page.tsx\",\n                    lineNumber: 1033,\n                    columnNumber: 24\n                }, undefined);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-stone-dark flex items-center justify-center p-4\",\n        children: [\n            gameState === _types__WEBPACK_IMPORTED_MODULE_2__.GameStatus.PLAYING && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: handleToggleUnlimitedResources,\n                className: \"fixed bottom-4 left-4 z-[101] bg-brand-gold text-stone-dark font-bold py-1 px-3 rounded-full text-xs shadow-lg hover:scale-105 transition-transform\",\n                \"aria-label\": \"Toggle unlimited resources test mode\",\n                children: [\n                    \"Test Mode: \",\n                    unlimitedResources ? \"ON\" : \"OFF\"\n                ]\n            }, void 0, true, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 1040,\n                columnNumber: 18\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_NotificationManager__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                notifications: notifications,\n                onRemoveNotification: removeNotification\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 1048,\n                columnNumber: 13\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: \"w-full max-w-7xl mx-auto\",\n                children: renderContent()\n            }, void 0, false, {\n                fileName: \"/home/user/studio/src/app/page.tsx\",\n                lineNumber: 1049,\n                columnNumber: 13\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/user/studio/src/app/page.tsx\",\n        lineNumber: 1038,\n        columnNumber: 9\n    }, undefined);\n};\n_s(GamePage, \"3VWtJBrnfteaRQARupOZKhjoCEk=\");\n_c = GamePage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (GamePage);\nvar _c;\n$RefreshReg$(_c, \"GamePage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvcGFnZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR3dFO0FBQ21VO0FBQzVSO0FBQzFCO0FBQzdCO0FBQ2Y7QUFDVTtBQUNJO0FBQ047QUFDa0I7QUFDQTtBQUNRO0FBQ0E7QUFDcEI7QUFDUTtBQUNBO0FBRS9ELE1BQU13QixpQkFBaUM7SUFDbkM7UUFBRUMsSUFBSTtRQUFVQyxNQUFNO1FBQVNDLGFBQWE7UUFBdUNDLE1BQU07WUFBRUMsTUFBTTtRQUFHO1FBQUdDLFVBQVU7UUFBT0MsV0FBVztJQUFHO0lBQ3RJO1FBQUVOLElBQUk7UUFBWUMsTUFBTTtRQUFZQyxhQUFhO1FBQWlDQyxNQUFNO1lBQUVDLE1BQU07WUFBS0csT0FBTztRQUFHO1FBQUdGLFVBQVU7UUFBTUMsV0FBVztJQUFHO0lBQ2hKO1FBQUVOLElBQUk7UUFBZ0JDLE1BQU07UUFBaUJDLGFBQWE7UUFBK0JDLE1BQU07WUFBRUMsTUFBTTtRQUFJO1FBQUdDLFVBQVU7UUFBTUMsV0FBVztJQUFHO0lBQzVJO1FBQUVOLElBQUk7UUFBVUMsTUFBTTtRQUFXQyxhQUFhO1FBQStCQyxNQUFNO1lBQUVDLE1BQU07WUFBS0ksTUFBTTtRQUFHO1FBQUdILFVBQVU7UUFBTUMsV0FBVztJQUFHO0lBQzFJO1FBQUVOLElBQUk7UUFBaUJDLE1BQU07UUFBa0JDLGFBQWE7UUFBa0NDLE1BQU07WUFBRUMsTUFBTTtZQUFLSSxNQUFNO1FBQUk7UUFBR0gsVUFBVTtRQUFNQyxXQUFXO0lBQUc7SUFDNUo7UUFBRU4sSUFBSTtRQUFjQyxNQUFNO1FBQWNDLGFBQWE7UUFBNkNDLE1BQU07WUFBRUMsTUFBTTtZQUFLSSxNQUFNO1FBQUk7UUFBR0gsVUFBVTtRQUFNQyxXQUFXO0lBQUc7SUFDaEs7UUFBRU4sSUFBSTtRQUFjQyxNQUFNO1FBQWVDLGFBQWE7UUFBbUNDLE1BQU07WUFBRUksT0FBTztRQUFJO1FBQUdGLFVBQVU7UUFBTUMsV0FB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NEJBQ1RtUixpQkFBaUJsUjs7Ozs7O3NDQUVyQiw4REFBQ3ZFLHNFQUFpQkE7NEJBQ2QwRSxRQUFRZ0IsY0FBY2hCLE1BQU07NEJBQzVCa1EsU0FBUyxJQUFNalAsaUJBQWlCO29DQUFFakIsUUFBUTtvQ0FBT0UsWUFBWTtnQ0FBSzs0QkFDbEV6QyxjQUFjQTs0QkFDZHlDLFlBQVljLGNBQWNkLFVBQVU7NEJBQ3BDTixjQUFjQTs7Ozs7O3NDQUVsQiw4REFBQ3JFLHNFQUFpQkE7NEJBQ2R5RSxRQUFRUSxrQkFBa0JSLE1BQU07NEJBQ2hDa1EsU0FBUyxJQUFNelAscUJBQXFCO29DQUFFVCxRQUFRO29DQUFPRSxZQUFZO2dDQUFLOzRCQUN0RWlQLGNBQWMzVDs0QkFDZHFTLGdCQUFnQkE7NEJBQ2hCck8sdUJBQXVCQTs0QkFDdkI2UCxxQkFBcUJoQjs0QkFDckJuTyxZQUFZTSxrQkFBa0JOLFVBQVU7NEJBQ3hDTixjQUFjQTs7Ozs7Ozs7WUFJOUI7Z0JBQ0kscUJBQU8sOERBQUM5RSwrREFBV0E7b0JBQUNnVSxXQUFXcks7b0JBQW9Cc0ssY0FBYy9JO29CQUFrQmdKLFlBQVloUTs7Ozs7O1FBQ3ZHO0lBQ0o7SUFFQSxxQkFDSSw4REFBQ2dTO1FBQUlDLFdBQVU7O1lBQ1YzVCxjQUFjakQsOENBQVVBLENBQUNxSCxPQUFPLGtCQUM1Qiw4REFBQ3dQO2dCQUNFQyxTQUFTeEQ7Z0JBQ1RzRCxXQUFVO2dCQUNWRyxjQUFXOztvQkFDZDtvQkFDZXRTLHFCQUFxQixPQUFPOzs7Ozs7OzBCQUdoRCw4REFBQzdELHdFQUFtQkE7Z0JBQUMyRCxlQUFlQTtnQkFBZXlTLHNCQUFzQmxQOzs7Ozs7MEJBQ3pFLDhEQUFDbVA7Z0JBQUtMLFdBQVU7MEJBQ1hwQzs7Ozs7Ozs7Ozs7O0FBSWpCO0dBMStCTXpSO0tBQUFBO0FBNCtCTiwrREFBZUEsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL3BhZ2UudHN4P2Y2OGEiXSwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIGNsaWVudCc7XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2FtZVN0YXR1cywgdHlwZSBDaXZpbGl6YXRpb24sIHR5cGUgUmVzb3VyY2VzLCB0eXBlIFVuaXRzLCB0eXBlIEJ1aWxkaW5ncywgdHlwZSBHYW1lRXZlbnQsIHR5cGUgR2FtZUxvZ0VudHJ5LCB0eXBlIExvZ0ljb25UeXBlLCB0eXBlIFJlc291cmNlRGVsdGFzLCBCdWlsZGluZ1R5cGUsIEJ1aWxkaW5nSW5mbywgVUlOb3RpZmljYXRpb24sIEZ1bGxHYW1lU3RhdGUsIFZpbGxhZ2VyLCBNaWxpdGFyeVVuaXQsIFVuaXRJbmZvLCBNaWxpdGFyeVVuaXRUeXBlLCBHYW1lVGFzaywgQ29uc3RydWN0aW5nQnVpbGRpbmcsIFRhc2tUeXBlLCBSZXNvdXJjZU5vZGUsIFJlc291cmNlTm9kZVR5cGUsIFBsYXllckFjdGlvblN0YXRlLCBHYW1lRXZlbnRDaG9pY2UgfSBmcm9tICdAL3R5cGVzJztcbmltcG9ydCB7IGdldFByZWRlZmluZWRDaXZpbGl6YXRpb24sIGdldFByZWRlZmluZWRHYW1lRXZlbnQsIGdldFByZWRlZmluZWRBZ2UgfSBmcm9tICdAL3NlcnZpY2VzL2dlbWluaVNlcnZpY2UnO1xuaW1wb3J0IHsgc2F2ZUdhbWVTdGF0ZSwgbG9hZEdhbWVTdGF0ZSwgZ2V0QWxsU2F2ZU5hbWVzIH0gZnJvbSAnQC9zZXJ2aWNlcy9kYlNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0UmFuZG9tTmFtZXMgfSBmcm9tICdAL3NlcnZpY2VzL25hbWVTZXJ2aWNlJztcbmltcG9ydCBHYW1lVUkgZnJvbSAnQC9jb21wb25lbnRzL0dhbWVVSSc7XG5pbXBvcnQgU3RhcnRTY3JlZW4gZnJvbSAnQC9jb21wb25lbnRzL1N0YXJ0U2NyZWVuJztcbmltcG9ydCBMb2FkaW5nU2NyZWVuIGZyb20gJ0AvY29tcG9uZW50cy9Mb2FkaW5nU2NyZWVuJztcbmltcG9ydCBCdWlsZFBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy9CdWlsZFBhbmVsJztcbmltcG9ydCBOb3RpZmljYXRpb25NYW5hZ2VyIGZyb20gJ0AvY29tcG9uZW50cy9Ob3RpZmljYXRpb25NYW5hZ2VyJztcbmltcG9ydCBVbml0TWFuYWdlbWVudFBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy9Vbml0TWFuYWdlbWVudFBhbmVsJztcbmltcG9ydCBCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvQnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwnO1xuaW1wb3J0IFJlc291cmNlQXNzaWdubWVudFBhbmVsIGZyb20gJ0AvY29tcG9uZW50cy9SZXNvdXJjZUFzc2lnbm1lbnRQYW5lbCc7XG5pbXBvcnQgU2V0dGluZ3NQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvU2V0dGluZ3NQYW5lbCc7XG5pbXBvcnQgQ2l2aWxpemF0aW9uUGFuZWwgZnJvbSAnQC9jb21wb25lbnRzL0NpdmlsaXphdGlvblBhbmVsJztcbmltcG9ydCBBbGxCdWlsZGluZ3NQYW5lbCBmcm9tICdAL2NvbXBvbmVudHMvQWxsQnVpbGRpbmdzUGFuZWwnO1xuXG5jb25zdCBCVUlMRElOR1NfSU5GTzogQnVpbGRpbmdJbmZvW10gPSBbXG4gICAgeyBpZDogJ2hvdXNlcycsIG5hbWU6ICdIb3VzZScsIGRlc2NyaXB0aW9uOiAnSW5jcmVhc2VzIHBvcHVsYXRpb24gY2FwYWNpdHkgYnkgNS4nLCBjb3N0OiB7IHdvb2Q6IDUwIH0sIGlzVW5pcXVlOiBmYWxzZSwgYnVpbGRUaW1lOiAxNSB9LFxuICAgIHsgaWQ6ICdiYXJyYWNrcycsIG5hbWU6ICdCYXJyYWNrcycsIGRlc2NyaXB0aW9uOiAnQWxsb3dzIHRyYWluaW5nIG9mIFN3b3Jkc21lbi4nLCBjb3N0OiB7IHdvb2Q6IDE1MCwgc3RvbmU6IDUwIH0sIGlzVW5pcXVlOiB0cnVlLCBidWlsZFRpbWU6IDYwIH0sXG4gICAgeyBpZDogJ2FyY2hlcnlSYW5nZScsIG5hbWU6ICdBcmNoZXJ5IFJhbmdlJywgZGVzY3JpcHRpb246ICdBbGxvd3MgdHJhaW5pbmcgb2YgQXJjaGVycy4nLCBjb3N0OiB7IHdvb2Q6IDE3NSB9LCBpc1VuaXF1ZTogdHJ1ZSwgYnVpbGRUaW1lOiA2MCB9LFxuICAgIHsgaWQ6ICdzdGFibGUnLCBuYW1lOiAnU3RhYmxlcycsIGRlc2NyaXB0aW9uOiAnQWxsb3dzIHRyYWluaW5nIG9mIEtuaWdodHMuJywgY29zdDogeyB3b29kOiAxNzUsIGdvbGQ6IDc1IH0sIGlzVW5pcXVlOiB0cnVlLCBidWlsZFRpbWU6IDc1IH0sXG4gICAgeyBpZDogJ3NpZWdlV29ya3Nob3AnLCBuYW1lOiAnU2llZ2UgV29ya3Nob3AnLCBkZXNjcmlwdGlvbjogJ0NvbnN0cnVjdHMgcG93ZXJmdWwgQ2F0YXB1bHRzLicsIGNvc3Q6IHsgd29vZDogMjAwLCBnb2xkOiAxNTAgfSwgaXNVbmlxdWU6IHRydWUsIGJ1aWxkVGltZTogOTAgfSxcbiAgICB7IGlkOiAnYmxhY2tzbWl0aCcsIG5hbWU6ICdCbGFja3NtaXRoJywgZGVzY3JpcHRpb246ICdSZXNlYXJjaGVzIGluZmFudHJ5IGFuZCBjYXZhbHJ5IHVwZ3JhZGVzLicsIGNvc3Q6IHsgd29vZDogMTAwLCBnb2xkOiAxMDAgfSwgaXNVbmlxdWU6IHRydWUsIGJ1aWxkVGltZTogNDUgfSxcbiAgICB7IGlkOiAnd2F0Y2hUb3dlcicsIG5hbWU6ICdXYXRjaCBUb3dlcicsIGRlc2NyaXB0aW9uOiAnUHJvdmlkZXMgZGVmZW5zZSBhZ2FpbnN0IHJhaWRzLicsIGNvc3Q6IHsgc3RvbmU6IDEyNSB9LCBpc1VuaXF1ZTogdHJ1ZSwgYnVpbGRUaW1lOiA0NSB9LFxuICAgIHsgaWQ6ICd0b3duQ2VudGVyJywgbmFtZTogJ1Rvd24gQ2VudGVyJywgZGVzY3JpcHRpb246ICdUaGUgaGVhcnQgb2YgeW91ciBzZXR0bGVtZW50LicsIGNvc3Q6IHt9LCBpc1VuaXF1ZTogdHJ1ZSwgYnVpbGRUaW1lOiAwIH1cbl07XG5cbmNvbnN0IFVOSVRfSU5GTzogVW5pdEluZm9bXSA9IFtcbiAgICB7IGlkOiAnc3dvcmRzbWFuJywgbmFtZTogJ1N3b3Jkc21hbicsIGRlc2NyaXB0aW9uOiAnQmFzaWMgbWVsZWUgaW5mYW50cnkuJywgY29zdDogeyBmb29kOiA2MCwgZ29sZDogMjAgfSwgcmVxdWlyZWRCdWlsZGluZzogJ2JhcnJhY2tzJywgdHJhaW5UaW1lOiAyMiB9LFxuICAgIHsgaWQ6ICdhcmNoZXInLCBuYW1lOiAnQXJjaGVyJywgZGVzY3JpcHRpb246ICdSYW5nZWQgdW5pdCBlZmZlY3RpdmUgYWdhaW5zdCBpbmZhbnRyeS4nLCBjb3N0OiB7IGZvb2Q6IDMwLCB3b29kOiA0MCB9LCByZXF1aXJlZEJ1aWxkaW5nOiAnYXJjaGVyeVJhbmdlJywgdHJhaW5UaW1lOiAyNSB9LFxuICAgIHsgaWQ6ICdrbmlnaHQnLCBuYW1lOiAnS25pZ2h0JywgZGVzY3JpcHRpb246ICdGYXN0IGFuZCBwb3dlcmZ1bCBjYXZhbHJ5LicsIGNvc3Q6IHsgZm9vZDogNjAsIGdvbGQ6IDc1IH0sIHJlcXVpcmVkQnVpbGRpbmc6ICdzdGFibGUnLCB0cmFpblRpbWU6IDMwIH0sXG4gICAgeyBpZDogJ2NhdGFwdWx0JywgbmFtZTogJ0NhdGFwdWx0JywgZGVzY3JpcHRpb246ICdTaWVnZSBlbmdpbmUgZGV2YXN0YXRpbmcgdG8gYnVpbGRpbmdzLicsIGNvc3Q6IHsgd29vZDogMTUwLCBnb2xkOiAxNTAgfSwgcmVxdWlyZWRCdWlsZGluZzogJ3NpZWdlV29ya3Nob3AnLCB0cmFpblRpbWU6IDQ1IH0sXG5dO1xuXG5jb25zdCBHQVRIRVJfSU5GTzogUmVjb3JkPFJlc291cmNlTm9kZVR5cGUsIHsgcmF0ZTogbnVtYmVyIH0+ID0ge1xuICAgIGZvb2Q6IHsgcmF0ZTogMTAgfSxcbiAgICB3b29kOiB7IHJhdGU6IDggfSxcbiAgICBnb2xkOiB7IHJhdGU6IDUgfSxcbiAgICBzdG9uZTogeyByYXRlOiA2IH0sXG59XG5cbmNvbnN0IGluaXRpYWxCdWlsZGluZ3NTdGF0ZTogQnVpbGRpbmdzID0ge1xuICAgIGhvdXNlczogW10sIGJhcnJhY2tzOiBbXSwgYXJjaGVyeVJhbmdlOiBbXSwgc3RhYmxlOiBbXSwgc2llZ2VXb3Jrc2hvcDogW10sIGJsYWNrc21pdGg6IFtdLCB3YXRjaFRvd2VyOiBbXSwgdG93bkNlbnRlcjogW11cbn07XG5cbmNvbnN0IE1BUF9ESU1FTlNJT05TID0geyB3aWR0aDogMjUsIGhlaWdodDogMTggfTtcblxuY29uc3QgR2FtZVBhZ2U6IFJlYWN0LkZDID0gKCkgPT4ge1xuICAgIGNvbnN0IFtnYW1lU3RhdGUsIHNldEdhbWVTdGF0ZV0gPSB1c2VTdGF0ZTxHYW1lU3RhdHVzPihHYW1lU3RhdHVzLk1FTlUpO1xuICAgIGNvbnN0IFtjaXZpbGl6YXRpb24sIHNldENpdmlsaXphdGlvbl0gPSB1c2VTdGF0ZTxDaXZpbGl6YXRpb24gfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBbcmVzb3VyY2VzLCBzZXRSZXNvdXJjZXNdID0gdXNlU3RhdGU8UmVzb3VyY2VzPih7IGZvb2Q6IDIwMCwgd29vZDogMTUwLCBnb2xkOiA1MCwgc3RvbmU6IDEwMCB9KTtcbiAgICBjb25zdCBbdW5pdHMsIHNldFVuaXRzXSA9IHVzZVN0YXRlPFVuaXRzPih7IHZpbGxhZ2VyczogW10sIG1pbGl0YXJ5OiBbXSB9KTtcbiAgICBjb25zdCBbYnVpbGRpbmdzLCBzZXRCdWlsZGluZ3NdID0gdXNlU3RhdGU8QnVpbGRpbmdzPihpbml0aWFsQnVpbGRpbmdzU3RhdGUpO1xuICAgIGNvbnN0IFtjdXJyZW50QWdlLCBzZXRDdXJyZW50QWdlXSA9IHVzZVN0YXRlPHN0cmluZz4oJ05vbWFkaWMgQWdlJyk7XG4gICAgY29uc3QgW2dhbWVMb2csIHNldEdhbWVMb2ddID0gdXNlU3RhdGU8R2FtZUxvZ0VudHJ5W10+KFtdKTtcbiAgICBjb25zdCBbY3VycmVudEV2ZW50LCBzZXRDdXJyZW50RXZlbnRdID0gdXNlU3RhdGU8R2FtZUV2ZW50IHwgbnVsbD4obnVsbCk7XG4gICAgY29uc3QgW3Jlc291cmNlRGVsdGFzLCBzZXRSZXNvdXJjZURlbHRhc10gPSB1c2VTdGF0ZTxSZXNvdXJjZURlbHRhcz4oe30pO1xuICAgIGNvbnN0IFthY3Rpdml0eVN0YXR1cywgc2V0QWN0aXZpdHlTdGF0dXNdID0gdXNlU3RhdGU8c3RyaW5nPignWW91ciBzdG9yeSBiZWdpbnMuLi4nKTtcbiAgICBjb25zdCBbbm90aWZpY2F0aW9ucywgc2V0Tm90aWZpY2F0aW9uc10gPSB1c2VTdGF0ZTxVSU5vdGlmaWNhdGlvbltdPihbXSk7XG4gICAgY29uc3QgW3VubGltaXRlZFJlc291cmNlcywgc2V0VW5saW1pdGVkUmVzb3VyY2VzXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgICBjb25zdCBbYWxsU2F2ZXMsIHNldEFsbFNhdmVzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG4gICAgY29uc3QgW2N1cnJlbnRTYXZlTmFtZSwgc2V0Q3VycmVudFNhdmVOYW1lXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtwbGF5ZXJBY3Rpb24sIHNldFBsYXllckFjdGlvbl0gPSB1c2VTdGF0ZTxQbGF5ZXJBY3Rpb25TdGF0ZT4obnVsbCk7XG4gICAgY29uc3QgW2FjdGl2ZVRhc2tzLCBzZXRBY3RpdmVUYXNrc10gPSB1c2VTdGF0ZTxHYW1lVGFza1tdPihbXSk7XG4gICAgY29uc3QgW2NvbnN0cnVjdGluZ0J1aWxkaW5ncywgc2V0Q29uc3RydWN0aW5nQnVpbGRpbmdzXSA9IHVzZVN0YXRlPENvbnN0cnVjdGluZ0J1aWxkaW5nW10+KFtdKTtcbiAgICBjb25zdCBbcmVzb3VyY2VOb2Rlcywgc2V0UmVzb3VyY2VOb2Rlc10gPSB1c2VTdGF0ZTxSZXNvdXJjZU5vZGVbXT4oW10pO1xuICAgIGNvbnN0IFtwYW5lbE9wYWNpdHksIHNldFBhbmVsT3BhY2l0eV0gPSB1c2VTdGF0ZSgxLjApO1xuICAgIFxuICAgIC8vIFBhbmVsIFN0YXRlc1xuICAgIGNvbnN0IFtidWlsZFBhbmVsU3RhdGUsIHNldEJ1aWxkUGFuZWxTdGF0ZV0gPSB1c2VTdGF0ZTx7IGlzT3BlbjogYm9vbGVhbjsgdmlsbGFnZXJJZDogc3RyaW5nIHwgbnVsbDsgYW5jaG9yUmVjdDogRE9NUmVjdCB8IG51bGwgfT4oeyBpc09wZW46IGZhbHNlLCB2aWxsYWdlcklkOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIGNvbnN0IFt1bml0TWFuYWdlbWVudFBhbmVsLCBzZXRVbml0TWFuYWdlbWVudFBhbmVsXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyB0eXBlOiAndmlsbGFnZXJzJyB8ICdtaWxpdGFyeScgfCBudWxsOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbDsgfT4oeyBpc09wZW46IGZhbHNlLCB0eXBlOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIGNvbnN0IFtidWlsZGluZ01hbmFnZW1lbnRQYW5lbCwgc2V0QnVpbGRpbmdNYW5hZ2VtZW50UGFuZWxdID0gdXNlU3RhdGU8eyBpc09wZW46IGJvb2xlYW47IHR5cGU6IEJ1aWxkaW5nVHlwZSB8IG51bGw7IGluc3RhbmNlSWQ/OiBzdHJpbmc7IGFuY2hvclJlY3Q6IERPTVJlY3QgfCBudWxsOyB9Pih7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgY29uc3QgW2FsbEJ1aWxkaW5nc1BhbmVsLCBzZXRBbGxCdWlsZGluZ3NQYW5lbF0gPSB1c2VTdGF0ZTx7IGlzT3BlbjogYm9vbGVhbjsgYW5jaG9yUmVjdDogRE9NUmVjdCB8IG51bGw7IH0+KHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICBjb25zdCBbYXNzaWdubWVudFBhbmVsU3RhdGUsIHNldEFzc2lnbm1lbnRQYW5lbFN0YXRlXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyB0YXJnZXRJZDogc3RyaW5nIHwgbnVsbDsgdGFyZ2V0VHlwZTogJ3Jlc291cmNlJyB8ICdjb25zdHJ1Y3Rpb24nIHwgbnVsbDsgYW5jaG9yUmVjdDogRE9NUmVjdCB8IG51bGw7IH0+KHsgaXNPcGVuOiBmYWxzZSwgdGFyZ2V0SWQ6IG51bGwsIHRhcmdldFR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgY29uc3QgW3NldHRpbmdzUGFuZWxTdGF0ZSwgc2V0U2V0dGluZ3NQYW5lbFN0YXRlXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbDsgfT4oeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIGNvbnN0IFtjaXZQYW5lbFN0YXRlLCBzZXRDaXZQYW5lbFN0YXRlXSA9IHVzZVN0YXRlPHsgaXNPcGVuOiBib29sZWFuOyBhbmNob3JSZWN0OiBET01SZWN0IHwgbnVsbDsgfT4oeyBpc09wZW46IGZhbHNlLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuXG4gICAgY29uc3QgZGVsdGFUaW1lb3V0UmVmID0gdXNlUmVmPHsgW2tleSBpbiBrZXlvZiBSZXNvdXJjZXNdPzogbnVtYmVyIH0+KHt9KTtcbiAgICBjb25zdCBldmVudFRpbWVyUmVmID0gdXNlUmVmPE5vZGVKUy5UaW1lb3V0IHwgbnVsbD4obnVsbCk7XG5cbiAgICBjb25zdCBwb3B1bGF0aW9uID0ge1xuICAgICAgICBjdXJyZW50OiB1bml0cy52aWxsYWdlcnMubGVuZ3RoICsgdW5pdHMubWlsaXRhcnkubGVuZ3RoLFxuICAgICAgICBjYXBhY2l0eTogKGJ1aWxkaW5ncy50b3duQ2VudGVyPy5sZW5ndGggPiAwID8gMjAgOiAwKSArIGJ1aWxkaW5ncy5ob3VzZXMubGVuZ3RoICogNSxcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IGZldGNoU2F2ZXMgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gYXdhaXQgZ2V0QWxsU2F2ZU5hbWVzKCk7XG4gICAgICAgIHNldEFsbFNhdmVzKG5hbWVzKTtcbiAgICB9LCBbXSk7XG4gICAgXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZmV0Y2hTYXZlcygpO1xuICAgIH0sIFtmZXRjaFNhdmVzXSk7XG4gICAgXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGdhbWVTdGF0ZSA9PT0gR2FtZVN0YXR1cy5QTEFZSU5HICYmIGNpdmlsaXphdGlvbiAmJiBjdXJyZW50U2F2ZU5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxTdGF0ZTogRnVsbEdhbWVTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBjaXZpbGl6YXRpb24sXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICAgICAgICAgIHVuaXRzLFxuICAgICAgICAgICAgICAgIGJ1aWxkaW5ncyxcbiAgICAgICAgICAgICAgICBjdXJyZW50QWdlLFxuICAgICAgICAgICAgICAgIGdhbWVMb2csXG4gICAgICAgICAgICAgICAgYWN0aXZlVGFza3MsXG4gICAgICAgICAgICAgICAgY29uc3RydWN0aW5nQnVpbGRpbmdzLFxuICAgICAgICAgICAgICAgIHJlc291cmNlTm9kZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2F2ZUdhbWVTdGF0ZShjdXJyZW50U2F2ZU5hbWUsIGZ1bGxTdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9LCBbY2l2aWxpemF0aW9uLCByZXNvdXJjZXMsIHVuaXRzLCBidWlsZGluZ3MsIGN1cnJlbnRBZ2UsIGdhbWVMb2csIGdhbWVTdGF0ZSwgY3VycmVudFNhdmVOYW1lLCBhY3RpdmVUYXNrcywgY29uc3RydWN0aW5nQnVpbGRpbmdzLCByZXNvdXJjZU5vZGVzXSk7XG5cbiAgICBjb25zdCBhZGROb3RpZmljYXRpb24gPSB1c2VDYWxsYmFjaygobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gYCR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpfWA7XG4gICAgICAgIHNldE5vdGlmaWNhdGlvbnMocHJldiA9PiBbLi4ucHJldiwgeyBpZCwgbWVzc2FnZSB9XSk7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgcmVtb3ZlTm90aWZpY2F0aW9uID0gdXNlQ2FsbGJhY2soKGlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgc2V0Tm90aWZpY2F0aW9ucyhwcmV2ID0+IHByZXYuZmlsdGVyKG4gPT4gbi5pZCAhPT0gaWQpKTtcbiAgICB9LCBbXSk7XG4gICAgXG4gICAgY29uc3QgYWRkVG9Mb2cgPSAobWVzc2FnZTogc3RyaW5nLCBpY29uOiBMb2dJY29uVHlwZSkgPT4ge1xuICAgICAgICBzZXRHYW1lTG9nKHByZXYgPT4gW3sgaWQ6IGAke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKX1gLCBtZXNzYWdlLCBpY29uIH0sIC4uLnByZXYuc2xpY2UoMCwgMTkpXSk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCB1cGRhdGVSZXNvdXJjZXMgPSB1c2VDYWxsYmFjaygoZGVsdGFzOiBSZXNvdXJjZURlbHRhcykgPT4ge1xuICAgICAgICBzZXRSZXNvdXJjZXMocHJldiA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdSZXNvdXJjZXMgPSB7IC4uLnByZXYgfTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRlbHRhcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc291cmNlS2V5ID0ga2V5IGFzIGtleW9mIFJlc291cmNlcztcbiAgICAgICAgICAgICAgICBuZXdSZXNvdXJjZXNbcmVzb3VyY2VLZXldID0gTWF0aC5tYXgoMCwgbmV3UmVzb3VyY2VzW3Jlc291cmNlS2V5XSArIChkZWx0YXNbcmVzb3VyY2VLZXldID8/IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdSZXNvdXJjZXM7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNldFJlc291cmNlRGVsdGFzKHByZXYgPT4gKHsuLi5wcmV2LCAuLi5kZWx0YXN9KSk7XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGVsdGFzKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvdXJjZUtleSA9IGtleSBhcyBrZXlvZiBSZXNvdXJjZXM7XG4gICAgICAgICAgICBpZiAoZGVsdGFUaW1lb3V0UmVmLmN1cnJlbnRbcmVzb3VyY2VLZXldKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChkZWx0YVRpbWVvdXRSZWYuY3VycmVudFtyZXNvdXJjZUtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsdGFUaW1lb3V0UmVmLmN1cnJlbnRbcmVzb3VyY2VLZXldID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFJlc291cmNlRGVsdGFzKHByZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdEZWx0YXMgPSB7Li4ucHJldn07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBuZXdEZWx0YXNbcmVzb3VyY2VLZXldO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3RGVsdGFzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMTUwMCk7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCBoYW5kbGVOZXdFdmVudCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgLy8gQWxsb3cgZXZlbnRzIHRvIHRyaWdnZXIgZXZlbiBpZiB2aWxsYWdlcnMgYXJlIGp1c3QgZ2F0aGVyaW5nLlxuICAgICAgICBjb25zdCBub25HYXRoZXJpbmdUYXNrcyA9IGFjdGl2ZVRhc2tzLmZpbHRlcih0ID0+IHQudHlwZSAhPT0gJ2dhdGhlcicpO1xuICAgICAgICBpZiAoIWNpdmlsaXphdGlvbiB8fCBjdXJyZW50RXZlbnQgfHwgbm9uR2F0aGVyaW5nVGFza3MubGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgYWRkVG9Mb2coJ0EgbmV3IGNoYXB0ZXIgdW5mb2xkcy4uLicsICdldmVudCcpO1xuICAgICAgICBjb25zdCBldmVudCA9IGdldFByZWRlZmluZWRHYW1lRXZlbnQoKTtcbiAgICAgICAgc2V0Q3VycmVudEV2ZW50KGV2ZW50KTtcbiAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoJ0EgbmV3IGV2ZW50IHJlcXVpcmVzIHlvdXIgYXR0ZW50aW9uIScpO1xuICAgIH0sIFtjaXZpbGl6YXRpb24sIGN1cnJlbnRFdmVudCwgYWN0aXZlVGFza3NdKTtcbiAgICBcbiAgICBjb25zdCBzY2hlZHVsZU5leHRFdmVudCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50VGltZXJSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGV2ZW50VGltZXJSZWYuY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dEV2ZW50VGltZSA9ICg0NSArIE1hdGgucmFuZG9tKCkgKiA0NSkgKiAxMDAwOyAvLyA0NS05MCBzZWNvbmRzXG4gICAgICAgIGV2ZW50VGltZXJSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4gaGFuZGxlTmV3RXZlbnQoKSwgbmV4dEV2ZW50VGltZSk7XG4gICAgfSwgW2hhbmRsZU5ld0V2ZW50XSk7XG5cbiAgICBjb25zdCBnZW5lcmF0ZVJlc291cmNlTm9kZXMgPSAoZXhpc3RpbmdQb3NpdGlvbnM6IFNldDxzdHJpbmc+KTogUmVzb3VyY2VOb2RlW10gPT4ge1xuICAgICAgICBjb25zdCBub2RlczogUmVzb3VyY2VOb2RlW10gPSBbXTtcbiAgICAgICAgY29uc3QgdHlwZXM6IFJlc291cmNlTm9kZVR5cGVbXSA9IFsnZm9vZCcsICd3b29kJywgJ2dvbGQnLCAnc3RvbmUnXTtcbiAgICAgICAgY29uc3QgbnVtTm9kZXMgPSAyMCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTm9kZXM7IGkrKykge1xuICAgICAgICAgICAgbGV0IHBvczoge3g6IG51bWJlciwgeTogbnVtYmVyfTtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBwb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BUF9ESU1FTlNJT05TLndpZHRoKSxcbiAgICAgICAgICAgICAgICAgICAgeTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTUFQX0RJTUVOU0lPTlMuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChleGlzdGluZ1Bvc2l0aW9ucy5oYXMoYCR7cG9zLnh9LCR7cG9zLnl9YCkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleGlzdGluZ1Bvc2l0aW9ucy5hZGQoYCR7cG9zLnh9LCR7cG9zLnl9YCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0eXBlcy5sZW5ndGgpXTtcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgyNTAwIC0gNTAwICsgMSkpICsgNTAwO1xuXG4gICAgICAgICAgICBub2Rlcy5wdXNoKHsgaWQ6IGAke0RhdGUubm93KCl9LW5vZGUtJHtpfWAsIHR5cGUsIHBvc2l0aW9uOiBwb3MsIGFtb3VudCwgYXNzaWduZWRWaWxsYWdlcnM6IFtdIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlU3RhcnROZXdHYW1lID0gKHNhdmVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGFsbFNhdmVzLmluY2x1ZGVzKHNhdmVOYW1lKSkge1xuICAgICAgICAgICAgYWRkTm90aWZpY2F0aW9uKGBBIHNhZ2EgbmFtZWQgXCIke3NhdmVOYW1lfVwiIGFscmVhZHkgZXhpc3RzLmApOyByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0R2FtZVN0YXRlKEdhbWVTdGF0dXMuTE9BRElORyk7XG4gICAgICAgIHNldEN1cnJlbnRTYXZlTmFtZShzYXZlTmFtZSk7XG5cbiAgICAgICAgY29uc3QgY2l2ID0gZ2V0UHJlZGVmaW5lZENpdmlsaXphdGlvbigpO1xuICAgICAgICBzZXRDaXZpbGl6YXRpb24oY2l2KTtcbiAgICAgICAgc2V0UmVzb3VyY2VzKHsgZm9vZDogMjAwLCB3b29kOiAxNTAsIGdvbGQ6IDUwLCBzdG9uZTogMTAwIH0pO1xuICAgICAgICBjb25zdCBpbml0aWFsVmlsbGFnZXJOYW1lcyA9IGdldFJhbmRvbU5hbWVzKCd2aWxsYWdlcicsIDMpO1xuICAgICAgICBjb25zdCBpbml0aWFsVmlsbGFnZXJzOiBWaWxsYWdlcltdID0gaW5pdGlhbFZpbGxhZ2VyTmFtZXMubWFwKG5hbWUgPT4gKHsgaWQ6IGAke0RhdGUubm93KCl9LSR7bmFtZX1gLCBuYW1lIH0pKTtcbiAgICAgICAgc2V0VW5pdHMoeyB2aWxsYWdlcnM6IGluaXRpYWxWaWxsYWdlcnMsIG1pbGl0YXJ5OiBbXSB9KTtcbiAgICAgICAgY29uc3QgW2luaXRpYWxUQ05hbWVdID0gZ2V0UmFuZG9tTmFtZXMoJ2J1aWxkaW5nJywgMSk7XG4gICAgICAgIGNvbnN0IHRjUG9zaXRpb24gPSB7IHg6IE1hdGguZmxvb3IoTUFQX0RJTUVOU0lPTlMud2lkdGggLyAyKSwgeTogTWF0aC5mbG9vcihNQVBfRElNRU5TSU9OUy5oZWlnaHQgLyAyKSB9O1xuICAgICAgICBjb25zdCBpbml0aWFsVEM6IEJ1aWxkaW5nSW5zdGFuY2UgPSB7IGlkOiBgJHtEYXRlLm5vdygpfS10Y2AsIG5hbWU6IGluaXRpYWxUQ05hbWUsIHBvc2l0aW9uOiB0Y1Bvc2l0aW9uIH07XG4gICAgICAgIHNldEJ1aWxkaW5ncyh7Li4uaW5pdGlhbEJ1aWxkaW5nc1N0YXRlLCB0b3duQ2VudGVyOiBbaW5pdGlhbFRDXX0pO1xuICAgICAgICBzZXRSZXNvdXJjZU5vZGVzKGdlbmVyYXRlUmVzb3VyY2VOb2RlcyhuZXcgU2V0KFtgJHt0Y1Bvc2l0aW9uLnh9LCR7dGNQb3NpdGlvbi55fWBdKSkpO1xuICAgICAgICBzZXRDdXJyZW50QWdlKCdOb21hZGljIEFnZScpO1xuICAgICAgICBzZXRHYW1lTG9nKFtdKTtcbiAgICAgICAgc2V0Q3VycmVudEV2ZW50KG51bGwpO1xuICAgICAgICBzZXRVbmxpbWl0ZWRSZXNvdXJjZXMoZmFsc2UpO1xuICAgICAgICBzZXRBY3RpdmVUYXNrcyhbXSk7XG4gICAgICAgIHNldENvbnN0cnVjdGluZ0J1aWxkaW5ncyhbXSk7XG4gICAgICAgIGFkZFRvTG9nKGAke2Npdi5uYW1lfSBoYXMgYmVlbiBmb3VuZGVkIWAsICdzeXN0ZW0nKTtcbiAgICAgICAgYWRkVG9Mb2coJ1lvdXIgc3RvcnkgYmVnaW5zLi4uJywgJ3N5c3RlbScpO1xuICAgICAgICBzZXRHYW1lU3RhdGUoR2FtZVN0YXR1cy5QTEFZSU5HKTtcbiAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoJ1lvdXIgc2V0dGxlbWVudCBhd2FpdHMgeW91ciBjb21tYW5kLicpO1xuICAgICAgICBmZXRjaFNhdmVzKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldFZpbGxhZ2VyVGFza0RldGFpbHMgPSB1c2VDYWxsYmFjaygodmlsbGFnZXJJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgICAgY29uc3QgdGFzayA9IGFjdGl2ZVRhc2tzLmZpbmQodCA9PiB0LnBheWxvYWQ/LnZpbGxhZ2VySWRzPy5pbmNsdWRlcyh2aWxsYWdlcklkKSk7XG5cbiAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgIGlmICh0YXNrLnR5cGUgPT09ICdidWlsZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBidWlsZGluZ0luZm8gPSBCVUlMRElOR1NfSU5GTy5maW5kKGIgPT4gYi5pZCA9PT0gdGFzay5wYXlsb2FkIS5idWlsZGluZ1R5cGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgQnVzeTogQ29uc3RydWN0aW5nICR7YnVpbGRpbmdJbmZvPy5uYW1lIHx8ICdhIGJ1aWxkaW5nJ31gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhc2sudHlwZSA9PT0gJ2dhdGhlcicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gcmVzb3VyY2VOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gdGFzay5wYXlsb2FkIS5yZXNvdXJjZU5vZGVJZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBCdXN5OiBHYXRoZXJpbmcgJHtub2RlPy50eXBlIHx8ICdyZXNvdXJjZXMnfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiAnSWRsZSc7XG4gICAgfSwgW2FjdGl2ZVRhc2tzLCByZXNvdXJjZU5vZGVzXSk7XG5cbiAgICBjb25zdCBpc1ZpbGxhZ2VyQnVzeSA9IHVzZUNhbGxiYWNrKCh2aWxsYWdlcklkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuIGdldFZpbGxhZ2VyVGFza0RldGFpbHModmlsbGFnZXJJZCkgIT09ICdJZGxlJztcbiAgICB9LCBbZ2V0VmlsbGFnZXJUYXNrRGV0YWlsc10pO1xuXG4gICAgY29uc3QgaGFuZGxlUmVzdW1lR2FtZSA9IGFzeW5jIChzYXZlTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IHNhdmVkU3RhdGUgPSBhd2FpdCBsb2FkR2FtZVN0YXRlKHNhdmVOYW1lKSBhcyBGdWxsR2FtZVN0YXRlO1xuICAgICAgICBpZiAoc2F2ZWRTdGF0ZSkge1xuICAgICAgICAgICAgc2V0R2FtZVN0YXRlKEdhbWVTdGF0dXMuTE9BRElORyk7XG4gICAgICAgICAgICBzZXRDdXJyZW50U2F2ZU5hbWUoc2F2ZU5hbWUpO1xuICAgICAgICAgICAgc2V0Q2l2aWxpemF0aW9uKHNhdmVkU3RhdGUuY2l2aWxpemF0aW9uKTtcbiAgICAgICAgICAgIHNldFJlc291cmNlcyhzYXZlZFN0YXRlLnJlc291cmNlcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICgoc2F2ZWRTdGF0ZS51bml0cyBhcyBhbnkpPy5zb2xkaWVycykge1xuICAgICAgICAgICAgICAgICBjb25zdCBtaWdyYXRlZE1pbGl0YXJ5OiBNaWxpdGFyeVVuaXRbXSA9IChzYXZlZFN0YXRlLnVuaXRzIGFzIGFueSkuc29sZGllcnMubWFwKChzOiBhbnkpID0+ICh7IC4uLnMsIHVuaXRUeXBlOiAnc3dvcmRzbWFuJyB9KSk7XG4gICAgICAgICAgICAgICAgIHNldFVuaXRzKHsgdmlsbGFnZXJzOiBzYXZlZFN0YXRlLnVuaXRzLnZpbGxhZ2VycyB8fCBbXSwgbWlsaXRhcnk6IG1pZ3JhdGVkTWlsaXRhcnkgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICBzZXRVbml0cyhzYXZlZFN0YXRlLnVuaXRzIHx8IHsgdmlsbGFnZXJzOiBbXSwgbWlsaXRhcnk6IFtdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgZmluYWxCdWlsZGluZ3MgPSB7IC4uLmluaXRpYWxCdWlsZGluZ3NTdGF0ZSwgLi4uKHNhdmVkU3RhdGUuYnVpbGRpbmdzIHx8IHt9KSB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBvY2N1cGllZENlbGxzID0gbmV3IFNldChPYmplY3QudmFsdWVzKGZpbmFsQnVpbGRpbmdzKS5mbGF0KCkubWFwKChiOiBhbnkpID0+IGAke2IucG9zaXRpb24ueH0sJHtiLnBvc2l0aW9uLnl9YCkpO1xuXG4gICAgICAgICAgICBpZiAoIWZpbmFsQnVpbGRpbmdzLnRvd25DZW50ZXIgfHwgZmluYWxCdWlsZGluZ3MudG93bkNlbnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgdGNQb3MgPSB7IHg6IDEwLCB5OiA1IH07XG4gICAgICAgICAgICAgICAgd2hpbGUgKG9jY3VwaWVkQ2VsbHMuaGFzKGAke3RjUG9zLnh9LCR7dGNQb3MueX1gKSkgeyB0Y1Bvcy54Kys7IH1cbiAgICAgICAgICAgICAgICBjb25zdCBbdGNOYW1lXSA9IGdldFJhbmRvbU5hbWVzKCdidWlsZGluZycsIDEpO1xuICAgICAgICAgICAgICAgIGZpbmFsQnVpbGRpbmdzLnRvd25DZW50ZXIgPSBbeyBpZDogYCR7RGF0ZS5ub3coKX0tdGNgLCBuYW1lOiB0Y05hbWUsIHBvc2l0aW9uOiB0Y1BvcyB9XTtcbiAgICAgICAgICAgICAgICBvY2N1cGllZENlbGxzLmFkZChgJHt0Y1Bvcy54fSwke3RjUG9zLnl9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGZpcnN0QnVpbGRpbmcgPSBPYmplY3QudmFsdWVzKGZpbmFsQnVpbGRpbmdzKS5mbGF0KClbMF07XG4gICAgICAgICAgICBpZiAoZmlyc3RCdWlsZGluZyAmJiB0eXBlb2YgZmlyc3RCdWlsZGluZyA9PT0gJ29iamVjdCcgJiYgISgncG9zaXRpb24nIGluIGZpcnN0QnVpbGRpbmcpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWlncmF0ZWQgPSB7IC4uLmluaXRpYWxCdWlsZGluZ3NTdGF0ZSB9O1xuICAgICAgICAgICAgICAgIGxldCB5ID0gMztcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhmaW5hbEJ1aWxkaW5ncykuZm9yRWFjaCgoW3R5cGUsIGluc3RhbmNlc10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHggPSA1O1xuICAgICAgICAgICAgICAgICAgICAoaW5zdGFuY2VzIGFzIEJ1aWxkaW5nSW5zdGFuY2VbXSkuZm9yRWFjaChpbnN0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChvY2N1cGllZENlbGxzLmhhcyhgJHt4fSwke3l9YCkpIHsgeCsrOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAobWlncmF0ZWRbdHlwZSBhcyBCdWlsZGluZ1R5cGVdIGFzIEJ1aWxkaW5nSW5zdGFuY2VbXSkucHVzaCh7IC4uLmluc3QsIHBvc2l0aW9uOiB7IHgsIHkgfSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9jY3VwaWVkQ2VsbHMuYWRkKGAke3h9LCR7eX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgrKztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZmluYWxCdWlsZGluZ3MgPSBtaWdyYXRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2V0QnVpbGRpbmdzKGZpbmFsQnVpbGRpbmdzKTtcblxuICAgICAgICAgICAgY29uc3Qgbm9kZXNUb1NldCA9IChzYXZlZFN0YXRlLnJlc291cmNlTm9kZXMgfHwgW10pLm1hcChuID0+ICh7Li4ubiwgYXNzaWduZWRWaWxsYWdlcnM6IG4uYXNzaWduZWRWaWxsYWdlcnMgfHwgW119KSk7XG4gICAgICAgICAgICBpZiAobm9kZXNUb1NldC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgc2V0UmVzb3VyY2VOb2RlcyhnZW5lcmF0ZVJlc291cmNlTm9kZXMob2NjdXBpZWRDZWxscykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgc2V0UmVzb3VyY2VOb2Rlcyhub2Rlc1RvU2V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0Q3VycmVudEFnZShzYXZlZFN0YXRlLmN1cnJlbnRBZ2UpO1xuICAgICAgICAgICAgc2V0R2FtZUxvZyhzYXZlZFN0YXRlLmdhbWVMb2cpO1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MoKHNhdmVkU3RhdGUuYWN0aXZlVGFza3MgfHwgW10pLm1hcCh0ID0+IHtcbiAgICAgICAgICAgICAgICAvLyBNaWdyYXRpb24gZm9yIG9sZCBzYXZlIGZvcm1hdFxuICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT09ICdidWlsZCcgJiYgdC5wYXlsb2FkPy52aWxsYWdlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnQsIHBheWxvYWQ6IHsgLi4udC5wYXlsb2FkLCB2aWxsYWdlcklkczogW3QucGF5bG9hZC52aWxsYWdlcklkXSwgdmlsbGFnZXJJZDogdW5kZWZpbmVkIH0gfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzZXRDb25zdHJ1Y3RpbmdCdWlsZGluZ3MoKHNhdmVkU3RhdGUuY29uc3RydWN0aW5nQnVpbGRpbmdzIHx8IFtdKS5tYXAoYyA9PiB7XG4gICAgICAgICAgICAgICAgIC8vIE1pZ3JhdGlvbiBmb3Igb2xkIHNhdmUgZm9ybWF0XG4gICAgICAgICAgICAgICAgaWYgKChjIGFzIGFueSkudmlsbGFnZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5jLCB2aWxsYWdlcklkczogWyhjIGFzIGFueSkudmlsbGFnZXJJZF0sIHZpbGxhZ2VySWQ6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2V0Q3VycmVudEV2ZW50KG51bGwpO1xuICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoJ1dlbGNvbWUgYmFjayB0byB5b3VyIHNhZ2EuJyk7XG4gICAgICAgICAgICBzZXRHYW1lU3RhdGUoR2FtZVN0YXR1cy5QTEFZSU5HKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihgQ291bGQgbm90IGZpbmQgYSBzYXZlZCBnYW1lIG5hbWVkIFwiJHtzYXZlTmFtZX1cIi5gKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVUYXNrQ29tcGxldGlvbiA9IHVzZUNhbGxiYWNrKCh0YXNrOiBHYW1lVGFzaykgPT4ge1xuICAgICAgICBzd2l0Y2ggKHRhc2sudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnYnVpbGQnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBidWlsZGluZ1R5cGUsIHZpbGxhZ2VySWRzLCBwb3NpdGlvbiB9ID0gdGFzay5wYXlsb2FkITtcbiAgICAgICAgICAgICAgICBjb25zdCBidWlsZGluZ0luZm8gPSBCVUlMRElOR1NfSU5GTy5maW5kKGIgPT4gYi5pZCA9PT0gYnVpbGRpbmdUeXBlKSE7XG4gICAgICAgICAgICAgICAgY29uc3QgW25hbWVdID0gZ2V0UmFuZG9tTmFtZXMoJ2J1aWxkaW5nJywgMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3QnVpbGRpbmc6IEJ1aWxkaW5nSW5zdGFuY2UgPSB7IGlkOiB0YXNrLmlkLCBuYW1lLCBwb3NpdGlvbjogcG9zaXRpb24hIH07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc2V0Q29uc3RydWN0aW5nQnVpbGRpbmdzKHByZXYgPT4gcHJldi5maWx0ZXIoYiA9PiBiLmlkICE9PSB0YXNrLmlkKSk7XG4gICAgICAgICAgICAgICAgc2V0QnVpbGRpbmdzKHAgPT4gKHsgLi4ucCwgW2J1aWxkaW5nVHlwZSFdOiBbLi4ucFtidWlsZGluZ1R5cGUhXSwgbmV3QnVpbGRpbmddIH0pKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodmlsbGFnZXJJZHMgJiYgdmlsbGFnZXJJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRUb0xvZyhgJHt2aWxsYWdlcklkcy5sZW5ndGh9IGJ1aWxkZXIocykgaGF2ZSBjb25zdHJ1Y3RlZCAke25hbWV9LCBhIG5ldyAke2J1aWxkaW5nSW5mby5uYW1lfS5gLCBidWlsZGluZ1R5cGUhKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYENvbnN0cnVjdGlvbiBvZiAke25hbWV9IGlzIGNvbXBsZXRlLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2dhdGhlcic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHJlc291cmNlTm9kZUlkIH0gPSB0YXNrLnBheWxvYWQhO1xuXG4gICAgICAgICAgICAgICAgc2V0UmVzb3VyY2VOb2RlcyhwcmV2Tm9kZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gcHJldk5vZGVzLmZpbmQobiA9PiBuLmlkID09PSByZXNvdXJjZU5vZGVJZCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgR2F0aGVyIHRhc2sgY29tcGxldGVkIGZvciBhIG5vbi1leGlzdGVudCBvciBhbHJlYWR5IHByb2Nlc3NlZCBub2RlOiAke3Jlc291cmNlTm9kZUlkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZOb2RlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFtb3VudFRvQWRkID0gTWF0aC5mbG9vcihub2RlLmFtb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoYW1vdW50VG9BZGQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMoeyBbbm9kZS50eXBlXTogYW1vdW50VG9BZGQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRUb0xvZyhgJHtub2RlLmFzc2lnbmVkVmlsbGFnZXJzLmxlbmd0aH0gdmlsbGFnZXIocykgZGVwbGV0ZWQgYSAke25vZGUudHlwZX0gc291cmNlLCBnYWluaW5nICR7YW1vdW50VG9BZGR9ICR7bm9kZS50eXBlfS5gLCBub2RlLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYEEgJHtub2RlLnR5cGV9IHNvdXJjZSBoYXMgYmVlbiBmdWxseSBkZXBsZXRlZC5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZOb2Rlcy5maWx0ZXIobiA9PiBuLmlkICE9PSByZXNvdXJjZU5vZGVJZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICd0cmFpbl92aWxsYWdlcic6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvdW50IH0gPSB0YXNrLnBheWxvYWQhO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZpbGxhZ2VyTmFtZXMgPSBnZXRSYW5kb21OYW1lcygndmlsbGFnZXInLCBjb3VudCEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZpbGxhZ2VyczogVmlsbGFnZXJbXSA9IG5ld1ZpbGxhZ2VyTmFtZXMubWFwKG5hbWUgPT4gKHsgaWQ6IGAke0RhdGUubm93KCl9LSR7bmFtZX1gLCBuYW1lIH0pKTtcbiAgICAgICAgICAgICAgICBzZXRVbml0cyhwID0+ICh7IC4uLnAsIHZpbGxhZ2VyczogWy4uLnAudmlsbGFnZXJzLCAuLi5uZXdWaWxsYWdlcnNdIH0pKTtcbiAgICAgICAgICAgICAgICBhZGRUb0xvZyhgJHtjb3VudH0gbmV3IHZpbGxhZ2VyKHMpIGhhdmUgam9pbmVkIHlvdXIgc2V0dGxlbWVudC5gLCAndmlsbGFnZXInKTtcbiAgICAgICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgJHtjb3VudH0gbmV3IHZpbGxhZ2VyKHMpIGFyZSByZWFkeSB0byB3b3JrLmApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAndHJhaW5fbWlsaXRhcnknOiB7XG4gICAgICAgICAgICAgICAgIGNvbnN0IHsgdW5pdFR5cGUsIGNvdW50IH0gPSB0YXNrLnBheWxvYWQhO1xuICAgICAgICAgICAgICAgICBjb25zdCB1bml0SW5mbyA9IFVOSVRfSU5GTy5maW5kKHUgPT4gdS5pZCA9PT0gdW5pdFR5cGUpITtcbiAgICAgICAgICAgICAgICAgY29uc3QgbmV3VW5pdE5hbWVzID0gZ2V0UmFuZG9tTmFtZXMoJ3NvbGRpZXInLCBjb3VudCEpO1xuICAgICAgICAgICAgICAgICBjb25zdCBuZXdVbml0czogTWlsaXRhcnlVbml0W10gPSBuZXdVbml0TmFtZXMubWFwKG5hbWUgPT4gKHsgaWQ6IGAke0RhdGUubm93KCl9LSR7dW5pdFR5cGV9LSR7bmFtZX1gLCBuYW1lLCB0aXRsZTogJycsIHVuaXRUeXBlOiB1bml0VHlwZSEgfSkpO1xuICAgICAgICAgICAgICAgICBzZXRVbml0cyhwID0+ICh7IC4uLnAsIG1pbGl0YXJ5OiBbLi4ucC5taWxpdGFyeSwgLi4ubmV3VW5pdHNdIH0pKTtcbiAgICAgICAgICAgICAgICAgYWRkVG9Mb2coYCR7Y291bnR9ICR7dW5pdEluZm8ubmFtZX0ocykgaGF2ZSBiZWVuIHRyYWluZWQuYCwgdW5pdFR5cGUhKTtcbiAgICAgICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYCR7Y291bnR9IG5ldyAke3VuaXRJbmZvLm5hbWV9KHMpIGFyZSByZWFkeSBmb3IgYmF0dGxlLmApO1xuICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2FkdmFuY2VfYWdlJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFnZVJlc3VsdCA9IGdldFByZWRlZmluZWRBZ2UoY3VycmVudEFnZSk7XG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEFnZShhZ2VSZXN1bHQubmV4dEFnZU5hbWUpO1xuICAgICAgICAgICAgICAgIGFkZFRvTG9nKGBZb3UgaGF2ZSBhZHZhbmNlZCB0byB0aGUgJHthZ2VSZXN1bHQubmV4dEFnZU5hbWV9IWAsICdhZ2UnKTtcbiAgICAgICAgICAgICAgICBhZGRUb0xvZyhhZ2VSZXN1bHQuZGVzY3JpcHRpb24sICdhZ2UnKTtcbiAgICAgICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgV2VsY29tZSB0byB0aGUgJHthZ2VSZXN1bHQubmV4dEFnZU5hbWV9IWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2N1cnJlbnRBZ2UsIHVwZGF0ZVJlc291cmNlc10pO1xuXG4gICAgLy8gR2FtZSBMb29wXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgZ2FtZUxvb3AgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgY29uc3QgY29tcGxldGVkVGFza3M6IEdhbWVUYXNrW10gPSBbXTtcbiAgICAgICAgICAgIHNldEFjdGl2ZVRhc2tzKGN1cnJlbnRUYXNrcyA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRUYXNrcy5maWx0ZXIodGFzayA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrLnR5cGUgIT09ICdnYXRoZXInICYmIG5vdyA+PSB0YXNrLnN0YXJ0VGltZSArIHRhc2suZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZFRhc2tzLnB1c2godGFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZFRhc2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWRUYXNrcy5mb3JFYWNoKGhhbmRsZVRhc2tDb21wbGV0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwMCk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoZ2FtZUxvb3ApO1xuICAgIH0sIFtoYW5kbGVUYXNrQ29tcGxldGlvbl0pO1xuXG5cbiAgICAvLyBFdmVudCBUcmlnZ2VyIFRpbWVyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgLy8gRXZlbnRzIHNob3VsZCBub3QgdHJpZ2dlciBpZiBhIG1ham9yIHRhc2sgKGJ1aWxkLCB0cmFpbiwgYWR2YW5jZSBhZ2UpIGlzIGluIHByb2dyZXNzLlxuICAgICAgICAvLyBHYXRoZXJpbmcgcmVzb3VyY2VzIGlzIGEgYmFja2dyb3VuZCB0YXNrIGFuZCBzaG91bGQgbm90IGJsb2NrIGV2ZW50cy5cbiAgICAgICAgY29uc3QgbWFqb3JUYXNrSW5Qcm9ncmVzcyA9IGFjdGl2ZVRhc2tzLnNvbWUodCA9PiB0LnR5cGUgIT09ICdnYXRoZXInKTtcblxuICAgICAgICBpZiAoZ2FtZVN0YXRlID09PSBHYW1lU3RhdHVzLlBMQVlJTkcgJiYgIWN1cnJlbnRFdmVudCAmJiAhcGxheWVyQWN0aW9uICYmICFtYWpvclRhc2tJblByb2dyZXNzKSB7XG4gICAgICAgICAgICBzY2hlZHVsZU5leHRFdmVudCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50VGltZXJSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGV2ZW50VGltZXJSZWYuY3VycmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50VGltZXJSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChldmVudFRpbWVyUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sIFtnYW1lU3RhdGUsIGN1cnJlbnRFdmVudCwgcGxheWVyQWN0aW9uLCBhY3RpdmVUYXNrcywgc2NoZWR1bGVOZXh0RXZlbnRdKTtcblxuICAgIGNvbnN0IGhhbmRsZUV2ZW50Q2hvaWNlID0gKGNob2ljZTogR2FtZUV2ZW50Q2hvaWNlKSA9PiB7XG4gICAgICAgIGFkZFRvTG9nKGBEZWNpc2lvbjogXCIke2Nob2ljZS50ZXh0fVwiYCwgJ2V2ZW50Jyk7XG5cbiAgICAgICAgLy8gMS4gQ2hlY2sgYW5kIGFwcGx5IGNvc3RcbiAgICAgICAgaWYgKGNob2ljZS5jb3N0KSB7XG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nUmVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY2hvaWNlLmNvc3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNLZXkgPSBrZXkgYXMga2V5b2YgUmVzb3VyY2VzO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbcmVzS2V5XSA8IChjaG9pY2UuY29zdFtyZXNLZXldIHx8IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdSZXMucHVzaChyZXNLZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtaXNzaW5nUmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBhZGROb3RpZmljYXRpb24oYFlvdSBsYWNrIHRoZSByZXF1aXJlZCByZXNvdXJjZXM6ICR7bWlzc2luZ1Jlcy5qb2luKCcsICcpfS5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZWdhdGl2ZUNvc3Q6IFJlc291cmNlRGVsdGFzID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjaG9pY2UuY29zdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc0tleSA9IGtleSBhcyBrZXlvZiBSZXNvdXJjZXM7XG4gICAgICAgICAgICAgICAgbmVnYXRpdmVDb3N0W3Jlc0tleV0gPSAtKGNob2ljZS5jb3N0W3Jlc0tleV0gfHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMobmVnYXRpdmVDb3N0KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gMi4gRGV0ZXJtaW5lIHN1Y2Nlc3NcbiAgICAgICAgY29uc3QgaXNTdWNjZXNzID0gY2hvaWNlLnN1Y2Nlc3NDaGFuY2UgPT09IHVuZGVmaW5lZCB8fCBNYXRoLnJhbmRvbSgpIDwgY2hvaWNlLnN1Y2Nlc3NDaGFuY2U7XG4gICAgICAgIGNvbnN0IGVmZmVjdHMgPSBpc1N1Y2Nlc3MgPyBjaG9pY2Uuc3VjY2Vzc0VmZmVjdHMgOiBjaG9pY2UuZmFpbHVyZUVmZmVjdHM7XG5cbiAgICAgICAgaWYgKCFlZmZlY3RzKSB7IC8vIEhhbmRsZSBjYXNlcyB3aXRoIG5vIGZhaWx1cmUgZWZmZWN0IGRlZmluZWRcbiAgICAgICAgICAgIHNldEN1cnJlbnRFdmVudChudWxsKTtcbiAgICAgICAgICAgIHNjaGVkdWxlTmV4dEV2ZW50KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzLiBDYWxjdWxhdGUgcmVzb3VyY2UgY2hhbmdlXG4gICAgICAgIGxldCBhbW91bnQgPSAwO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlZmZlY3RzLmFtb3VudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IFttaW4sIG1heF0gPSBlZmZlY3RzLmFtb3VudDtcbiAgICAgICAgICAgIGFtb3VudCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbW91bnQgPSBlZmZlY3RzLmFtb3VudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gNC4gQXBwbHkgZWZmZWN0c1xuICAgICAgICBpZiAoZWZmZWN0cy5yZXNvdXJjZSAhPT0gJ25vbmUnICYmIGFtb3VudCAhPT0gMCkge1xuICAgICAgICAgICAgdXBkYXRlUmVzb3VyY2VzKHsgW2VmZmVjdHMucmVzb3VyY2VdOiBhbW91bnQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIDUuIExvZyBhbmQgdXBkYXRlIFVJXG4gICAgICAgIGFkZFRvTG9nKGVmZmVjdHMubG9nLCBlZmZlY3RzLnJlc291cmNlICE9PSAnbm9uZScgPyBlZmZlY3RzLnJlc291cmNlIDogJ3N5c3RlbScpO1xuICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhlZmZlY3RzLmxvZyk7XG4gICAgICAgIHNldEN1cnJlbnRFdmVudChudWxsKTtcbiAgICAgICAgc2NoZWR1bGVOZXh0RXZlbnQoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlSW5pdGlhdGVCdWlsZCA9ICh2aWxsYWdlcklkOiBzdHJpbmcsIHJlY3Q6IERPTVJlY3QpID0+IHtcbiAgICAgICAgaWYgKGlzVmlsbGFnZXJCdXN5KHZpbGxhZ2VySWQpKSB7XG4gICAgICAgICAgICBhZGROb3RpZmljYXRpb24oXCJUaGlzIHZpbGxhZ2VyIGlzIGFscmVhZHkgYnVzeS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0QnVpbGRQYW5lbFN0YXRlKHsgaXNPcGVuOiB0cnVlLCB2aWxsYWdlcklkLCBhbmNob3JSZWN0OiByZWN0IH0pO1xuICAgICAgICBzZXRVbml0TWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IGhhbmRsZVN0YXJ0UGxhY2VtZW50ID0gKGJ1aWxkaW5nSWQ6IEJ1aWxkaW5nVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCB2aWxsYWdlcklkID0gYnVpbGRQYW5lbFN0YXRlLnZpbGxhZ2VySWQ7XG4gICAgICAgIGlmICghdmlsbGFnZXJJZCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGJ1aWxkaW5nSW5mbyA9IEJVSUxESU5HU19JTkZPLmZpbmQoYiA9PiBiLmlkID09PSBidWlsZGluZ0lkKTtcbiAgICAgICAgaWYgKCFidWlsZGluZ0luZm8pIHJldHVybjtcblxuICAgICAgICBpZiAoYnVpbGRpbmdJbmZvLmlzVW5pcXVlICYmIChidWlsZGluZ3NbYnVpbGRpbmdJbmZvLmlkXS5sZW5ndGggPiAwIHx8IGNvbnN0cnVjdGluZ0J1aWxkaW5ncy5zb21lKGIgPT4gYi50eXBlID09PSBidWlsZGluZ0luZm8uaWQpKSkge1xuICAgICAgICAgICAgYWRkTm90aWZpY2F0aW9uKGBZb3UgY2FuIG9ubHkgYnVpbGQgb25lICR7YnVpbGRpbmdJbmZvLm5hbWV9LmApOyByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvc3QgPSBidWlsZGluZ0luZm8uY29zdDtcbiAgICAgICAgaWYgKCF1bmxpbWl0ZWRSZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3Npbmc6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlcyBpbiBjb3N0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VLZXkgPSByZXMgYXMga2V5b2YgUmVzb3VyY2VzO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VLZXldIDwgKGNvc3RbcmVzb3VyY2VLZXldID8/IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICBtaXNzaW5nLnB1c2goYCR7KGNvc3RbcmVzb3VyY2VLZXldID8/IDApIC0gcmVzb3VyY2VzW3Jlc291cmNlS2V5XX0gJHtyZXNvdXJjZUtleX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihgTmVlZCAke21pc3Npbmcuam9pbignIGFuZCAnKX0uYCk7IHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXRQbGF5ZXJBY3Rpb24oeyBtb2RlOiAnYnVpbGQnLCBidWlsZGluZ1R5cGU6IGJ1aWxkaW5nSWQsIHZpbGxhZ2VySWQgfSk7XG4gICAgICAgIHNldEJ1aWxkUGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHZpbGxhZ2VySWQ6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGBTZWxlY3QgYSBsb2NhdGlvbiB0byBidWlsZCBhICR7YnVpbGRpbmdJbmZvLm5hbWV9LiBSaWdodC1jbGljayB0byBjYW5jZWwuYCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUNvbmZpcm1QbGFjZW1lbnQgPSAocG9zaXRpb246IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSkgPT4ge1xuICAgICAgICBpZiAocGxheWVyQWN0aW9uPy5tb2RlICE9PSAnYnVpbGQnKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgYnVpbGRpbmdUeXBlLCB2aWxsYWdlcklkIH0gPSBwbGF5ZXJBY3Rpb247XG4gICAgICAgIGNvbnN0IGJ1aWxkaW5nSW5mbyA9IEJVSUxESU5HU19JTkZPLmZpbmQoYiA9PiBiLmlkID09PSBidWlsZGluZ1R5cGUpO1xuICAgICAgICBjb25zdCBidWlsZGVyID0gdW5pdHMudmlsbGFnZXJzLmZpbmQodiA9PiB2LmlkID09PSB2aWxsYWdlcklkKTtcbiAgICAgICAgaWYgKCFidWlsZGluZ0luZm8gfHwgIWJ1aWxkZXIpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGlmICghdW5saW1pdGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBjb3N0ID0gYnVpbGRpbmdJbmZvLmNvc3Q7XG4gICAgICAgICAgICBjb25zdCBuZWdhdGl2ZUNvc3Q6IFJlc291cmNlRGVsdGFzID0ge307XG4gICAgICAgICAgICBmb3IoY29uc3QgcmVzb3VyY2UgaW4gY29zdCkge1xuICAgICAgICAgICAgICAgIG5lZ2F0aXZlQ29zdFtyZXNvdXJjZSBhcyBrZXlvZiBSZXNvdXJjZXNdID0gLShjb3N0W3Jlc291cmNlIGFzIGtleW9mIFJlc291cmNlc10gfHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMobmVnYXRpdmVDb3N0KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgYnVpbGRUaW1lID0gYnVpbGRpbmdJbmZvLmJ1aWxkVGltZSAqIDEwMDA7XG4gICAgICAgIGNvbnN0IHRhc2tQYXlsb2FkID0geyBidWlsZGluZ1R5cGUsIHZpbGxhZ2VySWRzOiBbdmlsbGFnZXJJZF0sIHBvc2l0aW9uIH07XG5cbiAgICAgICAgaWYgKHVubGltaXRlZFJlc291cmNlcykge1xuICAgICAgICAgICAgIGNvbnN0IHRhc2tJZCA9IGAke0RhdGUubm93KCl9LWluc3RhbnQtYnVpbGRgO1xuICAgICAgICAgICAgIGhhbmRsZVRhc2tDb21wbGV0aW9uKHsgaWQ6IHRhc2tJZCwgdHlwZTogJ2J1aWxkJywgc3RhcnRUaW1lOiAwLCBkdXJhdGlvbjogMCwgcGF5bG9hZDogeyAuLi50YXNrUGF5bG9hZCwgcG9zaXRpb24gfSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJZCA9IGAke0RhdGUubm93KCl9LWJ1aWxkLSR7YnVpbGRpbmdUeXBlfWA7XG4gICAgICAgICAgICBjb25zdCBuZXdDb25zdHJ1Y3Rpb246IENvbnN0cnVjdGluZ0J1aWxkaW5nID0geyBpZDogdGFza0lkLCB0eXBlOiBidWlsZGluZ1R5cGUsIHBvc2l0aW9uLCB2aWxsYWdlcklkczogW3ZpbGxhZ2VySWRdIH07XG4gICAgICAgICAgICBzZXRDb25zdHJ1Y3RpbmdCdWlsZGluZ3MocHJldiA9PiBbLi4ucHJldiwgbmV3Q29uc3RydWN0aW9uXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2s6IEdhbWVUYXNrID0ge1xuICAgICAgICAgICAgICAgIGlkOiB0YXNrSWQsIHR5cGU6ICdidWlsZCcsIHN0YXJ0VGltZTogRGF0ZS5ub3coKSwgZHVyYXRpb246IGJ1aWxkVGltZSwgcGF5bG9hZDogdGFza1BheWxvYWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IFsuLi5wcmV2LCBuZXdUYXNrXSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgJHtidWlsZGVyLm5hbWV9IGhhcyBzdGFydGVkIGNvbnN0cnVjdGluZyBhICR7YnVpbGRpbmdJbmZvLm5hbWV9LmApO1xuICAgICAgICAgICAgYWRkVG9Mb2coYCR7YnVpbGRlci5uYW1lfSBiZWdhbiBjb25zdHJ1Y3Rpb24gb2YgYSBuZXcgJHtidWlsZGluZ0luZm8ubmFtZX0uYCwgYnVpbGRpbmdUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0UGxheWVyQWN0aW9uKG51bGwpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVDYW5jZWxQbGF5ZXJBY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgIHNldFBsYXllckFjdGlvbihudWxsKTtcbiAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoJ0NvbW1hbmQgY2FuY2VsbGVkLicpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVEZW1vbGlzaEJ1aWxkaW5nID0gKHR5cGU6IEJ1aWxkaW5nVHlwZSwgaWQ6IHN0cmluZykgPT4ge1xuICAgICAgICBpZihhY3RpdmVUYXNrcy5zb21lKHQgPT4gdC5wYXlsb2FkPy5idWlsZGluZ0lkID09PSBpZCkpIHtcbiAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCBkZW1vbGlzaCBhIGJ1aWxkaW5nIHdpdGggYW4gYWN0aXZlIHRhc2suXCIpOyByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVpbGRpbmdJbmZvID0gQlVJTERJTkdTX0lORk8uZmluZChiID0+IGIuaWQgPT09IHR5cGUpO1xuICAgICAgICBjb25zdCBidWlsZGluZ0luc3RhbmNlID0gYnVpbGRpbmdzW3R5cGVdLmZpbmQoYiA9PiBiLmlkID09PSBpZCk7XG4gICAgICAgIGlmICghYnVpbGRpbmdJbmZvIHx8ICFidWlsZGluZ0luc3RhbmNlKSByZXR1cm47XG4gICAgICAgIGlmICh0eXBlID09PSAnaG91c2VzJyAmJiBwb3B1bGF0aW9uLmN1cnJlbnQgPiAoYnVpbGRpbmdzLnRvd25DZW50ZXI/Lmxlbmd0aCA+IDAgPyAyMCA6IDApICsgKGJ1aWxkaW5ncy5ob3VzZXMubGVuZ3RoIC0gMSkgKiA1KSB7XG4gICAgICAgICAgICAgYWRkTm90aWZpY2F0aW9uKFwiQ2Fubm90IGRlbW9saXNoIHRoaXMgaG91c2UsIHlvdXIgcGVvcGxlIHdvdWxkIGJlIGhvbWVsZXNzLlwiKTsgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlZnVuZDogUmVzb3VyY2VEZWx0YXMgPSB7fTtcbiAgICAgICAgbGV0IHJlZnVuZE1lc3NhZ2VQYXJ0czogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCByZXMgaW4gYnVpbGRpbmdJbmZvLmNvc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlS2V5ID0gcmVzIGFzIGtleW9mIFJlc291cmNlcztcbiAgICAgICAgICAgIGNvbnN0IGNvc3QgPSBidWlsZGluZ0luZm8uY29zdFtyZXNvdXJjZUtleV0gfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IE1hdGguZmxvb3IoY29zdCAqIDAuNSk7XG4gICAgICAgICAgICBpZiAoYW1vdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIHJlZnVuZFtyZXNvdXJjZUtleV0gPSBhbW91bnQ7XG4gICAgICAgICAgICAgICAgcmVmdW5kTWVzc2FnZVBhcnRzLnB1c2goYCR7YW1vdW50fSAke3Jlc291cmNlS2V5fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVJlc291cmNlcyhyZWZ1bmQpO1xuICAgICAgICBzZXRCdWlsZGluZ3MocHJldiA9PiAoeyAuLi5wcmV2LCBbdHlwZV06IHByZXZbdHlwZV0uZmlsdGVyKGIgPT4gYi5pZCAhPT0gaWQpIH0pKTtcbiAgICAgICAgYWRkVG9Mb2coYCR7YnVpbGRpbmdJbnN0YW5jZS5uYW1lfSAoJHtidWlsZGluZ0luZm8ubmFtZX0pIHdhcyBkZW1vbGlzaGVkLmAsIHR5cGUpO1xuICAgICAgICBpZiAocmVmdW5kTWVzc2FnZVBhcnRzLmxlbmd0aCA+IDApIHsgYWRkTm90aWZpY2F0aW9uKGBTYWx2YWdlZCAke3JlZnVuZE1lc3NhZ2VQYXJ0cy5qb2luKCcsICcpfS5gKTsgfVxuICAgICAgICBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7aXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlVXBkYXRlQnVpbGRpbmcgPSAodHlwZTogQnVpbGRpbmdUeXBlLCBpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgc2V0QnVpbGRpbmdzKHByZXYgPT4gKHsgLi4ucHJldiwgW3R5cGVdOiBwcmV2W3R5cGVdLm1hcChiID0+IGIuaWQgPT09IGlkID8geyAuLi5iLCBuYW1lIH0gOiBiKSB9KSk7XG4gICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIkJ1aWxkaW5nIHJlbmFtZWQuXCIpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVUcmFpblZpbGxhZ2VycyA9IChjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChhY3RpdmVUYXNrcy5zb21lKHQgPT4gdC50eXBlID09PSAndHJhaW5fdmlsbGFnZXInKSB8fCBjb3VudCA8PSAwKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHZpbGxhZ2VyQ29zdCA9IDUwO1xuICAgICAgICBjb25zdCB0b3RhbENvc3QgPSB2aWxsYWdlckNvc3QgKiBjb3VudDtcbiAgICAgICAgaWYgKHBvcHVsYXRpb24uY3VycmVudCArIGNvdW50ID4gcG9wdWxhdGlvbi5jYXBhY2l0eSkgeyBhZGROb3RpZmljYXRpb24oYE5lZWQgc3BhY2UgZm9yICR7Y291bnR9IG1vcmUgdmlsbGFnZXJzLmApOyByZXR1cm47IH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRvd25DZW50ZXIgPSBidWlsZGluZ3MudG93bkNlbnRlcj8uWzBdO1xuICAgICAgICBpZiAoIXRvd25DZW50ZXIpIHsgYWRkTm90aWZpY2F0aW9uKGBObyBUb3duIENlbnRlciB0byB0cmFpbiB2aWxsYWdlcnMuYCk7IHJldHVybjsgfVxuXG4gICAgICAgIGlmICghdW5saW1pdGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBpZiAocmVzb3VyY2VzLmZvb2QgPCB0b3RhbENvc3QpIHsgYWRkTm90aWZpY2F0aW9uKGBOZWVkICR7dG90YWxDb3N0IC0gcmVzb3VyY2VzLmZvb2R9IG1vcmUgRm9vZC5gKTsgcmV0dXJuOyB9XG4gICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMoeyBmb29kOiAtdG90YWxDb3N0IH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYWluVGltZSA9IDEwMDAwICogY291bnQ7IC8vIDEwcyBwZXIgdmlsbGFnZXJcbiAgICAgICAgaWYodW5saW1pdGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBoYW5kbGVUYXNrQ29tcGxldGlvbih7IGlkOiAnaW5zdGFudCcsIHR5cGU6ICd0cmFpbl92aWxsYWdlcicsIHN0YXJ0VGltZTogMCwgZHVyYXRpb246IDAsIHBheWxvYWQ6IHsgY291bnQgfSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJZCA9IGAke0RhdGUubm93KCl9LXRyYWluLXZpbGxhZ2VyYDtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2s6IEdhbWVUYXNrID0geyBpZDogdGFza0lkLCB0eXBlOiAndHJhaW5fdmlsbGFnZXInLCBzdGFydFRpbWU6IERhdGUubm93KCksIGR1cmF0aW9uOiB0cmFpblRpbWUsIHBheWxvYWQ6IHsgY291bnQsIGJ1aWxkaW5nSWQ6IHRvd25DZW50ZXIuaWQgfSB9O1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocHJldiA9PiBbLi4ucHJldiwgbmV3VGFza10pO1xuICAgICAgICAgICAgc2V0QWN0aXZpdHlTdGF0dXMoYFRyYWluaW5nICR7Y291bnR9IHZpbGxhZ2VyKHMpLi4uYCk7XG4gICAgICAgICAgICBhZGRUb0xvZyhgQmVnYW4gdHJhaW5pbmcgJHtjb3VudH0gbmV3IHZpbGxhZ2VyKHMpLmAsICd2aWxsYWdlcicpO1xuICAgICAgICB9XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KTtcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IGhhbmRsZVRyYWluVW5pdHMgPSAodW5pdFR5cGU6IE1pbGl0YXJ5VW5pdFR5cGUsIGNvdW50OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgdW5pdEluZm8gPSBVTklUX0lORk8uZmluZCh1ID0+IHUuaWQgPT09IHVuaXRUeXBlKTtcbiAgICAgICAgaWYgKCF1bml0SW5mbyB8fCBhY3RpdmVUYXNrcy5zb21lKHQgPT4gdC5wYXlsb2FkPy51bml0VHlwZSA9PT0gdW5pdFR5cGUpIHx8IGNvdW50IDw9IDApIHJldHVybjtcbiAgICAgICAgaWYgKHBvcHVsYXRpb24uY3VycmVudCArIGNvdW50ID4gcG9wdWxhdGlvbi5jYXBhY2l0eSkgeyBhZGROb3RpZmljYXRpb24oYE5lZWQgc3BhY2UgZm9yICR7Y291bnR9IG1vcmUgdW5pdHMuYCk7IHJldHVybjsgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdHJhaW5pbmdCdWlsZGluZyA9IGJ1aWxkaW5nc1t1bml0SW5mby5yZXF1aXJlZEJ1aWxkaW5nXT8uWzBdO1xuICAgICAgICBpZiAoIXRyYWluaW5nQnVpbGRpbmcpIHsgYWRkTm90aWZpY2F0aW9uKGBObyAke3VuaXRJbmZvLnJlcXVpcmVkQnVpbGRpbmd9IHRvIHRyYWluIHVuaXRzLmApOyByZXR1cm47IH1cblxuICAgICAgICBpZiAoIXVubGltaXRlZFJlc291cmNlcykge1xuICAgICAgICAgICAgY29uc3QgdG90YWxDb3N0OiBSZXNvdXJjZURlbHRhcyA9IHt9OyBjb25zdCBtaXNzaW5nOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXMgaW4gdW5pdEluZm8uY29zdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc291cmNlS2V5ID0gcmVzIGFzIGtleW9mIFJlc291cmNlcztcbiAgICAgICAgICAgICAgICBjb25zdCBjb3N0ID0gKHVuaXRJbmZvLmNvc3RbcmVzb3VyY2VLZXldIHx8IDApICogY291bnQ7XG4gICAgICAgICAgICAgICAgdG90YWxDb3N0W3Jlc291cmNlS2V5XSA9IC1jb3N0O1xuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXNbcmVzb3VyY2VLZXldIDwgY29zdCkgbWlzc2luZy5wdXNoKGAke2Nvc3QgLSByZXNvdXJjZXNbcmVzb3VyY2VLZXldfSAke3Jlc291cmNlS2V5fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkgeyBhZGROb3RpZmljYXRpb24oYE5lZWQgJHttaXNzaW5nLmpvaW4oJyBhbmQgJyl9LmApOyByZXR1cm47IH1cbiAgICAgICAgICAgIHVwZGF0ZVJlc291cmNlcyh0b3RhbENvc3QpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYWluVGltZSA9IHVuaXRJbmZvLnRyYWluVGltZSAqIDEwMDAgKiBjb3VudDtcbiAgICAgICAgaWYodW5saW1pdGVkUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBoYW5kbGVUYXNrQ29tcGxldGlvbih7IGlkOiAnaW5zdGFudCcsIHR5cGU6ICd0cmFpbl9taWxpdGFyeScsIHN0YXJ0VGltZTogMCwgZHVyYXRpb246IDAsIHBheWxvYWQ6IHsgdW5pdFR5cGUsIGNvdW50IH0gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrSWQgPSBgJHtEYXRlLm5vdygpfS10cmFpbi0ke3VuaXRUeXBlfWA7XG4gICAgICAgICAgICBjb25zdCBuZXdUYXNrOiBHYW1lVGFzayA9IHsgaWQ6IHRhc2tJZCwgdHlwZTogJ3RyYWluX21pbGl0YXJ5Jywgc3RhcnRUaW1lOiBEYXRlLm5vdygpLCBkdXJhdGlvbjogdHJhaW5UaW1lLCBwYXlsb2FkOiB7IHVuaXRUeXBlLCBjb3VudCwgYnVpbGRpbmdJZDogdHJhaW5pbmdCdWlsZGluZy5pZCB9IH07XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IFsuLi5wcmV2LCBuZXdUYXNrXSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgVHJhaW5pbmcgJHtjb3VudH0gJHt1bml0SW5mby5uYW1lfShzKS4uLmApO1xuICAgICAgICAgICAgYWRkVG9Mb2coYEJlZ2FuIHRyYWluaW5nICR7Y291bnR9IG5ldyAke3VuaXRJbmZvLm5hbWV9KHMpLmAsIHVuaXRUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZURpc21pc3NTcGVjaWZpY1VuaXQgPSAodHlwZTogJ3ZpbGxhZ2VycycgfCAnbWlsaXRhcnknLCBpZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICh0eXBlID09PSAndmlsbGFnZXJzJyAmJiBpc1ZpbGxhZ2VyQnVzeShpZCkpIHtcbiAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCBkaXNtaXNzIGEgYnVzeSB2aWxsYWdlci5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdW5pdCA9IHVuaXRzW3R5cGVdLmZpbmQodSA9PiB1LmlkID09PSBpZCk7XG4gICAgICAgIGlmICghdW5pdCkgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3ZpbGxhZ2VycycgJiYgdW5pdHMudmlsbGFnZXJzLmxlbmd0aCA8PSAxKSB7IGFkZE5vdGlmaWNhdGlvbihcIkNhbm5vdCBkaXNtaXNzIHlvdXIgbGFzdCB2aWxsYWdlci5cIik7IHJldHVybjsgfVxuICAgICAgICBzZXRVbml0cyhwcmV2ID0+ICh7IC4uLnByZXYsIFt0eXBlXTogcHJldlt0eXBlXS5maWx0ZXIodSA9PiB1LmlkICE9PSBpZCkgfSkpO1xuICAgICAgICBjb25zdCB1bml0VHlwZU5hbWUgPSB0eXBlID09PSAndmlsbGFnZXJzJyA/ICd2aWxsYWdlcicgOiAodW5pdCBhcyBNaWxpdGFyeVVuaXQpLnVuaXRUeXBlO1xuICAgICAgICBhZGRUb0xvZyhgJHt1bml0Lm5hbWV9IHRoZSAke3VuaXRUeXBlTmFtZX0gaGFzIGJlZW4gZGlzbWlzc2VkLmAsIHR5cGUgPT09ICd2aWxsYWdlcnMnID8gJ3ZpbGxhZ2VyJyA6ICh1bml0IGFzIE1pbGl0YXJ5VW5pdCkudW5pdFR5cGUpO1xuICAgICAgICBhZGROb3RpZmljYXRpb24oYCR7dW5pdC5uYW1lfSB3YXMgZGlzbWlzc2VkLmApO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVVcGRhdGVVbml0ID0gKHR5cGU6ICd2aWxsYWdlcnMnIHwgJ21pbGl0YXJ5JywgaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZykgPT4ge1xuICAgICAgICAgc2V0VW5pdHMocHJldiA9PiAoeyAuLi5wcmV2LCBbdHlwZV06IHByZXZbdHlwZV0ubWFwKHUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1LmlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkVW5pdCA9IHsgLi4udSwgbmFtZSB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ21pbGl0YXJ5JyAmJiB0aXRsZSAhPT0gdW5kZWZpbmVkKSB7ICh1cGRhdGVkVW5pdCBhcyBNaWxpdGFyeVVuaXQpLnRpdGxlID0gdGl0bGU7IH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRVbml0O1xuICAgICAgICAgICAgICAgIH0gcmV0dXJuIHU7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KSk7XG4gICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIlVuaXQgdXBkYXRlZC5cIik7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUFzc2lnblZpbGxhZ2Vyc1RvTm9kZSA9IChub2RlSWQ6IHN0cmluZywgY291bnQ6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBpZGxlVmlsbGFnZXJzID0gdW5pdHMudmlsbGFnZXJzLmZpbHRlcih2ID0+ICFpc1ZpbGxhZ2VyQnVzeSh2LmlkKSk7XG4gICAgICAgIGlmIChjb3VudCA8PSAwKSByZXR1cm47XG4gICAgICAgIGxldCBjYXBwZWRDb3VudCA9IE1hdGgubWluKGNvdW50LCBpZGxlVmlsbGFnZXJzLmxlbmd0aCk7XG4gICAgICAgIGlmIChjYXBwZWRDb3VudCA9PT0gMCkgeyBhZGROb3RpZmljYXRpb24oXCJObyBpZGxlIHZpbGxhZ2VycyBhdmFpbGFibGUuXCIpOyByZXR1cm47IH1cbiAgICBcbiAgICAgICAgY29uc3QgdmlsbGFnZXJzVG9Bc3NpZ24gPSBpZGxlVmlsbGFnZXJzLnNsaWNlKDAsIGNhcHBlZENvdW50KTtcbiAgICAgICAgY29uc3QgdmlsbGFnZXJJZHNUb0Fzc2lnbiA9IHZpbGxhZ2Vyc1RvQXNzaWduLm1hcCh2ID0+IHYuaWQpO1xuICAgIFxuICAgICAgICBjb25zdCB0YXJnZXROb2RlID0gcmVzb3VyY2VOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gbm9kZUlkKTtcbiAgICAgICAgaWYgKCF0YXJnZXROb2RlKSByZXR1cm47XG4gICAgXG4gICAgICAgIHNldFJlc291cmNlTm9kZXMocHJldk5vZGVzID0+IFxuICAgICAgICAgICAgcHJldk5vZGVzLm1hcChuID0+IG4uaWQgPT09IG5vZGVJZCA/IHsuLi5uLCBhc3NpZ25lZFZpbGxhZ2VyczogWy4uLm5ldyBTZXQoWy4uLm4uYXNzaWduZWRWaWxsYWdlcnMsIC4uLnZpbGxhZ2VySWRzVG9Bc3NpZ25dKV19IDogbilcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGdhdGhlclJhdGVQZXJWaWxsYWdlciA9IEdBVEhFUl9JTkZPW3RhcmdldE5vZGUudHlwZV0ucmF0ZTtcblxuICAgICAgICBpZiAodW5saW1pdGVkUmVzb3VyY2VzKSB7IC8vIEluc3RhbnQgZ2F0aGVyIGZvciB0ZXN0IG1vZGVcbiAgICAgICAgICAgIHVwZGF0ZVJlc291cmNlcyh7IFt0YXJnZXROb2RlLnR5cGVdOiB0YXJnZXROb2RlLmFtb3VudCB9KTtcbiAgICAgICAgICAgIGFkZFRvTG9nKGAke2NhcHBlZENvdW50fSB2aWxsYWdlcihzKSBpbnN0YW50bHkgZ2F0aGVyZWQgJHtNYXRoLmZsb29yKHRhcmdldE5vZGUuYW1vdW50KX0gJHt0YXJnZXROb2RlLnR5cGV9LmAsIHRhcmdldE5vZGUudHlwZSk7XG4gICAgICAgICAgICBzZXRSZXNvdXJjZU5vZGVzKHByZXYgPT4gcHJldi5maWx0ZXIobiA9PiBuLmlkICE9PSBub2RlSWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICBjb25zdCBhbW91bnRQZXJTZWNvbmQgPSBnYXRoZXJSYXRlUGVyVmlsbGFnZXIgLyAxMDtcbiAgICAgICAgICAgICBjb25zdCBnYXRoZXJJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbm9kZUlzRGVwbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZXRSZXNvdXJjZU5vZGVzKHByZXYgPT4gcHJldi5tYXAobiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuLmlkID09PSBub2RlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Ftb3VudCA9IG4uYW1vdW50IC0gYW1vdW50UGVyU2Vjb25kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0Ftb3VudCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUlzRGVwbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJlc291cmNlcyh7IFtuLnR5cGVdOiBuLmFtb3VudCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRUb0xvZyhgJHtuLmFzc2lnbmVkVmlsbGFnZXJzLmxlbmd0aH0gdmlsbGFnZXIocykgZGVwbGV0ZWQgYSAke24udHlwZX0gc291cmNlLmAsIG4udHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSZXNvdXJjZXMoeyBbbi50eXBlXTogYW1vdW50UGVyU2Vjb25kIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubiwgYW1vdW50OiBuZXdBbW91bnQgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbikgYXMgUmVzb3VyY2VOb2RlW10pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVJc0RlcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGdhdGhlckludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZVRhc2tzKHByZXYgPT4gcHJldi5maWx0ZXIodCA9PiB0LmlkICE9PSBgZ2F0aGVyLSR7bm9kZUlkfWApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbmV3VGFzazogR2FtZVRhc2sgPSB7IGlkOiBgZ2F0aGVyLSR7bm9kZUlkfWAsIHR5cGU6ICdnYXRoZXInLCBzdGFydFRpbWU6IERhdGUubm93KCksIGR1cmF0aW9uOiA5OTk5OTk5OSwgcGF5bG9hZDogeyByZXNvdXJjZU5vZGVJZDogbm9kZUlkLCB2aWxsYWdlcklkczogdmlsbGFnZXJzVG9Bc3NpZ24ubWFwKHY9PnYuaWQpIH19O1xuICAgICAgICAgICAgc2V0QWN0aXZlVGFza3MocHJldiA9PiBbLi4ucHJldi5maWx0ZXIodD0+IHQuaWQgIT09IGBnYXRoZXItJHtub2RlSWR9YCksIG5ld1Rhc2tdKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBhZGRUb0xvZyhgJHtjYXBwZWRDb3VudH0gdmlsbGFnZXIocykgYXNzaWduZWQgdG8gZ2F0aGVyICR7dGFyZ2V0Tm9kZS50eXBlfS5gLCB0YXJnZXROb2RlLnR5cGUpO1xuICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgJHtjYXBwZWRDb3VudH0gdmlsbGFnZXIocykgYXJlIG5vdyBnYXRoZXJpbmcgJHt0YXJnZXROb2RlLnR5cGV9LmApO1xuICAgICAgICBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIHRhcmdldElkOiBudWxsLCB0YXJnZXRUeXBlOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVBc3NpZ25WaWxsYWdlcnNUb0NvbnN0cnVjdGlvbiA9IChjb25zdHJ1Y3Rpb25JZDogc3RyaW5nLCBjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkbGVWaWxsYWdlcnMgPSB1bml0cy52aWxsYWdlcnMuZmlsdGVyKHYgPT4gIWlzVmlsbGFnZXJCdXN5KHYuaWQpKTtcbiAgICAgICAgaWYgKGNvdW50IDw9IDApIHJldHVybjtcbiAgICAgICAgbGV0IGNhcHBlZENvdW50ID0gTWF0aC5taW4oY291bnQsIGlkbGVWaWxsYWdlcnMubGVuZ3RoKTtcbiAgICAgICAgaWYgKGNhcHBlZENvdW50ID09PSAwKSB7IGFkZE5vdGlmaWNhdGlvbihcIk5vIGlkbGUgdmlsbGFnZXJzIGF2YWlsYWJsZSB0byBhc3Npc3QuXCIpOyByZXR1cm47IH1cblxuICAgICAgICBjb25zdCB2aWxsYWdlcnNUb0Fzc2lnbiA9IGlkbGVWaWxsYWdlcnMuc2xpY2UoMCwgY2FwcGVkQ291bnQpLm1hcCh2ID0+IHYuaWQpO1xuICAgICAgICBjb25zdCB0YXNrID0gYWN0aXZlVGFza3MuZmluZCh0ID0+IHQuaWQgPT09IGNvbnN0cnVjdGlvbklkKTtcbiAgICAgICAgY29uc3QgY29uc3RydWN0aW9uID0gY29uc3RydWN0aW5nQnVpbGRpbmdzLmZpbmQoYyA9PiBjLmlkID09PSBjb25zdHJ1Y3Rpb25JZCk7XG5cbiAgICAgICAgaWYgKCF0YXNrIHx8ICFjb25zdHJ1Y3Rpb24pIHJldHVybjtcblxuICAgICAgICBjb25zdCBidWlsZGluZ0luZm8gPSBCVUlMRElOR1NfSU5GTy5maW5kKGIgPT4gYi5pZCA9PT0gY29uc3RydWN0aW9uLnR5cGUpO1xuICAgICAgICBpZiAoIWJ1aWxkaW5nSW5mbykgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGJhc2VEdXJhdGlvbiA9IGJ1aWxkaW5nSW5mby5idWlsZFRpbWUgKiAxMDAwO1xuICAgICAgICBjb25zdCBvbGRXb3JrZXJDb3VudCA9IHRhc2sucGF5bG9hZD8udmlsbGFnZXJJZHM/Lmxlbmd0aCB8fCAxO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdGltZUVsYXBzZWQgPSBEYXRlLm5vdygpIC0gdGFzay5zdGFydFRpbWU7XG4gICAgICAgIGNvbnN0IHdvcmtEb25lID0gdGltZUVsYXBzZWQgKiBvbGRXb3JrZXJDb3VudDtcbiAgICAgICAgY29uc3QgdG90YWxXb3JrID0gYmFzZUR1cmF0aW9uO1xuICAgICAgICBjb25zdCB3b3JrUmVtYWluaW5nID0gTWF0aC5tYXgoMCwgdG90YWxXb3JrIC0gd29ya0RvbmUpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbmV3V29ya2VyQ291bnQgPSBvbGRXb3JrZXJDb3VudCArIGNhcHBlZENvdW50O1xuICAgICAgICBjb25zdCBuZXdSZW1haW5pbmdEdXJhdGlvbiA9IHdvcmtSZW1haW5pbmcgLyBuZXdXb3JrZXJDb3VudDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRWaWxsYWdlcklkcyA9IFsuLi50YXNrLnBheWxvYWQhLnZpbGxhZ2VySWRzISwgLi4udmlsbGFnZXJzVG9Bc3NpZ25dO1xuXG4gICAgICAgIHNldEFjdGl2ZVRhc2tzKHByZXYgPT4gcHJldi5tYXAodCA9PiB0LmlkID09PSBjb25zdHJ1Y3Rpb25JZCA/IHtcbiAgICAgICAgICAgIC4uLnQsXG4gICAgICAgICAgICBzdGFydFRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICBkdXJhdGlvbjogbmV3UmVtYWluaW5nRHVyYXRpb24sXG4gICAgICAgICAgICBwYXlsb2FkOiB7IC4uLnQucGF5bG9hZCwgdmlsbGFnZXJJZHM6IHVwZGF0ZWRWaWxsYWdlcklkcyB9XG4gICAgICAgIH0gOiB0KSk7XG5cbiAgICAgICAgc2V0Q29uc3RydWN0aW5nQnVpbGRpbmdzKHByZXYgPT4gcHJldi5tYXAoYyA9PiBjLmlkID09PSBjb25zdHJ1Y3Rpb25JZCA/IHtcbiAgICAgICAgICAgIC4uLmMsXG4gICAgICAgICAgICB2aWxsYWdlcklkczogdXBkYXRlZFZpbGxhZ2VySWRzXG4gICAgICAgIH0gOiBjKSk7XG5cbiAgICAgICAgYWRkVG9Mb2coYCR7Y2FwcGVkQ291bnR9IHZpbGxhZ2VyKHMpIGFyZSBub3cgYXNzaXN0aW5nIHdpdGggdGhlICR7YnVpbGRpbmdJbmZvLm5hbWV9LmAsIGJ1aWxkaW5nSW5mby5pZCk7XG4gICAgICAgIHNldEFjdGl2aXR5U3RhdHVzKGBDb25zdHJ1Y3Rpb24gb2YgdGhlICR7YnVpbGRpbmdJbmZvLm5hbWV9IGlzIG5vdyBmYXN0ZXIuYCk7XG4gICAgICAgIHNldEFzc2lnbm1lbnRQYW5lbFN0YXRlKHsgaXNPcGVuOiBmYWxzZSwgdGFyZ2V0SWQ6IG51bGwsIHRhcmdldFR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUFzc2lnblZpbGxhZ2VycyA9ICh0YXJnZXRJZDogc3RyaW5nLCBjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChhc3NpZ25tZW50UGFuZWxTdGF0ZS50YXJnZXRUeXBlID09PSAncmVzb3VyY2UnKSB7XG4gICAgICAgICAgICBoYW5kbGVBc3NpZ25WaWxsYWdlcnNUb05vZGUodGFyZ2V0SWQsIGNvdW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChhc3NpZ25tZW50UGFuZWxTdGF0ZS50YXJnZXRUeXBlID09PSAnY29uc3RydWN0aW9uJykge1xuICAgICAgICAgICAgaGFuZGxlQXNzaWduVmlsbGFnZXJzVG9Db25zdHJ1Y3Rpb24odGFyZ2V0SWQsIGNvdW50KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVBZHZhbmNlQWdlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlVGFza3Muc29tZSh0ID0+IHQudHlwZSA9PT0gJ2FkdmFuY2VfYWdlJykpIHsgYWRkTm90aWZpY2F0aW9uKFwiQWR2YW5jZW1lbnQgYWxyZWFkeSBpbiBwcm9ncmVzcy5cIik7IHJldHVybjsgfVxuICAgICAgICBpZiAoIXVubGltaXRlZFJlc291cmNlcykge1xuICAgICAgICAgICAgaWYgKHJlc291cmNlcy5mb29kIDwgNTAwIHx8IHJlc291cmNlcy5nb2xkIDwgMjAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWlzc2luZzogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VzLmZvb2QgPCA1MDApIG1pc3NpbmcucHVzaChgJHs1MDAgLSByZXNvdXJjZXMuZm9vZH0gRm9vZGApO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZXMuZ29sZCA8IDIwMCkgbWlzc2luZy5wdXNoKGAkezIwMCAtIHJlc291cmNlcy5nb2xkfSBHb2xkYCk7XG4gICAgICAgICAgICAgICAgYWRkTm90aWZpY2F0aW9uKGBUbyBhZHZhbmNlLCB5b3UgbmVlZCAke21pc3Npbmcuam9pbignIGFuZCAnKX0uYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlUmVzb3VyY2VzKHsgZm9vZDogLTUwMCwgZ29sZDogLTIwMCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IDYwMDAwO1xuICAgICAgICBpZih1bmxpbWl0ZWRSZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIGhhbmRsZVRhc2tDb21wbGV0aW9uKHsgaWQ6ICdpbnN0YW50JywgdHlwZTogJ2FkdmFuY2VfYWdlJywgc3RhcnRUaW1lOiAwLCBkdXJhdGlvbjogMCB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJZCA9IGAke0RhdGUubm93KCl9LWFkdmFuY2VfYWdlYDtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2s6IEdhbWVUYXNrID0geyBpZDogdGFza0lkLCB0eXBlOiAnYWR2YW5jZV9hZ2UnLCBzdGFydFRpbWU6IERhdGUubm93KCksIGR1cmF0aW9uIH07XG4gICAgICAgICAgICBzZXRBY3RpdmVUYXNrcyhwcmV2ID0+IFsuLi5wcmV2LCBuZXdUYXNrXSk7XG4gICAgICAgICAgICBzZXRBY3Rpdml0eVN0YXR1cyhgWW91ciBwZW9wbGUgYmVnaW4gdGhlIGxvbmcgam91cm5leSB0byBhIG5ldyBhZ2UuYCk7XG4gICAgICAgICAgICBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IGhhbmRsZUV4aXRHYW1lID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBzZXRDdXJyZW50U2F2ZU5hbWUobnVsbCk7XG4gICAgICAgIGF3YWl0IGZldGNoU2F2ZXMoKTtcbiAgICAgICAgc2V0R2FtZVN0YXRlKEdhbWVTdGF0dXMuTUVOVSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVRvZ2dsZVVubGltaXRlZFJlc291cmNlcyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3TW9kZSA9ICF1bmxpbWl0ZWRSZXNvdXJjZXM7XG4gICAgICAgIHNldFVubGltaXRlZFJlc291cmNlcyhuZXdNb2RlKTtcbiAgICAgICAgaWYgKG5ld01vZGUpIHtcbiAgICAgICAgICAgIHNldFJlc291cmNlcyh7IGZvb2Q6IDk5OTk5LCB3b29kOiA5OTk5OSwgZ29sZDogOTk5OTksIHN0b25lOiA5OTk5OSB9KTtcbiAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihcIlRlc3QgTW9kZTogT05cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhZGROb3RpZmljYXRpb24oXCJUZXN0IE1vZGU6IE9GRlwiKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBidWlsZGluZ0NvdW50cyA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCBidWlsZGluZ1R5cGUgPSBrZXkgYXMgQnVpbGRpbmdUeXBlO1xuICAgICAgICBhY2NbYnVpbGRpbmdUeXBlXSA9IGJ1aWxkaW5nc1tidWlsZGluZ1R5cGVdLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSBhcyBSZWNvcmQ8QnVpbGRpbmdUeXBlLCBudW1iZXI+KTtcbiAgICBcbiAgICBjb25zdCBpZGxlVmlsbGFnZXJDb3VudCA9IHVuaXRzLnZpbGxhZ2Vycy5maWx0ZXIodiA9PiAhaXNWaWxsYWdlckJ1c3kodi5pZCkpLmxlbmd0aDtcbiAgICBcbiAgICBjb25zdCBhc3NpZ25tZW50VGFyZ2V0ID0gYXNzaWdubWVudFBhbmVsU3RhdGUudGFyZ2V0VHlwZSA9PT0gJ3Jlc291cmNlJ1xuICAgICAgICA/IHJlc291cmNlTm9kZXMuZmluZChuID0+IG4uaWQgPT09IGFzc2lnbm1lbnRQYW5lbFN0YXRlLnRhcmdldElkKVxuICAgICAgICA6IGNvbnN0cnVjdGluZ0J1aWxkaW5ncy5maW5kKGMgPT4gYy5pZCA9PT0gYXNzaWdubWVudFBhbmVsU3RhdGUudGFyZ2V0SWQpO1xuXG4gICAgY29uc3QgY2xvc2VBbGxQYW5lbHMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHNldFVuaXRNYW5hZ2VtZW50UGFuZWwocCA9PiBwLmlzT3BlbiA/IHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9IDogcCk7XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGluc3RhbmNlSWQ6IHVuZGVmaW5lZCwgYW5jaG9yUmVjdDogbnVsbCB9IDogcCk7XG4gICAgICAgIHNldEJ1aWxkUGFuZWxTdGF0ZShwID0+IHAuaXNPcGVuID8geyBpc09wZW46IGZhbHNlLCB2aWxsYWdlcklkOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0gOiBwKTtcbiAgICAgICAgc2V0QXNzaWdubWVudFBhbmVsU3RhdGUocCA9PiBwLmlzT3BlbiA/IHsgaXNPcGVuOiBmYWxzZSwgdGFyZ2V0SWQ6IG51bGwsIHRhcmdldFR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgICAgICBzZXRTZXR0aW5nc1BhbmVsU3RhdGUocCA9PiBwLmlzT3BlbiA/IHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9IDogcCk7XG4gICAgICAgIHNldENpdlBhbmVsU3RhdGUocCA9PiBwLmlzT3BlbiA/IHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9IDogcCk7XG4gICAgICAgIHNldEFsbEJ1aWxkaW5nc1BhbmVsKHAgPT4gcC5pc09wZW4gPyB7IGlzT3BlbjogZmFsc2UsIGFuY2hvclJlY3Q6IG51bGwgfSA6IHApO1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGhhbmRsZU9wZW5CdWlsZGluZ1BhbmVsID0gdXNlQ2FsbGJhY2soKHR5cGU6IEJ1aWxkaW5nVHlwZSwgaW5zdGFuY2VJZDogc3RyaW5nLCByZWN0OiBET01SZWN0KSA9PiB7XG4gICAgICAgIGNsb3NlQWxsUGFuZWxzKCk7XG4gICAgICAgIHNldEJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiB0cnVlLCB0eXBlLCBpbnN0YW5jZUlkLCBhbmNob3JSZWN0OiByZWN0IH0pO1xuICAgIH0sIFtjbG9zZUFsbFBhbmVsc10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc0FueVBhbmVsT3BlbiA9IHVuaXRNYW5hZ2VtZW50UGFuZWwuaXNPcGVuIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGluZ01hbmFnZW1lbnRQYW5lbC5pc09wZW4gfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkUGFuZWxTdGF0ZS5pc09wZW4gfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnRQYW5lbFN0YXRlLmlzT3BlbiB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NQYW5lbFN0YXRlLmlzT3BlbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXZQYW5lbFN0YXRlLmlzT3BlbiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxCdWlsZGluZ3NQYW5lbC5pc09wZW47XG5cbiAgICAgICAgICAgIGlmICghaXNBbnlQYW5lbE9wZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBFbGVtZW50O1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5zY2ktZmktcGFuZWwtcG9wdXAnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2xvc2VBbGxQYW5lbHMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVDbGlja091dHNpZGUpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlQ2xpY2tPdXRzaWRlKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXG4gICAgICAgIHVuaXRNYW5hZ2VtZW50UGFuZWwuaXNPcGVuLCBcbiAgICAgICAgYnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwuaXNPcGVuLFxuICAgICAgICBidWlsZFBhbmVsU3RhdGUuaXNPcGVuLFxuICAgICAgICBhc3NpZ25tZW50UGFuZWxTdGF0ZS5pc09wZW4sXG4gICAgICAgIHNldHRpbmdzUGFuZWxTdGF0ZS5pc09wZW4sXG4gICAgICAgIGNpdlBhbmVsU3RhdGUuaXNPcGVuLFxuICAgICAgICBhbGxCdWlsZGluZ3NQYW5lbC5pc09wZW4sXG4gICAgICAgIGNsb3NlQWxsUGFuZWxzXG4gICAgXSk7XG5cbiAgICBjb25zdCByZW5kZXJDb250ZW50ID0gKCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGdhbWVTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lU3RhdHVzLk1FTlU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxTdGFydFNjcmVlbiBvbk5ld0dhbWU9e2hhbmRsZVN0YXJ0TmV3R2FtZX0gb25SZXN1bWVHYW1lPXtoYW5kbGVSZXN1bWVHYW1lfSBzYXZlZEdhbWVzPXthbGxTYXZlc30gLz47XG4gICAgICAgICAgICBjYXNlIEdhbWVTdGF0dXMuTE9BRElORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gPExvYWRpbmdTY3JlZW4gLz47XG4gICAgICAgICAgICBjYXNlIEdhbWVTdGF0dXMuUExBWUlORzpcbiAgICAgICAgICAgICAgICBpZiAoIWNpdmlsaXphdGlvbikgcmV0dXJuIDxMb2FkaW5nU2NyZWVuIC8+O1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8R2FtZVVJXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l2aWxpemF0aW9uPXtjaXZpbGl6YXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzPXtyZXNvdXJjZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdHM9e3VuaXRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5ncz17YnVpbGRpbmdzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRpb249e3BvcHVsYXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEFnZT17Y3VycmVudEFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lTG9nPXtnYW1lTG9nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFdmVudD17Y3VycmVudEV2ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXZlbnRDaG9pY2U9e2hhbmRsZUV2ZW50Q2hvaWNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlRGVsdGFzPXtyZXNvdXJjZURlbHRhc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVN0YXR1cz17YWN0aXZpdHlTdGF0dXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdExpc3Q9e1VOSVRfSU5GT31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGluZ0xpc3Q9e0JVSUxESU5HU19JTkZPfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uT3BlblVuaXRQYW5lbD17KHR5cGUsIHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0VW5pdE1hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogdHJ1ZSwgdHlwZSwgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5CdWlsZGluZ1BhbmVsPXtoYW5kbGVPcGVuQnVpbGRpbmdQYW5lbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5BbGxCdWlsZGluZ3NQYW5lbD17KHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0QWxsQnVpbGRpbmdzUGFuZWwoeyBpc09wZW46IHRydWUsIGFuY2hvclJlY3Q6IHJlY3QgfSk7IH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyQWN0aW9uPXtwbGF5ZXJBY3Rpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Db25maXJtUGxhY2VtZW50PXtoYW5kbGVDb25maXJtUGxhY2VtZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2FuY2VsUGxheWVyQWN0aW9uPXtoYW5kbGVDYW5jZWxQbGF5ZXJBY3Rpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25CdWlsZGluZ0NsaWNrPXsoYnVpbGRpbmcsIHJlY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VBbGxQYW5lbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IE9iamVjdC5rZXlzKGJ1aWxkaW5ncykuZmluZChrZXkgPT4gYnVpbGRpbmdzW2tleSBhcyBCdWlsZGluZ1R5cGVdLnNvbWUoYiA9PiBiLmlkID09PSBidWlsZGluZy5pZCkpIGFzIEJ1aWxkaW5nVHlwZSB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZSkgc2V0QnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwoeyBpc09wZW46IHRydWUsIHR5cGUsIGluc3RhbmNlSWQ6IGJ1aWxkaW5nLmlkLCBhbmNob3JSZWN0OiByZWN0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGltZW5zaW9ucz17TUFQX0RJTUVOU0lPTlN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0aW5nQnVpbGRpbmdzPXtjb25zdHJ1Y3RpbmdCdWlsZGluZ3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVGFza3M9e2FjdGl2ZVRhc2tzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXhpdEdhbWU9e2hhbmRsZUV4aXRHYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uT3BlblNldHRpbmdzUGFuZWw9eyhyZWN0KSA9PiB7IGNsb3NlQWxsUGFuZWxzKCk7IHNldFNldHRpbmdzUGFuZWxTdGF0ZSh7IGlzT3BlbjogdHJ1ZSwgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5DaXZQYW5lbD17KHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgc2V0Q2l2UGFuZWxTdGF0ZSh7IGlzT3BlbjogdHJ1ZSwgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU5vZGVzPXtyZXNvdXJjZU5vZGVzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uT3BlbkFzc2lnbm1lbnRQYW5lbD17KG5vZGVJZCwgcmVjdCkgPT4geyBjbG9zZUFsbFBhbmVscygpOyBzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSh7IGlzT3BlbjogdHJ1ZSwgdGFyZ2V0SWQ6IG5vZGVJZCwgdGFyZ2V0VHlwZTogJ3Jlc291cmNlJywgYW5jaG9yUmVjdDogcmVjdCB9KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5Db25zdHJ1Y3Rpb25QYW5lbD17KGNvbnN0cnVjdGlvbklkLCByZWN0KSA9PiB7IGNsb3NlQWxsUGFuZWxzKCk7IHNldEFzc2lnbm1lbnRQYW5lbFN0YXRlKHsgaXNPcGVuOiB0cnVlLCB0YXJnZXRJZDogY29uc3RydWN0aW9uSWQsIHRhcmdldFR5cGU6ICdjb25zdHJ1Y3Rpb24nLCBhbmNob3JSZWN0OiByZWN0IH0pOyB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhdGhlckluZm89e0dBVEhFUl9JTkZPfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdWlsZFBhbmVsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzT3Blbj17YnVpbGRQYW5lbFN0YXRlLmlzT3Blbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRCdWlsZFBhbmVsU3RhdGUoeyBpc09wZW46IGZhbHNlLCB2aWxsYWdlcklkOiBudWxsLCBhbmNob3JSZWN0OiBudWxsIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3RhcnRQbGFjZW1lbnQ9e2hhbmRsZVN0YXJ0UGxhY2VtZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlcz17cmVzb3VyY2VzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5nQ291bnRzPXtidWlsZGluZ0NvdW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGluZ0xpc3Q9e0JVSUxESU5HU19JTkZPfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclJlY3Q9e2J1aWxkUGFuZWxTdGF0ZS5hbmNob3JSZWN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsT3BhY2l0eT17cGFuZWxPcGFjaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxVbml0TWFuYWdlbWVudFBhbmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPcGVuPXt1bml0TWFuYWdlbWVudFBhbmVsLmlzT3Blbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRVbml0TWFuYWdlbWVudFBhbmVsKHsgaXNPcGVuOiBmYWxzZSwgdHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXt1bml0TWFuYWdlbWVudFBhbmVsLnR5cGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdHM9e3VuaXRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlVW5pdD17aGFuZGxlVXBkYXRlVW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRpc21pc3NVbml0PXtoYW5kbGVEaXNtaXNzU3BlY2lmaWNVbml0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSW5pdGlhdGVCdWlsZD17KHZpbGxhZ2VySWQsIHJlY3QpID0+IHsgY2xvc2VBbGxQYW5lbHMoKTsgaGFuZGxlSW5pdGlhdGVCdWlsZCh2aWxsYWdlcklkLCByZWN0KTsgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRWaWxsYWdlclRhc2tEZXRhaWxzPXtnZXRWaWxsYWdlclRhc2tEZXRhaWxzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclJlY3Q9e3VuaXRNYW5hZ2VtZW50UGFuZWwuYW5jaG9yUmVjdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYW5lbE9wYWNpdHk9e3BhbmVsT3BhY2l0eX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnVpbGRpbmdNYW5hZ2VtZW50UGFuZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc09wZW49e2J1aWxkaW5nTWFuYWdlbWVudFBhbmVsLmlzT3Blbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRCdWlsZGluZ01hbmFnZW1lbnRQYW5lbCh7IGlzT3BlbjogZmFsc2UsIHR5cGU6IG51bGwsIGFuY2hvclJlY3Q6IG51bGwgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWxTdGF0ZT17YnVpbGRpbmdNYW5hZ2VtZW50UGFuZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmdzPXtidWlsZGluZ3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmdMaXN0PXtCVUlMRElOR1NfSU5GT31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZUJ1aWxkaW5nPXtoYW5kbGVVcGRhdGVCdWlsZGluZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRlbW9saXNoQnVpbGRpbmc9e2hhbmRsZURlbW9saXNoQnVpbGRpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25UcmFpblVuaXRzPXtoYW5kbGVUcmFpblVuaXRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVHJhaW5WaWxsYWdlcnM9e2hhbmRsZVRyYWluVmlsbGFnZXJzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlcz17cmVzb3VyY2VzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRpb249e3BvcHVsYXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdExpc3Q9e1VOSVRfSU5GT31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkFkdmFuY2VBZ2U9e2hhbmRsZUFkdmFuY2VBZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVGFza3M9e2FjdGl2ZVRhc2tzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclJlY3Q9e2J1aWxkaW5nTWFuYWdlbWVudFBhbmVsLmFuY2hvclJlY3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFuZWxPcGFjaXR5PXtwYW5lbE9wYWNpdHl9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJlc291cmNlQXNzaWdubWVudFBhbmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPcGVuPXthc3NpZ25tZW50UGFuZWxTdGF0ZS5pc09wZW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbG9zZT17KCkgPT4gc2V0QXNzaWdubWVudFBhbmVsU3RhdGUoeyBpc09wZW46IGZhbHNlLCB0YXJnZXRJZDogbnVsbCwgdGFyZ2V0VHlwZTogbnVsbCwgYW5jaG9yUmVjdDogbnVsbCB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50VGFyZ2V0PXthc3NpZ25tZW50VGFyZ2V0IHx8IG51bGx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRsZVZpbGxhZ2VyQ291bnQ9e2lkbGVWaWxsYWdlckNvdW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQXNzaWduVmlsbGFnZXJzPXtoYW5kbGVBc3NpZ25WaWxsYWdlcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2F0aGVySW5mbz17R0FUSEVSX0lORk99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmdMaXN0PXtCVUlMRElOR1NfSU5GT31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JSZWN0PXthc3NpZ25tZW50UGFuZWxTdGF0ZS5hbmNob3JSZWN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsT3BhY2l0eT17cGFuZWxPcGFjaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZXR0aW5nc1BhbmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPcGVuPXtzZXR0aW5nc1BhbmVsU3RhdGUuaXNPcGVufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHNldFNldHRpbmdzUGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIGFuY2hvclJlY3Q6IG51bGwgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yUmVjdD17c2V0dGluZ3NQYW5lbFN0YXRlLmFuY2hvclJlY3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eT17cGFuZWxPcGFjaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uT3BhY2l0eUNoYW5nZT17c2V0UGFuZWxPcGFjaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaXZpbGl6YXRpb25QYW5lbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzT3Blbj17Y2l2UGFuZWxTdGF0ZS5pc09wZW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbG9zZT17KCkgPT4gc2V0Q2l2UGFuZWxTdGF0ZSh7IGlzT3BlbjogZmFsc2UsIGFuY2hvclJlY3Q6IG51bGwgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l2aWxpemF0aW9uPXtjaXZpbGl6YXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yUmVjdD17Y2l2UGFuZWxTdGF0ZS5hbmNob3JSZWN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsT3BhY2l0eT17cGFuZWxPcGFjaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxBbGxCdWlsZGluZ3NQYW5lbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzT3Blbj17YWxsQnVpbGRpbmdzUGFuZWwuaXNPcGVufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHNldEFsbEJ1aWxkaW5nc1BhbmVsKHsgaXNPcGVuOiBmYWxzZSwgYW5jaG9yUmVjdDogbnVsbCB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGluZ0xpc3Q9e0JVSUxESU5HU19JTkZPfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5nQ291bnRzPXtidWlsZGluZ0NvdW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RpbmdCdWlsZGluZ3M9e2NvbnN0cnVjdGluZ0J1aWxkaW5nc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk9wZW5CdWlsZGluZ1BhbmVsPXtoYW5kbGVPcGVuQnVpbGRpbmdQYW5lbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JSZWN0PXthbGxCdWlsZGluZ3NQYW5lbC5hbmNob3JSZWN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsT3BhY2l0eT17cGFuZWxPcGFjaXR5fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxTdGFydFNjcmVlbiBvbk5ld0dhbWU9e2hhbmRsZVN0YXJ0TmV3R2FtZX0gb25SZXN1bWVHYW1lPXtoYW5kbGVSZXN1bWVHYW1lfSBzYXZlZEdhbWVzPXthbGxTYXZlc30gLz47XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gYmctc3RvbmUtZGFyayBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBwLTRcIj5cbiAgICAgICAgICAgIHtnYW1lU3RhdGUgPT09IEdhbWVTdGF0dXMuUExBWUlORyAmJiAoXG4gICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlVG9nZ2xlVW5saW1pdGVkUmVzb3VyY2VzfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmaXhlZCBib3R0b20tNCBsZWZ0LTQgei1bMTAxXSBiZy1icmFuZC1nb2xkIHRleHQtc3RvbmUtZGFyayBmb250LWJvbGQgcHktMSBweC0zIHJvdW5kZWQtZnVsbCB0ZXh0LXhzIHNoYWRvdy1sZyBob3ZlcjpzY2FsZS0xMDUgdHJhbnNpdGlvbi10cmFuc2Zvcm1cIlxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiVG9nZ2xlIHVubGltaXRlZCByZXNvdXJjZXMgdGVzdCBtb2RlXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIFRlc3QgTW9kZToge3VubGltaXRlZFJlc291cmNlcyA/ICdPTicgOiAnT0ZGJ31cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Tm90aWZpY2F0aW9uTWFuYWdlciBub3RpZmljYXRpb25zPXtub3RpZmljYXRpb25zfSBvblJlbW92ZU5vdGlmaWNhdGlvbj17cmVtb3ZlTm90aWZpY2F0aW9ufSAvPlxuICAgICAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwidy1mdWxsIG1heC13LTd4bCBteC1hdXRvXCI+XG4gICAgICAgICAgICAgICAge3JlbmRlckNvbnRlbnQoKX1cbiAgICAgICAgICAgIDwvbWFpbj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWVQYWdlO1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInVzZVJlZiIsIkdhbWVTdGF0dXMiLCJnZXRQcmVkZWZpbmVkQ2l2aWxpemF0aW9uIiwiZ2V0UHJlZGVmaW5lZEdhbWVFdmVudCIsImdldFByZWRlZmluZWRBZ2UiLCJzYXZlR2FtZVN0YXRlIiwibG9hZEdhbWVTdGF0ZSIsImdldEFsbFNhdmVOYW1lcyIsImdldFJhbmRvbU5hbWVzIiwiR2FtZVVJIiwiU3RhcnRTY3JlZW4iLCJMb2FkaW5nU2NyZWVuIiwiQnVpbGRQYW5lbCIsIk5vdGlmaWNhdGlvbk1hbmFnZXIiLCJVbml0TWFuYWdlbWVudFBhbmVsIiwiQnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwiLCJSZXNvdXJjZUFzc2lnbm1lbnRQYW5lbCIsIlNldHRpbmdzUGFuZWwiLCJDaXZpbGl6YXRpb25QYW5lbCIsIkFsbEJ1aWxkaW5nc1BhbmVsIiwiQlVJTERJTkdTX0lORk8iLCJpZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImNvc3QiLCJ3b29kIiwiaXNVbmlxdWUiLCJidWlsZFRpbWUiLCJzdG9uZSIsImdvbGQiLCJVTklUX0lORk8iLCJmb29kIiwicmVxdWlyZWRCdWlsZGluZyIsInRyYWluVGltZSIsIkdBVEhFUl9JTkZPIiwicmF0ZSIsImluaXRpYWxCdWlsZGluZ3NTdGF0ZSIsImhvdXNlcyIsImJhcnJhY2tzIiwiYXJjaGVyeVJhbmdlIiwic3RhYmxlIiwic2llZ2VXb3Jrc2hvcCIsImJsYWNrc21pdGgiLCJ3YXRjaFRvd2VyIiwidG93bkNlbnRlciIsIk1BUF9ESU1FTlNJT05TIiwid2lkdGgiLCJoZWlnaHQiLCJHYW1lUGFnZSIsImJ1aWxkaW5ncyIsImdhbWVTdGF0ZSIsInNldEdhbWVTdGF0ZSIsIk1FTlUiLCJjaXZpbGl6YXRpb24iLCJzZXRDaXZpbGl6YXRpb24iLCJyZXNvdXJjZXMiLCJzZXRSZXNvdXJjZXMiLCJ1bml0cyIsInNldFVuaXRzIiwidmlsbGFnZXJzIiwibWlsaXRhcnkiLCJzZXRCdWlsZGluZ3MiLCJjdXJyZW50QWdlIiwic2V0Q3VycmVudEFnZSIsImdhbWVMb2ciLCJzZXRHYW1lTG9nIiwiY3VycmVudEV2ZW50Iiwic2V0Q3VycmVudEV2ZW50IiwicmVzb3VyY2VEZWx0YXMiLCJzZXRSZXNvdXJjZURlbHRhcyIsImFjdGl2aXR5U3RhdHVzIiwic2V0QWN0aXZpdHlTdGF0dXMiLCJub3RpZmljYXRpb25zIiwic2V0Tm90aWZpY2F0aW9ucyIsInVubGltaXRlZFJlc291cmNlcyIsInNldFVubGltaXRlZFJlc291cmNlcyIsImFsbFNhdmVzIiwic2V0QWxsU2F2ZXMiLCJjdXJyZW50U2F2ZU5hbWUiLCJzZXRDdXJyZW50U2F2ZU5hbWUiLCJwbGF5ZXJBY3Rpb24iLCJzZXRQbGF5ZXJBY3Rpb24iLCJhY3RpdmVUYXNrcyIsInNldEFjdGl2ZVRhc2tzIiwiY29uc3RydWN0aW5nQnVpbGRpbmdzIiwic2V0Q29uc3RydWN0aW5nQnVpbGRpbmdzIiwicmVzb3VyY2VOb2RlcyIsInNldFJlc291cmNlTm9kZXMiLCJwYW5lbE9wYWNpdHkiLCJzZXRQYW5lbE9wYWNpdHkiLCJidWlsZFBhbmVsU3RhdGUiLCJzZXRCdWlsZFBhbmVsU3RhdGUiLCJpc09wZW4iLCJ2aWxsYWdlcklkIiwiYW5jaG9yUmVjdCIsInVuaXRNYW5hZ2VtZW50UGFuZWwiLCJzZXRVbml0TWFuYWdlbWVudFBhbmVsIiwidHlwZSIsImJ1aWxkaW5nTWFuYWdlbWVudFBhbmVsIiwic2V0QnVpbGRpbmdNYW5hZ2VtZW50UGFuZWwiLCJhbGxCdWlsZGluZ3NQYW5lbCIsInNldEFsbEJ1aWxkaW5nc1BhbmVsIiwiYXNzaWdubWVudFBhbmVsU3RhdGUiLCJzZXRBc3NpZ25tZW50UGFuZWxTdGF0ZSIsInRhcmdldElkIiwidGFyZ2V0VHlwZSIsInNldHRpbmdzUGFuZWxTdGF0ZSIsInNldFNldHRpbmdzUGFuZWxTdGF0ZSIsImNpdlBhbmVsU3RhdGUiLCJzZXRDaXZQYW5lbFN0YXRlIiwiZGVsdGFUaW1lb3V0UmVmIiwiZXZlbnRUaW1lclJlZiIsInBvcHVsYXRpb24iLCJjdXJyZW50IiwibGVuZ3RoIiwiY2FwYWNpdHkiLCJmZXRjaFNhdmVzIiwibmFtZXMiLCJQTEFZSU5HIiwiZnVsbFN0YXRlIiwiYWRkTm90aWZpY2F0aW9uIiwibWVzc2FnZSIsIk1hdGgiLCJEYXRlIiwibm93IiwicmFuZG9tIiwicHJldiIsInJlbW92ZU5vdGlmaWNhdGlvbiIsImZpbHRlciIsIm4iLCJhZGRUb0xvZyIsImljb24iLCJzbGljZSIsInVwZGF0ZVJlc291cmNlcyIsImRlbHRhcyIsIm5ld1Jlc291cmNlcyIsImtleSIsInJlc291cmNlS2V5IiwibWF4Iiwid2luZG93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5ld0RlbHRhcyIsImhhbmRsZU5ld0V2ZW50Iiwibm9uR2F0aGVyaW5nVGFza3MiLCJ0IiwiZXZlbnQiLCJzY2hlZHVsZU5leHRFdmVudCIsIm5leHRFdmVudFRpbWUiLCJnZW5lcmF0ZVJlc291cmNlTm9kZXMiLCJleGlzdGluZ1Bvc2l0aW9ucyIsIm5vZGVzIiwidHlwZXMiLCJudW1Ob2RlcyIsImZsb29yIiwiaSIsInBvcyIsIngiLCJ5IiwiaGFzIiwiYWRkIiwiYW1vdW50IiwicHVzaCIsInBvc2l0aW9uIiwiYXNzaWduZWRWaWxsYWdlcnMiLCJoYW5kbGVTdGFydE5ld0dhbWUiLCJzYXZlTmFtZSIsImluY2x1ZGVzIiwiTE9BRElORyIsImNpdiIsImluaXRpYWxWaWxsYWdlck5hbWVzIiwiaW5pdGlhbFZpbGxhZ2VycyIsIm1hcCIsImluaXRpYWxUQ05hbWUiLCJ0Y1Bvc2l0aW9uIiwiaW5pdGlhbFRDIiwiU2V0IiwiZ2V0VmlsbGFnZXJUYXNrRGV0YWlscyIsInRhc2siLCJmaW5kIiwicGF5bG9hZCIsInZpbGxhZ2VySWRzIiwiYnVpbGRpbmdJbmZvIiwiYiIsImJ1aWxkaW5nVHlwZSIsIm5vZGUiLCJyZXNvdXJjZU5vZGVJZCIsImlzVmlsbGFnZXJCdXN5IiwiaGFuZGxlUmVzdW1lR2FtZSIsInNhdmVkU3RhdGUiLCJzb2xkaWVycyIsIm1pZ3JhdGVkTWlsaXRhcnkiLCJzIiwidW5pdFR5cGUiLCJmaW5hbEJ1aWxkaW5ncyIsIm9jY3VwaWVkQ2VsbHMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmbGF0IiwidGNQb3MiLCJ0Y05hbWUiLCJmaXJzdEJ1aWxkaW5nIiwibWlncmF0ZWQiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImluc3RhbmNlcyIsImluc3QiLCJub2Rlc1RvU2V0IiwidW5kZWZpbmVkIiwiYyIsImhhbmRsZVRhc2tDb21wbGV0aW9uIiwibmV3QnVpbGRpbmciLCJwIiwicHJldk5vZGVzIiwiY29uc29sZSIsIndhcm4iLCJhbW91bnRUb0FkZCIsImNvdW50IiwibmV3VmlsbGFnZXJOYW1lcyIsIm5ld1ZpbGxhZ2VycyIsInVuaXRJbmZvIiwidSIsIm5ld1VuaXROYW1lcyIsIm5ld1VuaXRzIiwidGl0bGUiLCJhZ2VSZXN1bHQiLCJuZXh0QWdlTmFtZSIsImdhbWVMb29wIiwic2V0SW50ZXJ2YWwiLCJjb21wbGV0ZWRUYXNrcyIsImN1cnJlbnRUYXNrcyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwiY2xlYXJJbnRlcnZhbCIsIm1ham9yVGFza0luUHJvZ3Jlc3MiLCJzb21lIiwiaGFuZGxlRXZlbnRDaG9pY2UiLCJjaG9pY2UiLCJ0ZXh0IiwibWlzc2luZ1JlcyIsInJlc0tleSIsImpvaW4iLCJuZWdhdGl2ZUNvc3QiLCJpc1N1Y2Nlc3MiLCJzdWNjZXNzQ2hhbmNlIiwiZWZmZWN0cyIsInN1Y2Nlc3NFZmZlY3RzIiwiZmFpbHVyZUVmZmVjdHMiLCJBcnJheSIsImlzQXJyYXkiLCJtaW4iLCJyZXNvdXJjZSIsImxvZyIsImhhbmRsZUluaXRpYXRlQnVpbGQiLCJyZWN0IiwiaGFuZGxlU3RhcnRQbGFjZW1lbnQiLCJidWlsZGluZ0lkIiwibWlzc2luZyIsInJlcyIsIm1vZGUiLCJoYW5kbGVDb25maXJtUGxhY2VtZW50IiwiYnVpbGRlciIsInYiLCJ0YXNrUGF5bG9hZCIsInRhc2tJZCIsIm5ld0NvbnN0cnVjdGlvbiIsIm5ld1Rhc2siLCJoYW5kbGVDYW5jZWxQbGF5ZXJBY3Rpb24iLCJoYW5kbGVEZW1vbGlzaEJ1aWxkaW5nIiwiYnVpbGRpbmdJbnN0YW5jZSIsInJlZnVuZCIsInJlZnVuZE1lc3NhZ2VQYXJ0cyIsImhhbmRsZVVwZGF0ZUJ1aWxkaW5nIiwiaGFuZGxlVHJhaW5WaWxsYWdlcnMiLCJ2aWxsYWdlckNvc3QiLCJ0b3RhbENvc3QiLCJoYW5kbGVUcmFpblVuaXRzIiwidHJhaW5pbmdCdWlsZGluZyIsImhhbmRsZURpc21pc3NTcGVjaWZpY1VuaXQiLCJ1bml0IiwidW5pdFR5cGVOYW1lIiwiaGFuZGxlVXBkYXRlVW5pdCIsInVwZGF0ZWRVbml0IiwiaGFuZGxlQXNzaWduVmlsbGFnZXJzVG9Ob2RlIiwibm9kZUlkIiwiaWRsZVZpbGxhZ2VycyIsImNhcHBlZENvdW50IiwidmlsbGFnZXJzVG9Bc3NpZ24iLCJ2aWxsYWdlcklkc1RvQXNzaWduIiwidGFyZ2V0Tm9kZSIsImdhdGhlclJhdGVQZXJWaWxsYWdlciIsImFtb3VudFBlclNlY29uZCIsImdhdGhlckludGVydmFsIiwibm9kZUlzRGVwbGV0ZWQiLCJuZXdBbW91bnQiLCJCb29sZWFuIiwiaGFuZGxlQXNzaWduVmlsbGFnZXJzVG9Db25zdHJ1Y3Rpb24iLCJjb25zdHJ1Y3Rpb25JZCIsImNvbnN0cnVjdGlvbiIsImJhc2VEdXJhdGlvbiIsIm9sZFdvcmtlckNvdW50IiwidGltZUVsYXBzZWQiLCJ3b3JrRG9uZSIsInRvdGFsV29yayIsIndvcmtSZW1haW5pbmciLCJuZXdXb3JrZXJDb3VudCIsIm5ld1JlbWFpbmluZ0R1cmF0aW9uIiwidXBkYXRlZFZpbGxhZ2VySWRzIiwiaGFuZGxlQXNzaWduVmlsbGFnZXJzIiwiaGFuZGxlQWR2YW5jZUFnZSIsImhhbmRsZUV4aXRHYW1lIiwiaGFuZGxlVG9nZ2xlVW5saW1pdGVkUmVzb3VyY2VzIiwibmV3TW9kZSIsImJ1aWxkaW5nQ291bnRzIiwia2V5cyIsInJlZHVjZSIsImFjYyIsImlkbGVWaWxsYWdlckNvdW50IiwiYXNzaWdubWVudFRhcmdldCIsImNsb3NlQWxsUGFuZWxzIiwiaW5zdGFuY2VJZCIsImhhbmRsZU9wZW5CdWlsZGluZ1BhbmVsIiwiaGFuZGxlQ2xpY2tPdXRzaWRlIiwiaXNBbnlQYW5lbE9wZW4iLCJ0YXJnZXQiLCJjbG9zZXN0IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbmRlckNvbnRlbnQiLCJvbk5ld0dhbWUiLCJvblJlc3VtZUdhbWUiLCJzYXZlZEdhbWVzIiwib25FdmVudENob2ljZSIsInVuaXRMaXN0IiwiYnVpbGRpbmdMaXN0Iiwib25PcGVuVW5pdFBhbmVsIiwib25PcGVuQnVpbGRpbmdQYW5lbCIsIm9uT3BlbkFsbEJ1aWxkaW5nc1BhbmVsIiwib25Db25maXJtUGxhY2VtZW50Iiwib25DYW5jZWxQbGF5ZXJBY3Rpb24iLCJvbkJ1aWxkaW5nQ2xpY2siLCJidWlsZGluZyIsIm1hcERpbWVuc2lvbnMiLCJvbkV4aXRHYW1lIiwib25PcGVuU2V0dGluZ3NQYW5lbCIsIm9uT3BlbkNpdlBhbmVsIiwib25PcGVuQXNzaWdubWVudFBhbmVsIiwib25PcGVuQ29uc3RydWN0aW9uUGFuZWwiLCJnYXRoZXJJbmZvIiwib25DbG9zZSIsIm9uU3RhcnRQbGFjZW1lbnQiLCJvblVwZGF0ZVVuaXQiLCJvbkRpc21pc3NVbml0Iiwib25Jbml0aWF0ZUJ1aWxkIiwicGFuZWxTdGF0ZSIsIm9uVXBkYXRlQnVpbGRpbmciLCJvbkRlbW9saXNoQnVpbGRpbmciLCJvblRyYWluVW5pdHMiLCJvblRyYWluVmlsbGFnZXJzIiwib25BZHZhbmNlQWdlIiwib25Bc3NpZ25WaWxsYWdlcnMiLCJvcGFjaXR5Iiwib25PcGFjaXR5Q2hhbmdlIiwiZGl2IiwiY2xhc3NOYW1lIiwiYnV0dG9uIiwib25DbGljayIsImFyaWEtbGFiZWwiLCJvblJlbW92ZU5vdGlmaWNhdGlvbiIsIm1haW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ })

});